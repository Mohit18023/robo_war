{"ast":null,"code":"// // src/CanvasGame.js\n\n// import React, { Component, createRef } from 'react';\n// import './CanvasGame.css';\n// import { Sprite, Fighter } from './classes';\n\n// // Import GSAP\n// import gsap from 'gsap'; // Add this import\n\n// // Import or define your rectangularCollision and determineWinner functions\n// import { rectangularCollision, determineWinner } from './utils';\n\n// class CanvasGame extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.canvasRef = createRef();\n//       this.player = null;\n//       this.enemy = null;\n//       this.timerId = null; // Initialize timerId\n\n//       // Define keys object to track key presses\n//       this.keys = {\n//         a: false,\n//         d: false,\n//         ArrowRight: false,\n//         ArrowLeft: false,\n//       };\n\n//     // Bind event handlers to this context\n//     this.handleKeyDown = this.handleKeyDown.bind(this);\n//     this.handleKeyUp = this.handleKeyUp.bind(this);\n//   }\n\n//   componentDidMount() {\n//     const canvas = this.canvasRef.current;\n//     const c = canvas.getContext('2d');\n\n//     canvas.width = 1024;\n//     canvas.height = 576;\n\n//     c.fillRect(0, 0, canvas.width, canvas.height);\n\n//     const gravity = 0.7;\n\n//     const background = new Sprite({\n//       position: {\n//         x: 0,\n//         y: 0\n//       },\n//       imageSrc: './img/background.png',\n//       context: c\n//     });\n\n//     const shop = new Sprite({\n//       position: {\n//         x: 600,\n//         y: 128\n//       },\n//       imageSrc: './img/shop.png',\n//       scale: 2.75,\n//       framesMax: 6\n//     });\n\n//     this.player = new Fighter({\n//       position: {\n//         x: 0,\n//         y: 0\n//       },\n//       velocity: {\n//         x: 0,\n//         y: 0\n//       },\n//       offset: {\n//         x: 0,\n//         y: 0\n//       },\n//       imageSrc: './img/samuraiMack/Idle.png',\n//       framesMax: 8,\n//       scale: 2.5,\n//       offset: {\n//         x: 215,\n//         y: 157\n//       },\n//       sprites: {\n//         // Define your sprite configurations here\n//         idle: {\n//             imageSrc: './img/samuraiMack/Idle.png',\n//             framesMax: 8\n//           },\n//           run: {\n//             imageSrc: './img/samuraiMack/Run.png',\n//             framesMax: 8\n//           },\n//           jump: {\n//             imageSrc: './img/samuraiMack/Jump.png',\n//             framesMax: 2\n//           },\n//           fall: {\n//             imageSrc: './img/samuraiMack/Fall.png',\n//             framesMax: 2\n//           },\n//           attack1: {\n//             imageSrc: 'C:\\Users\\Meenal Jain\\Desktop\\fighting-game\\GameFrames\\Attack1.png',\n//             framesMax: 6\n//           },\n//           takeHit: {\n//             imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\n//             framesMax: 4\n//           },\n//           death: {\n//             imageSrc: './img/samuraiMack/Death.png',\n//             framesMax: 6\n//           }\n//       },\n//       attackBox: {\n//         offset: {\n//           x: 100,\n//           y: 50\n//         },\n//         width: 160,\n//         height: 50\n//       }\n//     });\n\n//     this.enemy = new Fighter({\n//       position: {\n//         x: 400,\n//         y: 100\n//       },\n//       velocity: {\n//         x: 0,\n//         y: 0\n//       },\n//       color: 'blue',\n//       offset: {\n//         x: -50,\n//         y: 0\n//       },\n//       imageSrc: './img/kenji/Idle.png',\n//       framesMax: 4,\n//       scale: 2.5,\n//       offset: {\n//         x: 215,\n//         y: 167\n//       },\n//       sprites: {\n//         // Define your sprite configurations here\n//         idle: {\n//             imageSrc: './img/kenji/Idle.png',\n//             framesMax: 4\n//           },\n//           run: {\n//             imageSrc: './img/kenji/Run.png',\n//             framesMax: 8\n//           },\n//           jump: {\n//             imageSrc: './img/kenji/Jump.png',\n//             framesMax: 2\n//           },\n//           fall: {\n//             imageSrc: './img/kenji/Fall.png',\n//             framesMax: 2\n//           },\n//           attack1: {\n//             imageSrc: './img/kenji/Attack1.png',\n//             framesMax: 4\n//           },\n//           takeHit: {\n//             imageSrc: './img/kenji/Take hit.png',\n//             framesMax: 3\n//           },\n//           death: {\n//             imageSrc: './img/kenji/Death.png',\n//             framesMax: 7\n//           }\n//       },\n//       attackBox: {\n//         offset: {\n//           x: -170,\n//           y: 50\n//         },\n//         width: 170,\n//         height: 50\n//       }\n//     });\n\n//     console.log(this.player);\n\n//     const keys = {\n//       a: {\n//         pressed: false\n//       },\n//       d: {\n//         pressed: false\n//       },\n//       ArrowRight: {\n//         pressed: false\n//       },\n//       ArrowLeft: {\n//         pressed: false\n//       }\n//     };\n\n//     window.addEventListener('keydown', this.handleKeyDown);\n//     window.addEventListener('keyup', this.handleKeyUp);\n//     // Implement the rest of your canvas game logic here\n\n//     function animate() {\n//       window.requestAnimationFrame(animate);\n//       c.fillStyle = 'black';\n//       c.fillRect(0, 0, canvas.width, canvas.height);\n//       background.update();\n//       shop.update();\n//       c.fillStyle = 'rgba(255, 255, 255, 0.15)';\n//       c.fillRect(0, 0, canvas.width, canvas.height);\n//       player.update();\n//       enemy.update();\n\n//       player.velocity.x = 0\n//       enemy.velocity.x = 0\n//       // Implement the rest of your animation and game logic here\n\n//         // player movement\n\n//   if (keys.a.pressed && player.lastKey === 'a') {\n//     player.velocity.x = -5\n//     player.switchSprite('run')\n//   } else if (keys.d.pressed && player.lastKey === 'd') {\n//     player.velocity.x = 5\n//     player.switchSprite('run')\n//   } else {\n//     player.switchSprite('idle')\n//   }\n\n//   // jumping\n//   if (player.velocity.y < 0) {\n//     player.switchSprite('jump')\n//   } else if (player.velocity.y > 0) {\n//     player.switchSprite('fall')\n//   }\n\n//   // Enemy movement\n//   if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n//     enemy.velocity.x = -5\n//     enemy.switchSprite('run')\n//   } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n//     enemy.velocity.x = 5\n//     enemy.switchSprite('run')\n//   } else {\n//     enemy.switchSprite('idle')\n//   }\n\n//   // jumping\n//   if (enemy.velocity.y < 0) {\n//     enemy.switchSprite('jump')\n//   } else if (enemy.velocity.y > 0) {\n//     enemy.switchSprite('fall')\n//   }\n\n//   // detect for collision & enemy gets hit\n//   if (\n//   rectangularCollision({\n//     rectangle1: player,\n//     rectangle2: enemy\n//   }) &&\n//   player.isAttacking &&\n//   player.framesCurrent === 4\n// ) {\n//   enemy.takeHit()\n//   player.isAttacking = false\n\n//   this.gsap.to('#enemyHealth', {\n//     width: enemy.health + '%'\n//   })\n// }\n\n//   // if player misses\n//   if (player.isAttacking && player.framesCurrent === 4) {\n//     player.isAttacking = false\n//   }\n\n//   // this is where our player gets hit\n//   if (\n//     rectangularCollision({\n//       rectangle1: enemy,\n//       rectangle2: player\n//     }) &&\n//     enemy.isAttacking &&\n//     enemy.framesCurrent === 2\n//   ) {\n//     player.takeHit()\n//     enemy.isAttacking = false\n\n//     this.gsap.to('#playerHealth', {\n//       width: player.health + '%'\n//     })\n//   }\n\n//   // if player misses\n//   if (enemy.isAttacking && enemy.framesCurrent === 2) {\n//     enemy.isAttacking = false\n//   }\n\n//   // end game based on health\n//   if (this.enemy.health <= 0 || this.player.health <= 0) {\n//     // determineWinner({ player, enemy, timerId })\n//     determineWinner({ player: this.player, enemy: this.enemy, timerId });\n//   }\n//    // Gravity function\n//     if (player.position.y + player.height + player.velocity.y >= canvas.height - 96) {\n//         player.velocity.y = 0;\n//         player.position.y = 330;\n//       } else player.velocity.y += gravity;\n//     }\n\n//     animate();\n\n//     // Add event listeners for keyboard input\n\n//     // window.addEventListener('keydown', (event) => {\n//     //   if (!player.dead) {\n//     //     switch (event.key) {\n//     //       // Handle player input keys\n//     //       case 'd':\n//     //     keys.d.pressed = true\n//     //     player.lastKey = 'd'\n//     //     break\n//     //   case 'a':\n//     //     keys.a.pressed = true\n//     //     player.lastKey = 'a'\n//     //     break\n//     //   case 'w':\n//     //     player.velocity.y = -20\n//     //     break\n//     //   case ' ':\n//     //     player.attack()\n//     //     break\n//     //     }\n//     //   }\n\n//     //   if (!enemy.dead) {\n//     //     switch (event.key) {\n//     //       // Handle enemy input keys\n//     //       case 'ArrowRight':\n//     //         keys.ArrowRight.pressed = true\n//     //         enemy.lastKey = 'ArrowRight'\n//     //         break\n//     //       case 'ArrowLeft':\n//     //         keys.ArrowLeft.pressed = true\n//     //         enemy.lastKey = 'ArrowLeft'\n//     //         break\n//     //       case 'ArrowUp':\n//     //         enemy.velocity.y = -20\n//     //         break\n//     //       case 'ArrowDown':\n//     //         enemy.attack()\n\n//     //         break\n//     //     }\n//     //   }\n//     // });\n\n//     // window.addEventListener('keyup', (event) => {\n//     //   // Handle key releases\n//     //   switch (event.key) {\n//     //     case 'd':\n//     //       keys.d.pressed = false\n//     //       break\n//     //     case 'a':\n//     //       keys.a.pressed = false\n//     //       break\n//     //   }\n\n//     //   // enemy keys\n//     //   switch (event.key) {\n//     //     case 'ArrowRight':\n//     //       keys.ArrowRight.pressed = false\n//     //       break\n//     //     case 'ArrowLeft':\n//     //       keys.ArrowLeft.pressed = false\n//     //       break\n//     //   }\n//     // });\n//     // Implement handleKeyDown and handleKeyUp event handlers\n//     handleKeyDown(event) {\n//         const { key } = event;\n//         if (!this.player.dead) {\n//           switch (key) {\n//             // Handle player input keys\n//             case 'd':\n//               this.keys.d = true;\n//               this.player.lastKey = 'd';\n//               break;\n//             case 'a':\n//               this.keys.a = true;\n//               this.player.lastKey = 'a';\n//               break;\n//             case 'w':\n//               this.player.velocity.y = -20;\n//               break;\n//             case ' ':\n//               this.player.attack();\n//               break;\n//           }\n//         }\n//     }\n\n//         if (!this.enemy.dead) {\n//             switch (key) {\n//               // Handle enemy input keys\n//               case 'ArrowRight':\n//                 this.keys.ArrowRight = true;\n//                 this.enemy.lastKey = 'ArrowRight';\n//                 break;\n//               case 'ArrowLeft':\n//                 this.keys.ArrowLeft = true;\n//                 this.enemy.lastKey = 'ArrowLeft';\n//                 break;\n//               case 'ArrowUp':\n//                 this.enemy.velocity.y = -20;\n//                 break;\n//               case 'ArrowDown':\n//                 this.enemy.attack();\n//                 break;\n//             }\n//           }\n//         }\n\n//         handleKeyUp(event) {\n//             const { key } = event;\n//             // Handle key releases\n//             switch (key) {\n//               case 'd':\n//                 this.keys.d = false;\n//                 break;\n//               case 'a':\n//                 this.keys.a = false;\n//                 break;\n//             }\n\n//             // Handle enemy keys\n//             switch (key) {\n//               case 'ArrowRight':\n//                 this.keys.ArrowRight = false;\n//                 break;\n//               case 'ArrowLeft':\n//                 this.keys.ArrowLeft = false;\n//                 break;\n//             }\n//           }\n\n//     // Implement the rest of your game functionality, timer, and other functions here\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"canvas-container\">\n//         <canvas ref={this.canvasRef} width={1024} height={576}></canvas>\n//       </div>\n//     );\n//   }\n\n// export default CanvasGame;","map":{"version":3,"names":[],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasGame.js"],"sourcesContent":["// // src/CanvasGame.js\r\n\r\n// import React, { Component, createRef } from 'react';\r\n// import './CanvasGame.css';\r\n// import { Sprite, Fighter } from './classes';\r\n\r\n// // Import GSAP\r\n// import gsap from 'gsap'; // Add this import\r\n\r\n// // Import or define your rectangularCollision and determineWinner functions\r\n// import { rectangularCollision, determineWinner } from './utils';\r\n\r\n// class CanvasGame extends Component {\r\n//     constructor(props) {\r\n//       super(props);\r\n//       this.canvasRef = createRef();\r\n//       this.player = null;\r\n//       this.enemy = null;\r\n//       this.timerId = null; // Initialize timerId\r\n  \r\n//       // Define keys object to track key presses\r\n//       this.keys = {\r\n//         a: false,\r\n//         d: false,\r\n//         ArrowRight: false,\r\n//         ArrowLeft: false,\r\n//       };\r\n\r\n    \r\n//     // Bind event handlers to this context\r\n//     this.handleKeyDown = this.handleKeyDown.bind(this);\r\n//     this.handleKeyUp = this.handleKeyUp.bind(this);\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const canvas = this.canvasRef.current;\r\n//     const c = canvas.getContext('2d');\r\n    \r\n//     canvas.width = 1024;\r\n//     canvas.height = 576;\r\n\r\n//     c.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n//     const gravity = 0.7;\r\n\r\n//     const background = new Sprite({\r\n//       position: {\r\n//         x: 0,\r\n//         y: 0\r\n//       },\r\n//       imageSrc: './img/background.png',\r\n//       context: c\r\n//     });\r\n\r\n//     const shop = new Sprite({\r\n//       position: {\r\n//         x: 600,\r\n//         y: 128\r\n//       },\r\n//       imageSrc: './img/shop.png',\r\n//       scale: 2.75,\r\n//       framesMax: 6\r\n//     });\r\n\r\n//     this.player = new Fighter({\r\n//       position: {\r\n//         x: 0,\r\n//         y: 0\r\n//       },\r\n//       velocity: {\r\n//         x: 0,\r\n//         y: 0\r\n//       },\r\n//       offset: {\r\n//         x: 0,\r\n//         y: 0\r\n//       },\r\n//       imageSrc: './img/samuraiMack/Idle.png',\r\n//       framesMax: 8,\r\n//       scale: 2.5,\r\n//       offset: {\r\n//         x: 215,\r\n//         y: 157\r\n//       },\r\n//       sprites: {\r\n//         // Define your sprite configurations here\r\n//         idle: {\r\n//             imageSrc: './img/samuraiMack/Idle.png',\r\n//             framesMax: 8\r\n//           },\r\n//           run: {\r\n//             imageSrc: './img/samuraiMack/Run.png',\r\n//             framesMax: 8\r\n//           },\r\n//           jump: {\r\n//             imageSrc: './img/samuraiMack/Jump.png',\r\n//             framesMax: 2\r\n//           },\r\n//           fall: {\r\n//             imageSrc: './img/samuraiMack/Fall.png',\r\n//             framesMax: 2\r\n//           },\r\n//           attack1: {\r\n//             imageSrc: 'C:\\Users\\Meenal Jain\\Desktop\\fighting-game\\GameFrames\\Attack1.png',\r\n//             framesMax: 6\r\n//           },\r\n//           takeHit: {\r\n//             imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\r\n//             framesMax: 4\r\n//           },\r\n//           death: {\r\n//             imageSrc: './img/samuraiMack/Death.png',\r\n//             framesMax: 6\r\n//           }\r\n//       },\r\n//       attackBox: {\r\n//         offset: {\r\n//           x: 100,\r\n//           y: 50\r\n//         },\r\n//         width: 160,\r\n//         height: 50\r\n//       }\r\n//     });\r\n\r\n//     this.enemy = new Fighter({\r\n//       position: {\r\n//         x: 400,\r\n//         y: 100\r\n//       },\r\n//       velocity: {\r\n//         x: 0,\r\n//         y: 0\r\n//       },\r\n//       color: 'blue',\r\n//       offset: {\r\n//         x: -50,\r\n//         y: 0\r\n//       },\r\n//       imageSrc: './img/kenji/Idle.png',\r\n//       framesMax: 4,\r\n//       scale: 2.5,\r\n//       offset: {\r\n//         x: 215,\r\n//         y: 167\r\n//       },\r\n//       sprites: {\r\n//         // Define your sprite configurations here\r\n//         idle: {\r\n//             imageSrc: './img/kenji/Idle.png',\r\n//             framesMax: 4\r\n//           },\r\n//           run: {\r\n//             imageSrc: './img/kenji/Run.png',\r\n//             framesMax: 8\r\n//           },\r\n//           jump: {\r\n//             imageSrc: './img/kenji/Jump.png',\r\n//             framesMax: 2\r\n//           },\r\n//           fall: {\r\n//             imageSrc: './img/kenji/Fall.png',\r\n//             framesMax: 2\r\n//           },\r\n//           attack1: {\r\n//             imageSrc: './img/kenji/Attack1.png',\r\n//             framesMax: 4\r\n//           },\r\n//           takeHit: {\r\n//             imageSrc: './img/kenji/Take hit.png',\r\n//             framesMax: 3\r\n//           },\r\n//           death: {\r\n//             imageSrc: './img/kenji/Death.png',\r\n//             framesMax: 7\r\n//           }\r\n//       },\r\n//       attackBox: {\r\n//         offset: {\r\n//           x: -170,\r\n//           y: 50\r\n//         },\r\n//         width: 170,\r\n//         height: 50\r\n//       }\r\n//     });\r\n\r\n//     console.log(this.player);\r\n\r\n//     const keys = {\r\n//       a: {\r\n//         pressed: false\r\n//       },\r\n//       d: {\r\n//         pressed: false\r\n//       },\r\n//       ArrowRight: {\r\n//         pressed: false\r\n//       },\r\n//       ArrowLeft: {\r\n//         pressed: false\r\n//       }\r\n//     };\r\n     \r\n//     window.addEventListener('keydown', this.handleKeyDown);\r\n//     window.addEventListener('keyup', this.handleKeyUp);\r\n//     // Implement the rest of your canvas game logic here\r\n\r\n//     function animate() {\r\n//       window.requestAnimationFrame(animate);\r\n//       c.fillStyle = 'black';\r\n//       c.fillRect(0, 0, canvas.width, canvas.height);\r\n//       background.update();\r\n//       shop.update();\r\n//       c.fillStyle = 'rgba(255, 255, 255, 0.15)';\r\n//       c.fillRect(0, 0, canvas.width, canvas.height);\r\n//       player.update();\r\n//       enemy.update();\r\n\r\n//       player.velocity.x = 0\r\n//       enemy.velocity.x = 0\r\n//       // Implement the rest of your animation and game logic here\r\n\r\n//         // player movement\r\n\r\n//   if (keys.a.pressed && player.lastKey === 'a') {\r\n//     player.velocity.x = -5\r\n//     player.switchSprite('run')\r\n//   } else if (keys.d.pressed && player.lastKey === 'd') {\r\n//     player.velocity.x = 5\r\n//     player.switchSprite('run')\r\n//   } else {\r\n//     player.switchSprite('idle')\r\n//   }\r\n\r\n//   // jumping\r\n//   if (player.velocity.y < 0) {\r\n//     player.switchSprite('jump')\r\n//   } else if (player.velocity.y > 0) {\r\n//     player.switchSprite('fall')\r\n//   }\r\n\r\n//   // Enemy movement\r\n//   if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\r\n//     enemy.velocity.x = -5\r\n//     enemy.switchSprite('run')\r\n//   } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n//     enemy.velocity.x = 5\r\n//     enemy.switchSprite('run')\r\n//   } else {\r\n//     enemy.switchSprite('idle')\r\n//   }\r\n\r\n//   // jumping\r\n//   if (enemy.velocity.y < 0) {\r\n//     enemy.switchSprite('jump')\r\n//   } else if (enemy.velocity.y > 0) {\r\n//     enemy.switchSprite('fall')\r\n//   }\r\n\r\n//   // detect for collision & enemy gets hit\r\n//   if (\r\n//   rectangularCollision({\r\n//     rectangle1: player,\r\n//     rectangle2: enemy\r\n//   }) &&\r\n//   player.isAttacking &&\r\n//   player.framesCurrent === 4\r\n// ) {\r\n//   enemy.takeHit()\r\n//   player.isAttacking = false\r\n\r\n//   this.gsap.to('#enemyHealth', {\r\n//     width: enemy.health + '%'\r\n//   })\r\n// }\r\n\r\n//   // if player misses\r\n//   if (player.isAttacking && player.framesCurrent === 4) {\r\n//     player.isAttacking = false\r\n//   }\r\n\r\n//   // this is where our player gets hit\r\n//   if (\r\n//     rectangularCollision({\r\n//       rectangle1: enemy,\r\n//       rectangle2: player\r\n//     }) &&\r\n//     enemy.isAttacking &&\r\n//     enemy.framesCurrent === 2\r\n//   ) {\r\n//     player.takeHit()\r\n//     enemy.isAttacking = false\r\n\r\n//     this.gsap.to('#playerHealth', {\r\n//       width: player.health + '%'\r\n//     })\r\n//   }\r\n\r\n//   // if player misses\r\n//   if (enemy.isAttacking && enemy.framesCurrent === 2) {\r\n//     enemy.isAttacking = false\r\n//   }\r\n\r\n//   // end game based on health\r\n//   if (this.enemy.health <= 0 || this.player.health <= 0) {\r\n//     // determineWinner({ player, enemy, timerId })\r\n//     determineWinner({ player: this.player, enemy: this.enemy, timerId });\r\n//   }\r\n//    // Gravity function\r\n//     if (player.position.y + player.height + player.velocity.y >= canvas.height - 96) {\r\n//         player.velocity.y = 0;\r\n//         player.position.y = 330;\r\n//       } else player.velocity.y += gravity;\r\n//     }\r\n  \r\n//     animate();\r\n\r\n//     // Add event listeners for keyboard input\r\n\r\n//     // window.addEventListener('keydown', (event) => {\r\n//     //   if (!player.dead) {\r\n//     //     switch (event.key) {\r\n//     //       // Handle player input keys\r\n//     //       case 'd':\r\n//     //     keys.d.pressed = true\r\n//     //     player.lastKey = 'd'\r\n//     //     break\r\n//     //   case 'a':\r\n//     //     keys.a.pressed = true\r\n//     //     player.lastKey = 'a'\r\n//     //     break\r\n//     //   case 'w':\r\n//     //     player.velocity.y = -20\r\n//     //     break\r\n//     //   case ' ':\r\n//     //     player.attack()\r\n//     //     break\r\n//     //     }\r\n//     //   }\r\n\r\n//     //   if (!enemy.dead) {\r\n//     //     switch (event.key) {\r\n//     //       // Handle enemy input keys\r\n//     //       case 'ArrowRight':\r\n//     //         keys.ArrowRight.pressed = true\r\n//     //         enemy.lastKey = 'ArrowRight'\r\n//     //         break\r\n//     //       case 'ArrowLeft':\r\n//     //         keys.ArrowLeft.pressed = true\r\n//     //         enemy.lastKey = 'ArrowLeft'\r\n//     //         break\r\n//     //       case 'ArrowUp':\r\n//     //         enemy.velocity.y = -20\r\n//     //         break\r\n//     //       case 'ArrowDown':\r\n//     //         enemy.attack()\r\n    \r\n//     //         break\r\n//     //     }\r\n//     //   }\r\n//     // });\r\n\r\n//     // window.addEventListener('keyup', (event) => {\r\n//     //   // Handle key releases\r\n//     //   switch (event.key) {\r\n//     //     case 'd':\r\n//     //       keys.d.pressed = false\r\n//     //       break\r\n//     //     case 'a':\r\n//     //       keys.a.pressed = false\r\n//     //       break\r\n//     //   }\r\n    \r\n//     //   // enemy keys\r\n//     //   switch (event.key) {\r\n//     //     case 'ArrowRight':\r\n//     //       keys.ArrowRight.pressed = false\r\n//     //       break\r\n//     //     case 'ArrowLeft':\r\n//     //       keys.ArrowLeft.pressed = false\r\n//     //       break\r\n//     //   }\r\n//     // });\r\n//     // Implement handleKeyDown and handleKeyUp event handlers\r\n//     handleKeyDown(event) {\r\n//         const { key } = event;\r\n//         if (!this.player.dead) {\r\n//           switch (key) {\r\n//             // Handle player input keys\r\n//             case 'd':\r\n//               this.keys.d = true;\r\n//               this.player.lastKey = 'd';\r\n//               break;\r\n//             case 'a':\r\n//               this.keys.a = true;\r\n//               this.player.lastKey = 'a';\r\n//               break;\r\n//             case 'w':\r\n//               this.player.velocity.y = -20;\r\n//               break;\r\n//             case ' ':\r\n//               this.player.attack();\r\n//               break;\r\n//           }\r\n//         }\r\n//     }\r\n\r\n//         if (!this.enemy.dead) {\r\n//             switch (key) {\r\n//               // Handle enemy input keys\r\n//               case 'ArrowRight':\r\n//                 this.keys.ArrowRight = true;\r\n//                 this.enemy.lastKey = 'ArrowRight';\r\n//                 break;\r\n//               case 'ArrowLeft':\r\n//                 this.keys.ArrowLeft = true;\r\n//                 this.enemy.lastKey = 'ArrowLeft';\r\n//                 break;\r\n//               case 'ArrowUp':\r\n//                 this.enemy.velocity.y = -20;\r\n//                 break;\r\n//               case 'ArrowDown':\r\n//                 this.enemy.attack();\r\n//                 break;\r\n//             }\r\n//           }\r\n//         }\r\n\r\n//         handleKeyUp(event) {\r\n//             const { key } = event;\r\n//             // Handle key releases\r\n//             switch (key) {\r\n//               case 'd':\r\n//                 this.keys.d = false;\r\n//                 break;\r\n//               case 'a':\r\n//                 this.keys.a = false;\r\n//                 break;\r\n//             }\r\n        \r\n//             // Handle enemy keys\r\n//             switch (key) {\r\n//               case 'ArrowRight':\r\n//                 this.keys.ArrowRight = false;\r\n//                 break;\r\n//               case 'ArrowLeft':\r\n//                 this.keys.ArrowLeft = false;\r\n//                 break;\r\n//             }\r\n//           }\r\n\r\n//     // Implement the rest of your game functionality, timer, and other functions here\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className=\"canvas-container\">\r\n//         <canvas ref={this.canvasRef} width={1024} height={576}></canvas>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n// export default CanvasGame;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}