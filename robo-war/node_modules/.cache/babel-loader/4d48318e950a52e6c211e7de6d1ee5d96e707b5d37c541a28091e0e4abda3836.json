{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useEffect, useState } from 'react';\n// import './Components.css'; // Import your component-specific CSS file\n\n// import spriteImage from './Images/background.png';\n// import kenjiIdle from './Images/kenji/Idle.png';\n// import samuraiIdle from './Images/samuraiMack/Idle.png';\n\n// const initialPlayerState = {\n//   position: {\n//     x: 0,\n//     y: 0\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   offset: {\n//     x: 0,\n//     y: 0\n//   },\n//   // imageSrc: './img/samuraiMack/Idle.png',\n//   imageSrc: samuraiIdle,\n//   framesMax: 8,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 157\n//   },\n//   sprites: {\n//     idle: {\n//       // imageSrc: './img/samuraiMack/Idle.png',\n//       imageSrc: samuraiIdle,\n//       framesMax: 8\n//     },\n//     // ... Add other sprite definitions here\n//   },\n//   attackBox: {\n//     offset: {\n//       x: 100,\n//       y: 50\n//     },\n//     width: 160,\n//     height: 50\n//   }\n// };\n// const initialEnemyState = {\n//   position: {\n//     x: 400,\n//     y: 100\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   color: 'blue',\n//   offset: {\n//     x: -50,\n//     y: 0\n//   },\n//   // imageSrc: './img/kenji/Idle.png',\n//   imageSrc: kenjiIdle,\n//   framesMax: 4,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 167\n//   },\n//   sprites: {\n//     idle: {\n//       // imageSrc: './img/kenji/Idle.png',\n//       imageSrc: kenjiIdle,\n//       framesMax: 4\n//     },\n//     // ... Add other sprite definitions here\n//   },\n//   attackBox: {\n//     offset: {\n//       x: -170,\n//       y: 50\n//     },\n//     width: 170,\n//     height: 50\n//   }\n// };\n// function CanvasDrawing() {\n//   // Create a ref for the canvas element\n//   const canvasRef = useRef(null);\n//   const [player, setPlayer] = useState(initialPlayerState);\n//   const [enemy, setEnemy] = useState(initialEnemyState);\n//   const [keys, setKeys] = useState({\n//     a: {\n//       pressed: false\n//     },\n//     d: {\n//       pressed: false\n//     },\n//     ArrowRight: {\n//       pressed: false\n//     },\n//     ArrowLeft: {\n//       pressed: false\n//     }\n//   });\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const gravity = 0.7;\n\n//     // Set canvas dimensions\n//     canvas.width = 1024;\n//     canvas.height = 576;\n\n//     // Use the spriteImage as the background\n//     const backgroundImage = new Image();\n//     backgroundImage.src = spriteImage;\n\n//     // Once the image is loaded, draw it on the canvas\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n//     // Other drawing code here\n//     // ctx.fillStyle = 'blue';\n//     // ctx.fillRect(0, 0, canvas.width, canvas.height);\n// // Draw the sprite image\n// const playerImage = new Image();\n// // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\n// playerImage.src = kenjiIdle; \n// playerImage.onload = () => {\n//   // Draw the player image at the desired position (player.position.x, player.position.y)\n//   ctx.drawImage(playerImage, player.position.x, player.position.y);\n// };\n// };\n//     const handleKeyDown = (event) => {\n//       // Update the keys state based on the pressed key\n//       setKeys((prevKeys) => ({\n//         ...prevKeys,\n//         [event.key]: {\n//           pressed: true\n//         }\n//       }));\n//     };\n\n//     const handleKeyUp = (event) => {\n//       // Update the keys state when a key is released\n//       setKeys((prevKeys) => ({\n//         ...prevKeys,\n//         [event.key]: {\n//           pressed: false\n//         }\n//       }));\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n//     window.addEventListener('keyup', handleKeyUp);\n\n//     // Cleanup (optional)\n//     return () => {\n//       // You can perform cleanup here if needed\n//     };\n//   }, []); // Empty dependency array to run only once\n\n//   return (\n//     <div>\n//       <canvas ref={canvasRef}></canvas>\n//     </div>\n//   );\n// }\n\n// export default CanvasDrawing;\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport './Components.css'; // Import your component-specific CSS file\n\nimport spriteImage from './Images/background.png';\nimport kenjiIdle from './Images/kenji/Idle.png';\nimport samuraiIdle from './Images/samuraiMack/Idle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPlayerState = {\n  position: {\n    x: 0,\n    y: 0\n  },\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  scale: 2.5\n};\nfunction CanvasDrawing() {\n  _s();\n  const canvasRef = useRef(null);\n  const [player, setPlayer] = useState(initialPlayerState);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const gravity = 0.7;\n\n    // Set canvas dimensions\n    canvas.width = 1024;\n    canvas.height = 576;\n\n    // Use the spriteImage as the background\n    const backgroundImage = new Image();\n    backgroundImage.src = spriteImage;\n\n    // Load the player images\n    const kenjiImage = new Image();\n    kenjiImage.src = kenjiIdle;\n    const samuraiImage = new Image();\n    samuraiImage.src = samuraiIdle;\n\n    // Once the images are loaded, draw them on the canvas\n    const drawCharacters = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas\n\n      // Draw the background image\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n      // Draw the Kenji character\n      ctx.drawImage(kenjiImage, player.position.x,\n      // Adjust the position as needed\n      player.position.y, kenjiImage.width * player.scale, kenjiImage.height * player.scale);\n\n      // Draw the Samurai character\n      ctx.drawImage(samuraiImage, player.position.x + 200,\n      // Adjust the position as needed\n      player.position.y, samuraiImage.width * player.scale, samuraiImage.height * player.scale);\n\n      // Request the next animation frame\n      // requestAnimationFrame(drawCharacters);\n    };\n\n    // Start the animation loop\n    drawCharacters();\n\n    // Cleanup (optional)\n    return () => {\n      // Remove event listeners or do other cleanup if needed\n    };\n  }, []); // Empty dependency array to run only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasDrawing, \"ExqD80vLUJ9TkFUwN3Z8ZEjFjbY=\");\n_c = CanvasDrawing;\nexport default CanvasDrawing;\nvar _c;\n$RefreshReg$(_c, \"CanvasDrawing\");","map":{"version":3,"names":["React","useRef","useEffect","useState","spriteImage","kenjiIdle","samuraiIdle","jsxDEV","_jsxDEV","initialPlayerState","position","x","y","velocity","scale","CanvasDrawing","_s","canvasRef","player","setPlayer","canvas","current","ctx","getContext","gravity","width","height","backgroundImage","Image","src","kenjiImage","samuraiImage","drawCharacters","clearRect","drawImage","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["// import React, { useRef, useEffect, useState } from 'react';\r\n// import './Components.css'; // Import your component-specific CSS file\r\n\r\n// import spriteImage from './Images/background.png';\r\n// import kenjiIdle from './Images/kenji/Idle.png';\r\n// import samuraiIdle from './Images/samuraiMack/Idle.png';\r\n\r\n// const initialPlayerState = {\r\n//   position: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   offset: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   // imageSrc: './img/samuraiMack/Idle.png',\r\n//   imageSrc: samuraiIdle,\r\n//   framesMax: 8,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 157\r\n//   },\r\n//   sprites: {\r\n//     idle: {\r\n//       // imageSrc: './img/samuraiMack/Idle.png',\r\n//       imageSrc: samuraiIdle,\r\n//       framesMax: 8\r\n//     },\r\n//     // ... Add other sprite definitions here\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: 100,\r\n//       y: 50\r\n//     },\r\n//     width: 160,\r\n//     height: 50\r\n//   }\r\n// };\r\n// const initialEnemyState = {\r\n//   position: {\r\n//     x: 400,\r\n//     y: 100\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   color: 'blue',\r\n//   offset: {\r\n//     x: -50,\r\n//     y: 0\r\n//   },\r\n//   // imageSrc: './img/kenji/Idle.png',\r\n//   imageSrc: kenjiIdle,\r\n//   framesMax: 4,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 167\r\n//   },\r\n//   sprites: {\r\n//     idle: {\r\n//       // imageSrc: './img/kenji/Idle.png',\r\n//       imageSrc: kenjiIdle,\r\n//       framesMax: 4\r\n//     },\r\n//     // ... Add other sprite definitions here\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: -170,\r\n//       y: 50\r\n//     },\r\n//     width: 170,\r\n//     height: 50\r\n//   }\r\n// };\r\n// function CanvasDrawing() {\r\n//   // Create a ref for the canvas element\r\n//   const canvasRef = useRef(null);\r\n//   const [player, setPlayer] = useState(initialPlayerState);\r\n//   const [enemy, setEnemy] = useState(initialEnemyState);\r\n//   const [keys, setKeys] = useState({\r\n//     a: {\r\n//       pressed: false\r\n//     },\r\n//     d: {\r\n//       pressed: false\r\n//     },\r\n//     ArrowRight: {\r\n//       pressed: false\r\n//     },\r\n//     ArrowLeft: {\r\n//       pressed: false\r\n//     }\r\n//   });\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext('2d');\r\n//     const gravity = 0.7;\r\n\r\n//     // Set canvas dimensions\r\n//     canvas.width = 1024;\r\n//     canvas.height = 576;\r\n\r\n//     // Use the spriteImage as the background\r\n//     const backgroundImage = new Image();\r\n//     backgroundImage.src = spriteImage;\r\n    \r\n//     // Once the image is loaded, draw it on the canvas\r\n//     backgroundImage.onload = () => {\r\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n    \r\n\r\n//     // Other drawing code here\r\n//     // ctx.fillStyle = 'blue';\r\n//     // ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// // Draw the sprite image\r\n// const playerImage = new Image();\r\n// // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\r\n// playerImage.src = kenjiIdle; \r\n// playerImage.onload = () => {\r\n//   // Draw the player image at the desired position (player.position.x, player.position.y)\r\n//   ctx.drawImage(playerImage, player.position.x, player.position.y);\r\n// };\r\n// };\r\n//     const handleKeyDown = (event) => {\r\n//       // Update the keys state based on the pressed key\r\n//       setKeys((prevKeys) => ({\r\n//         ...prevKeys,\r\n//         [event.key]: {\r\n//           pressed: true\r\n//         }\r\n//       }));\r\n//     };\r\n\r\n//     const handleKeyUp = (event) => {\r\n//       // Update the keys state when a key is released\r\n//       setKeys((prevKeys) => ({\r\n//         ...prevKeys,\r\n//         [event.key]: {\r\n//           pressed: false\r\n//         }\r\n//       }));\r\n//     };\r\n\r\n//     window.addEventListener('keydown', handleKeyDown);\r\n//     window.addEventListener('keyup', handleKeyUp);\r\n    \r\n//     // Cleanup (optional)\r\n//     return () => {\r\n//       // You can perform cleanup here if needed\r\n//     };\r\n//   }, []); // Empty dependency array to run only once\r\n\r\n//   return (\r\n//     <div>\r\n//       <canvas ref={canvasRef}></canvas>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CanvasDrawing;\r\n\r\n\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './Components.css'; // Import your component-specific CSS file\r\n\r\nimport spriteImage from './Images/background.png';\r\nimport kenjiIdle from './Images/kenji/Idle.png';\r\nimport samuraiIdle from './Images/samuraiMack/Idle.png';\r\n\r\nconst initialPlayerState = {\r\n  position: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  velocity: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  scale: 2.5,\r\n};\r\n\r\nfunction CanvasDrawing() {\r\n  const canvasRef = useRef(null);\r\n  const [player, setPlayer] = useState(initialPlayerState);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const gravity = 0.7;\r\n\r\n    // Set canvas dimensions\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    // Use the spriteImage as the background\r\n    const backgroundImage = new Image();\r\n    backgroundImage.src = spriteImage;\r\n\r\n    // Load the player images\r\n    const kenjiImage = new Image();\r\n    kenjiImage.src = kenjiIdle;\r\n\r\n    const samuraiImage = new Image();\r\n    samuraiImage.src = samuraiIdle;\r\n    \r\n    // Once the images are loaded, draw them on the canvas\r\n    const drawCharacters = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas\r\n\r\n      // Draw the background image\r\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw the Kenji character\r\n      ctx.drawImage(\r\n        kenjiImage,\r\n        player.position.x, // Adjust the position as needed\r\n        player.position.y,\r\n        kenjiImage.width * player.scale,\r\n        kenjiImage.height * player.scale\r\n      );\r\n\r\n      // Draw the Samurai character\r\n      ctx.drawImage(\r\n        samuraiImage,\r\n        player.position.x + 200, // Adjust the position as needed\r\n        player.position.y,\r\n        samuraiImage.width * player.scale,\r\n        samuraiImage.height * player.scale\r\n      );\r\n\r\n      // Request the next animation frame\r\n      // requestAnimationFrame(drawCharacters);\r\n    };\r\n\r\n    // Start the animation loop\r\n    drawCharacters();\r\n    \r\n    \r\n    // Cleanup (optional)\r\n    return () => {\r\n      // Remove event listeners or do other cleanup if needed\r\n    };\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanvasDrawing;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,kBAAkB,CAAC,CAAC;;AAE3B,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,WAAW,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,kBAAkB,GAAG;EACzBC,QAAQ,EAAE;IACRC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;EACL,CAAC;EACDC,QAAQ,EAAE;IACRF,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;EACL,CAAC;EACDE,KAAK,EAAE;AACT,CAAC;AAED,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,SAAS,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAACM,kBAAkB,CAAC;EAExDP,SAAS,CAAC,MAAM;IACd,MAAMkB,MAAM,GAAGH,SAAS,CAACI,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMC,OAAO,GAAG,GAAG;;IAEnB;IACAJ,MAAM,CAACK,KAAK,GAAG,IAAI;IACnBL,MAAM,CAACM,MAAM,GAAG,GAAG;;IAEnB;IACA,MAAMC,eAAe,GAAG,IAAIC,KAAK,CAAC,CAAC;IACnCD,eAAe,CAACE,GAAG,GAAGzB,WAAW;;IAEjC;IACA,MAAM0B,UAAU,GAAG,IAAIF,KAAK,CAAC,CAAC;IAC9BE,UAAU,CAACD,GAAG,GAAGxB,SAAS;IAE1B,MAAM0B,YAAY,GAAG,IAAIH,KAAK,CAAC,CAAC;IAChCG,YAAY,CAACF,GAAG,GAAGvB,WAAW;;IAE9B;IACA,MAAM0B,cAAc,GAAGA,CAAA,KAAM;MAC3BV,GAAG,CAACW,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEb,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC,CAAC,CAAC;;MAElD;MACAJ,GAAG,CAACY,SAAS,CAACP,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEP,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;;MAEjE;MACAJ,GAAG,CAACY,SAAS,CACXJ,UAAU,EACVZ,MAAM,CAACR,QAAQ,CAACC,CAAC;MAAE;MACnBO,MAAM,CAACR,QAAQ,CAACE,CAAC,EACjBkB,UAAU,CAACL,KAAK,GAAGP,MAAM,CAACJ,KAAK,EAC/BgB,UAAU,CAACJ,MAAM,GAAGR,MAAM,CAACJ,KAC7B,CAAC;;MAED;MACAQ,GAAG,CAACY,SAAS,CACXH,YAAY,EACZb,MAAM,CAACR,QAAQ,CAACC,CAAC,GAAG,GAAG;MAAE;MACzBO,MAAM,CAACR,QAAQ,CAACE,CAAC,EACjBmB,YAAY,CAACN,KAAK,GAAGP,MAAM,CAACJ,KAAK,EACjCiB,YAAY,CAACL,MAAM,GAAGR,MAAM,CAACJ,KAC/B,CAAC;;MAED;MACA;IACF,CAAC;;IAED;IACAkB,cAAc,CAAC,CAAC;;IAGhB;IACA,OAAO,MAAM;MACX;IAAA,CACD;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACExB,OAAA;IAAA2B,QAAA,eACE3B,OAAA;MAAQ4B,GAAG,EAAEnB;IAAU;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACxB,EAAA,CApEQD,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAsEtB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}