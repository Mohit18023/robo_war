{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasGame.js\";\n// src/CanvasGame.js\n\nimport React, { Component, createRef } from 'react'; // Import createRef\nimport './CanvasGame.css';\nimport { Sprite, Fighter } from './classes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CanvasGame extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/createRef(); // Create a ref for the canvas element\n    // Define player and enemy as class properties\n    this.player = null;\n    this.enemy = null;\n  }\n  componentDidMount() {\n    // Your canvas game code from index.js will go here\n    // const canvas = this.refs.canvas;\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 576;\n    c.fillRect(0, 0, canvas.width, canvas.height);\n    const gravity = 0.7;\n    const background = new Sprite({\n      position: {\n        x: 0,\n        y: 0\n      },\n      imageSrc: './img/background.png',\n      context: c\n    });\n    const shop = new Sprite({\n      position: {\n        x: 600,\n        y: 128\n      },\n      imageSrc: './img/shop.png',\n      scale: 2.75,\n      framesMax: 6\n    });\n    this.player = new Player({\n      position: {\n        x: 0,\n        y: 0\n      },\n      velocity: {\n        x: 0,\n        y: 0\n      },\n      offset: {\n        x: 0,\n        y: 0\n      },\n      imageSrc: './img/samuraiMack/Idle.png',\n      framesMax: 8,\n      scale: 2.5,\n      offset: {\n        x: 215,\n        y: 157\n      },\n      sprites: {\n        // Define your sprite configurations here\n        idle: {\n          imageSrc: './img/samuraiMack/Idle.png',\n          framesMax: 8\n        },\n        run: {\n          imageSrc: './img/samuraiMack/Run.png',\n          framesMax: 8\n        },\n        jump: {\n          imageSrc: './img/samuraiMack/Jump.png',\n          framesMax: 2\n        },\n        fall: {\n          imageSrc: './img/samuraiMack/Fall.png',\n          framesMax: 2\n        },\n        attack1: {\n          imageSrc: 'C:\\Users\\Meenal Jain\\Desktop\\fighting-game\\GameFrames\\Attack1.png',\n          framesMax: 6\n        },\n        takeHit: {\n          imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\n          framesMax: 4\n        },\n        death: {\n          imageSrc: './img/samuraiMack/Death.png',\n          framesMax: 6\n        }\n      },\n      attackBox: {\n        offset: {\n          x: 100,\n          y: 50\n        },\n        width: 160,\n        height: 50\n      }\n    });\n    this.enemy = new Fighter({\n      position: {\n        x: 400,\n        y: 100\n      },\n      velocity: {\n        x: 0,\n        y: 0\n      },\n      color: 'blue',\n      offset: {\n        x: -50,\n        y: 0\n      },\n      imageSrc: './img/kenji/Idle.png',\n      framesMax: 4,\n      scale: 2.5,\n      offset: {\n        x: 215,\n        y: 167\n      },\n      sprites: {\n        // Define your sprite configurations here\n        idle: {\n          imageSrc: './img/kenji/Idle.png',\n          framesMax: 4\n        },\n        run: {\n          imageSrc: './img/kenji/Run.png',\n          framesMax: 8\n        },\n        jump: {\n          imageSrc: './img/kenji/Jump.png',\n          framesMax: 2\n        },\n        fall: {\n          imageSrc: './img/kenji/Fall.png',\n          framesMax: 2\n        },\n        attack1: {\n          imageSrc: './img/kenji/Attack1.png',\n          framesMax: 4\n        },\n        takeHit: {\n          imageSrc: './img/kenji/Take hit.png',\n          framesMax: 3\n        },\n        death: {\n          imageSrc: './img/kenji/Death.png',\n          framesMax: 7\n        }\n      },\n      attackBox: {\n        offset: {\n          x: -170,\n          y: 50\n        },\n        width: 170,\n        height: 50\n      }\n    });\n    console.log(this.player);\n    const keys = {\n      a: {\n        pressed: false\n      },\n      d: {\n        pressed: false\n      },\n      ArrowRight: {\n        pressed: false\n      },\n      ArrowLeft: {\n        pressed: false\n      }\n    };\n\n    // Implement the rest of your canvas game logic here\n\n    function animate() {\n      window.requestAnimationFrame(animate);\n      c.fillStyle = 'black';\n      c.fillRect(0, 0, canvas.width, canvas.height);\n      background.update();\n      shop.update();\n      c.fillStyle = 'rgba(255, 255, 255, 0.15)';\n      c.fillRect(0, 0, canvas.width, canvas.height);\n      player.update();\n      enemy.update();\n      player.velocity.x = 0;\n      enemy.velocity.x = 0;\n      // Implement the rest of your animation and game logic here\n\n      // player movement\n\n      if (keys.a.pressed && player.lastKey === 'a') {\n        player.velocity.x = -5;\n        player.switchSprite('run');\n      } else if (keys.d.pressed && player.lastKey === 'd') {\n        player.velocity.x = 5;\n        player.switchSprite('run');\n      } else {\n        player.switchSprite('idle');\n      }\n\n      // jumping\n      if (player.velocity.y < 0) {\n        player.switchSprite('jump');\n      } else if (player.velocity.y > 0) {\n        player.switchSprite('fall');\n      }\n\n      // Enemy movement\n      if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n        enemy.velocity.x = -5;\n        enemy.switchSprite('run');\n      } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n        enemy.velocity.x = 5;\n        enemy.switchSprite('run');\n      } else {\n        enemy.switchSprite('idle');\n      }\n\n      // jumping\n      if (enemy.velocity.y < 0) {\n        enemy.switchSprite('jump');\n      } else if (enemy.velocity.y > 0) {\n        enemy.switchSprite('fall');\n      }\n\n      // detect for collision & enemy gets hit\n      if (rectangularCollision({\n        rectangle1: player,\n        rectangle2: enemy\n      }) && player.isAttacking && player.framesCurrent === 4) {\n        enemy.takeHit();\n        player.isAttacking = false;\n        gsap.to('#enemyHealth', {\n          width: enemy.health + '%'\n        });\n      }\n\n      // if player misses\n      if (player.isAttacking && player.framesCurrent === 4) {\n        player.isAttacking = false;\n      }\n\n      // this is where our player gets hit\n      if (rectangularCollision({\n        rectangle1: enemy,\n        rectangle2: player\n      }) && enemy.isAttacking && enemy.framesCurrent === 2) {\n        player.takeHit();\n        enemy.isAttacking = false;\n        gsap.to('#playerHealth', {\n          width: player.health + '%'\n        });\n      }\n\n      // if player misses\n      if (enemy.isAttacking && enemy.framesCurrent === 2) {\n        enemy.isAttacking = false;\n      }\n\n      // end game based on health\n      if (this.enemy.health <= 0 || this.player.health <= 0) {\n        // determineWinner({ player, enemy, timerId })\n        determineWinner({\n          player: this.player,\n          enemy: this.enemy,\n          timerId\n        });\n      }\n      // Gravity function\n      if (player.position.y + player.height + player.velocity.y >= canvas.height - 96) {\n        player.velocity.y = 0;\n        player.position.y = 330;\n      } else player.velocity.y += gravity;\n    }\n    animate();\n\n    // Add event listeners for keyboard input\n\n    window.addEventListener('keydown', event => {\n      if (!player.dead) {\n        switch (event.key) {\n          // Handle player input keys\n          case 'd':\n            keys.d.pressed = true;\n            player.lastKey = 'd';\n            break;\n          case 'a':\n            keys.a.pressed = true;\n            player.lastKey = 'a';\n            break;\n          case 'w':\n            player.velocity.y = -20;\n            break;\n          case ' ':\n            player.attack();\n            break;\n        }\n      }\n      if (!enemy.dead) {\n        switch (event.key) {\n          // Handle enemy input keys\n          case 'ArrowRight':\n            keys.ArrowRight.pressed = true;\n            enemy.lastKey = 'ArrowRight';\n            break;\n          case 'ArrowLeft':\n            keys.ArrowLeft.pressed = true;\n            enemy.lastKey = 'ArrowLeft';\n            break;\n          case 'ArrowUp':\n            enemy.velocity.y = -20;\n            break;\n          case 'ArrowDown':\n            enemy.attack();\n            break;\n        }\n      }\n    });\n    window.addEventListener('keyup', event => {\n      // Handle key releases\n      switch (event.key) {\n        case 'd':\n          keys.d.pressed = false;\n          break;\n        case 'a':\n          keys.a.pressed = false;\n          break;\n      }\n\n      // enemy keys\n      switch (event.key) {\n        case 'ArrowRight':\n          keys.ArrowRight.pressed = false;\n          break;\n        case 'ArrowLeft':\n          keys.ArrowLeft.pressed = false;\n          break;\n      }\n    });\n\n    // Implement the rest of your game functionality, timer, and other functions here\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 1024,\n        height: 576\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default CanvasGame;","map":{"version":3,"names":["React","Component","createRef","Sprite","Fighter","jsxDEV","_jsxDEV","CanvasGame","constructor","props","canvasRef","player","enemy","componentDidMount","canvas","current","c","getContext","width","height","fillRect","gravity","background","position","x","y","imageSrc","context","shop","scale","framesMax","Player","velocity","offset","sprites","idle","run","jump","fall","attack1","takeHit","death","attackBox","color","console","log","keys","a","pressed","d","ArrowRight","ArrowLeft","animate","window","requestAnimationFrame","fillStyle","update","lastKey","switchSprite","rectangularCollision","rectangle1","rectangle2","isAttacking","framesCurrent","gsap","to","health","determineWinner","timerId","addEventListener","event","dead","key","attack","render","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasGame.js"],"sourcesContent":["// src/CanvasGame.js\r\n\r\nimport React, { Component, createRef } from 'react'; // Import createRef\r\nimport './CanvasGame.css';\r\nimport { Sprite, Fighter } from './classes';\r\n\r\nclass CanvasGame extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.canvasRef = createRef(); // Create a ref for the canvas element\r\n        // Define player and enemy as class properties\r\n        this.player = null;\r\n        this.enemy = null;\r\n      }\r\n\r\n  componentDidMount() {\r\n    // Your canvas game code from index.js will go here\r\n    // const canvas = this.refs.canvas;\r\n    const canvas = this.canvasRef.current;\r\n    const c = canvas.getContext('2d');\r\n    \r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    c.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const gravity = 0.7;\r\n\r\n    const background = new Sprite({\r\n      position: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      imageSrc: './img/background.png',\r\n      context: c\r\n    });\r\n\r\n    const shop = new Sprite({\r\n      position: {\r\n        x: 600,\r\n        y: 128\r\n      },\r\n      imageSrc: './img/shop.png',\r\n      scale: 2.75,\r\n      framesMax: 6\r\n    });\r\n\r\n    this.player = new Player({\r\n      position: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      velocity: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      offset: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      imageSrc: './img/samuraiMack/Idle.png',\r\n      framesMax: 8,\r\n      scale: 2.5,\r\n      offset: {\r\n        x: 215,\r\n        y: 157\r\n      },\r\n      sprites: {\r\n        // Define your sprite configurations here\r\n        idle: {\r\n            imageSrc: './img/samuraiMack/Idle.png',\r\n            framesMax: 8\r\n          },\r\n          run: {\r\n            imageSrc: './img/samuraiMack/Run.png',\r\n            framesMax: 8\r\n          },\r\n          jump: {\r\n            imageSrc: './img/samuraiMack/Jump.png',\r\n            framesMax: 2\r\n          },\r\n          fall: {\r\n            imageSrc: './img/samuraiMack/Fall.png',\r\n            framesMax: 2\r\n          },\r\n          attack1: {\r\n            imageSrc: 'C:\\Users\\Meenal Jain\\Desktop\\fighting-game\\GameFrames\\Attack1.png',\r\n            framesMax: 6\r\n          },\r\n          takeHit: {\r\n            imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\r\n            framesMax: 4\r\n          },\r\n          death: {\r\n            imageSrc: './img/samuraiMack/Death.png',\r\n            framesMax: 6\r\n          }\r\n      },\r\n      attackBox: {\r\n        offset: {\r\n          x: 100,\r\n          y: 50\r\n        },\r\n        width: 160,\r\n        height: 50\r\n      }\r\n    });\r\n\r\n    this.enemy = new Fighter({\r\n      position: {\r\n        x: 400,\r\n        y: 100\r\n      },\r\n      velocity: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      color: 'blue',\r\n      offset: {\r\n        x: -50,\r\n        y: 0\r\n      },\r\n      imageSrc: './img/kenji/Idle.png',\r\n      framesMax: 4,\r\n      scale: 2.5,\r\n      offset: {\r\n        x: 215,\r\n        y: 167\r\n      },\r\n      sprites: {\r\n        // Define your sprite configurations here\r\n        idle: {\r\n            imageSrc: './img/kenji/Idle.png',\r\n            framesMax: 4\r\n          },\r\n          run: {\r\n            imageSrc: './img/kenji/Run.png',\r\n            framesMax: 8\r\n          },\r\n          jump: {\r\n            imageSrc: './img/kenji/Jump.png',\r\n            framesMax: 2\r\n          },\r\n          fall: {\r\n            imageSrc: './img/kenji/Fall.png',\r\n            framesMax: 2\r\n          },\r\n          attack1: {\r\n            imageSrc: './img/kenji/Attack1.png',\r\n            framesMax: 4\r\n          },\r\n          takeHit: {\r\n            imageSrc: './img/kenji/Take hit.png',\r\n            framesMax: 3\r\n          },\r\n          death: {\r\n            imageSrc: './img/kenji/Death.png',\r\n            framesMax: 7\r\n          }\r\n      },\r\n      attackBox: {\r\n        offset: {\r\n          x: -170,\r\n          y: 50\r\n        },\r\n        width: 170,\r\n        height: 50\r\n      }\r\n    });\r\n\r\n    console.log(this.player);\r\n\r\n    const keys = {\r\n      a: {\r\n        pressed: false\r\n      },\r\n      d: {\r\n        pressed: false\r\n      },\r\n      ArrowRight: {\r\n        pressed: false\r\n      },\r\n      ArrowLeft: {\r\n        pressed: false\r\n      }\r\n    };\r\n     \r\n    // Implement the rest of your canvas game logic here\r\n\r\n    function animate() {\r\n      window.requestAnimationFrame(animate);\r\n      c.fillStyle = 'black';\r\n      c.fillRect(0, 0, canvas.width, canvas.height);\r\n      background.update();\r\n      shop.update();\r\n      c.fillStyle = 'rgba(255, 255, 255, 0.15)';\r\n      c.fillRect(0, 0, canvas.width, canvas.height);\r\n      player.update();\r\n      enemy.update();\r\n\r\n      player.velocity.x = 0\r\n      enemy.velocity.x = 0\r\n      // Implement the rest of your animation and game logic here\r\n\r\n        // player movement\r\n\r\n  if (keys.a.pressed && player.lastKey === 'a') {\r\n    player.velocity.x = -5\r\n    player.switchSprite('run')\r\n  } else if (keys.d.pressed && player.lastKey === 'd') {\r\n    player.velocity.x = 5\r\n    player.switchSprite('run')\r\n  } else {\r\n    player.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (player.velocity.y < 0) {\r\n    player.switchSprite('jump')\r\n  } else if (player.velocity.y > 0) {\r\n    player.switchSprite('fall')\r\n  }\r\n\r\n  // Enemy movement\r\n  if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\r\n    enemy.velocity.x = -5\r\n    enemy.switchSprite('run')\r\n  } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n    enemy.velocity.x = 5\r\n    enemy.switchSprite('run')\r\n  } else {\r\n    enemy.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (enemy.velocity.y < 0) {\r\n    enemy.switchSprite('jump')\r\n  } else if (enemy.velocity.y > 0) {\r\n    enemy.switchSprite('fall')\r\n  }\r\n\r\n  // detect for collision & enemy gets hit\r\n  if (\r\n  rectangularCollision({\r\n    rectangle1: player,\r\n    rectangle2: enemy\r\n  }) &&\r\n  player.isAttacking &&\r\n  player.framesCurrent === 4\r\n) {\r\n  enemy.takeHit()\r\n  player.isAttacking = false\r\n\r\n  gsap.to('#enemyHealth', {\r\n    width: enemy.health + '%'\r\n  })\r\n}\r\n\r\n  // if player misses\r\n  if (player.isAttacking && player.framesCurrent === 4) {\r\n    player.isAttacking = false\r\n  }\r\n\r\n  // this is where our player gets hit\r\n  if (\r\n    rectangularCollision({\r\n      rectangle1: enemy,\r\n      rectangle2: player\r\n    }) &&\r\n    enemy.isAttacking &&\r\n    enemy.framesCurrent === 2\r\n  ) {\r\n    player.takeHit()\r\n    enemy.isAttacking = false\r\n\r\n    gsap.to('#playerHealth', {\r\n      width: player.health + '%'\r\n    })\r\n  }\r\n\r\n  // if player misses\r\n  if (enemy.isAttacking && enemy.framesCurrent === 2) {\r\n    enemy.isAttacking = false\r\n  }\r\n\r\n  // end game based on health\r\n  if (this.enemy.health <= 0 || this.player.health <= 0) {\r\n    // determineWinner({ player, enemy, timerId })\r\n    determineWinner({ player: this.player, enemy: this.enemy, timerId });\r\n  }\r\n   // Gravity function\r\n    if (player.position.y + player.height + player.velocity.y >= canvas.height - 96) {\r\n        player.velocity.y = 0;\r\n        player.position.y = 330;\r\n      } else player.velocity.y += gravity;\r\n    }\r\n  \r\n    animate();\r\n\r\n    // Add event listeners for keyboard input\r\n\r\n    window.addEventListener('keydown', (event) => {\r\n      if (!player.dead) {\r\n        switch (event.key) {\r\n          // Handle player input keys\r\n          case 'd':\r\n        keys.d.pressed = true\r\n        player.lastKey = 'd'\r\n        break\r\n      case 'a':\r\n        keys.a.pressed = true\r\n        player.lastKey = 'a'\r\n        break\r\n      case 'w':\r\n        player.velocity.y = -20\r\n        break\r\n      case ' ':\r\n        player.attack()\r\n        break\r\n        }\r\n      }\r\n\r\n      if (!enemy.dead) {\r\n        switch (event.key) {\r\n          // Handle enemy input keys\r\n          case 'ArrowRight':\r\n            keys.ArrowRight.pressed = true\r\n            enemy.lastKey = 'ArrowRight'\r\n            break\r\n          case 'ArrowLeft':\r\n            keys.ArrowLeft.pressed = true\r\n            enemy.lastKey = 'ArrowLeft'\r\n            break\r\n          case 'ArrowUp':\r\n            enemy.velocity.y = -20\r\n            break\r\n          case 'ArrowDown':\r\n            enemy.attack()\r\n    \r\n            break\r\n        }\r\n      }\r\n    });\r\n\r\n    window.addEventListener('keyup', (event) => {\r\n      // Handle key releases\r\n      switch (event.key) {\r\n        case 'd':\r\n          keys.d.pressed = false\r\n          break\r\n        case 'a':\r\n          keys.a.pressed = false\r\n          break\r\n      }\r\n    \r\n      // enemy keys\r\n      switch (event.key) {\r\n        case 'ArrowRight':\r\n          keys.ArrowRight.pressed = false\r\n          break\r\n        case 'ArrowLeft':\r\n          keys.ArrowLeft.pressed = false\r\n          break\r\n      }\r\n    });\r\n\r\n    // Implement the rest of your game functionality, timer, and other functions here\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"canvas-container\">\r\n        <canvas ref={canvasRef} width={1024} height={576}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}