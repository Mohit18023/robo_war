{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './Components.css';\nimport spriteImage from './Images/background.png';\nimport { AnimationFrame } from './AnimationFrame.js';\nimport kenjiImage from './Idle3 .png'; // Corrected image file name\nimport samuraiImage from './fighter1.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gravity = 0.7;\nconst initialPlayerState = {\n  player: {\n    position: {\n      x: 100,\n      y: 400\n    },\n    velocity: {\n      x: 10,\n      y: 0\n    },\n    scale: 2.5,\n    health: 100,\n    isAttacking: false,\n    attackFrames: [] // Add attack animation frames for the player\n  },\n\n  enemy: {\n    position: {\n      x: 100,\n      y: 400\n    },\n    velocity: {\n      x: 10,\n      y: 0\n    },\n    scale: 2.5,\n    health: 100,\n    isAttacking: false,\n    attackFrames: [] // Add attack animation frames for the enemy\n  }\n};\n\nconst kenjiFrameWidth = 284;\nconst kenjiFrameHeight = 600;\nconst kenjiTotalFrames = 1;\nconst kenjiAnimationSpeed = 10;\nconst samuraiFrameWidth = 284;\nconst samuraiFrameHeight = 600;\nconst samuraiTotalFrames = 1;\nconst samuraiAnimationSpeed = 10;\nfunction CanvasDrawing() {\n  _s();\n  const canvasRef = useRef(null);\n  const [players, setPlayers] = useState(initialPlayerState);\n  const [currentFrame, setCurrentFrame] = useState(0);\n  const attack = (attacker, target) => {\n    if (!attacker.isAttacking && !target.dead) {\n      attacker.isAttacking = true;\n      setAttackAnimationFrames(attacker.attackFrames);\n\n      // Example: Deal damage to the target\n      target.health -= 10;\n\n      // Reset the attacking state after the attack animation is complete\n      setTimeout(() => {\n        attacker.isAttacking = false;\n        setAttackAnimationFrames([]); // Clear attack animation frames\n      }, attacker.attackFrames.length * attackAnimationSpeed);\n    }\n  };\n  const drawAttackBox = context => {\n    const {\n      player,\n      attackBox\n    } = players;\n    context.fillStyle = 'red'; // Set the attack box color\n    context.fillRect(player.position.x + attackBox.offset.x, player.position.y + attackBox.offset.y, attackBox.width, attackBox.height);\n  };\n  const [attackAnimationFrames, setAttackAnimationFrames] = useState([]);\n  const attackAnimationSpeed = 5; // Adjust the speed as needed\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 576;\n    const backgroundImage = new Image();\n    backgroundImage.src = spriteImage;\n    const image = new Image();\n    image.src = kenjiImage;\n    image.onload = function () {\n      ctx.drawImage(image, 50, 50);\n    };\n    const fighter = new Image();\n    fighter.src = samuraiImage;\n    fighter.onload = function () {\n      ctx.drawImage(fighter, 50, 50);\n    };\n    const kenjiAnimationFrame = new AnimationFrame({\n      image: image,\n      frameWidth: kenjiFrameWidth,\n      frameHeight: kenjiFrameHeight,\n      totalFrames: kenjiTotalFrames,\n      animationSpeed: kenjiAnimationSpeed\n    });\n    const samuraiAnimationFrame = new AnimationFrame({\n      image: fighter,\n      frameWidth: samuraiFrameWidth,\n      frameHeight: samuraiFrameHeight,\n      totalFrames: samuraiTotalFrames,\n      animationSpeed: samuraiAnimationSpeed\n    });\n    const keys = {\n      a: false,\n      d: false,\n      w: false,\n      space: false,\n      ArrowLeft: false,\n      ArrowRight: false,\n      ArrowUp: false,\n      ArrowDown: false\n    };\n    const handleKeyDown = event => {\n      if (!players.player.dead) {\n        switch (event.key) {\n          case 'a':\n            keys.a = true;\n            break;\n          case 'd':\n            keys.d = true;\n            break;\n          case 'w':\n            players.player.velocity.y = -20;\n            break;\n          case ' ':\n            // players.player.attack();\n            attack(players.player, players.enemy);\n            break;\n        }\n      }\n      if (!players.enemy.dead) {\n        switch (event.key) {\n          case 'ArrowLeft':\n            keys.ArrowLeft = true;\n            break;\n          case 'ArrowRight':\n            keys.ArrowRight = true;\n            break;\n          case 'ArrowUp':\n            players.enemy.velocity.y = -20;\n            break;\n          case 'ArrowDown':\n            // players.enemy.attack();\n            attack(players.enemy, players.player);\n            break;\n        }\n      }\n    };\n    const handleKeyUp = event => {\n      switch (event.key) {\n        case 'a':\n          keys.a = false;\n          break;\n        case 'd':\n          keys.d = false;\n          break;\n      }\n\n      // enemy keys\n      switch (event.key) {\n        case 'ArrowLeft':\n          keys.ArrowLeft = false;\n          break;\n        case 'ArrowRight':\n          keys.ArrowRight = false;\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    const animate = () => {\n      window.requestAnimationFrame(animate);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n      // Handle player movement\n      if (keys.a) {\n        players.player.position.x -= players.player.velocity.x;\n      } else if (keys.d) {\n        players.player.position.x += players.player.velocity.x;\n      } else if (keys.w) {\n        // Handle jump for player\n        // Add your jump logic here\n      }\n\n      // Handle enemy movement\n      if (keys.ArrowLeft) {\n        players.enemy.position.x -= players.enemy.velocity.x;\n      } else if (keys.ArrowRight) {\n        players.enemy.position.x += players.enemy.velocity.x;\n      } else if (keys.ArrowUp) {\n        // Handle jump for enemy\n        // Add your jump logic here\n      }\n\n      // Draw attack animations\n      if (attackAnimationFrames.length > 0) {\n        const frameIndex = Math.floor(currentFrame / attackAnimationSpeed) % attackAnimationFrames.length;\n        const attackFrame = attackAnimationFrames[frameIndex];\n        ctx.drawImage(attackFrame.image, attackFrame.x, attackFrame.y);\n      } else {\n        // Draw player and enemy normally when not attacking\n        kenjiAnimationFrame.draw(ctx, players.player.position.x, players.player.position.y);\n        samuraiAnimationFrame.draw(ctx, players.enemy.position.x + 400, players.enemy.position.y);\n      }\n\n      // Attack logic\n      attack(players.player, players.enemy);\n      attack(players.enemy, players.player);\n      setCurrentFrame(prevFrame => prevFrame + 1);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [currentFrame, players]); // Include 'currentFrame' and 'players' in the dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasDrawing, \"xvx6sRQcBjBxNkCl5kAhs+Xtgc4=\");\n_c = CanvasDrawing;\nexport default CanvasDrawing;\nvar _c;\n$RefreshReg$(_c, \"CanvasDrawing\");","map":{"version":3,"names":["React","useRef","useEffect","useState","spriteImage","AnimationFrame","kenjiImage","samuraiImage","jsxDEV","_jsxDEV","gravity","initialPlayerState","player","position","x","y","velocity","scale","health","isAttacking","attackFrames","enemy","kenjiFrameWidth","kenjiFrameHeight","kenjiTotalFrames","kenjiAnimationSpeed","samuraiFrameWidth","samuraiFrameHeight","samuraiTotalFrames","samuraiAnimationSpeed","CanvasDrawing","_s","canvasRef","players","setPlayers","currentFrame","setCurrentFrame","attack","attacker","target","dead","setAttackAnimationFrames","setTimeout","length","attackAnimationSpeed","drawAttackBox","context","attackBox","fillStyle","fillRect","offset","width","height","attackAnimationFrames","canvas","current","ctx","getContext","backgroundImage","Image","src","image","onload","drawImage","fighter","kenjiAnimationFrame","frameWidth","frameHeight","totalFrames","animationSpeed","samuraiAnimationFrame","keys","a","d","w","space","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","handleKeyDown","event","key","handleKeyUp","window","addEventListener","animate","requestAnimationFrame","clearRect","frameIndex","Math","floor","attackFrame","draw","prevFrame","removeEventListener","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport './Components.css';\r\n\r\nimport spriteImage from './Images/background.png';\r\nimport { AnimationFrame } from './AnimationFrame.js';\r\nimport kenjiImage from './Idle3 .png'; // Corrected image file name\r\nimport samuraiImage from './fighter1.png';\r\n\r\nconst gravity = 0.7;\r\n\r\nconst initialPlayerState = {\r\n  player: {\r\n    position: {\r\n      x: 100,\r\n      y: 400,\r\n    },\r\n    velocity: {\r\n      x: 10,\r\n      y: 0,\r\n    },\r\n    scale: 2.5,\r\n    health: 100,\r\n    isAttacking: false,\r\n    attackFrames: [], // Add attack animation frames for the player\r\n  },\r\n  enemy: {\r\n    position: {\r\n      x: 100,\r\n      y: 400,\r\n    },\r\n    velocity: {\r\n      x: 10,\r\n      y: 0,\r\n    },\r\n    scale: 2.5,\r\n    health: 100,\r\n    isAttacking: false,\r\n    attackFrames: [], // Add attack animation frames for the enemy\r\n  },\r\n};\r\n\r\nconst kenjiFrameWidth = 284;\r\nconst kenjiFrameHeight = 600;\r\nconst kenjiTotalFrames = 1;\r\nconst kenjiAnimationSpeed = 10;\r\n\r\nconst samuraiFrameWidth = 284;\r\nconst samuraiFrameHeight = 600;\r\nconst samuraiTotalFrames = 1;\r\nconst samuraiAnimationSpeed = 10;\r\n\r\nfunction CanvasDrawing() {\r\n  const canvasRef = useRef(null);\r\n  const [players, setPlayers] = useState(initialPlayerState);\r\n  const [currentFrame, setCurrentFrame] = useState(0);\r\n\r\n  const attack = (attacker, target) => {\r\n    if (!attacker.isAttacking && !target.dead) {\r\n      attacker.isAttacking = true;\r\n      setAttackAnimationFrames(attacker.attackFrames);\r\n\r\n      // Example: Deal damage to the target\r\n      target.health -= 10;\r\n\r\n      // Reset the attacking state after the attack animation is complete\r\n      setTimeout(() => {\r\n        attacker.isAttacking = false;\r\n        setAttackAnimationFrames([]); // Clear attack animation frames\r\n      }, attacker.attackFrames.length * attackAnimationSpeed);\r\n    }\r\n  };\r\n\r\n  const drawAttackBox = (context) => {\r\n    const { player, attackBox } = players;\r\n    context.fillStyle = 'red'; // Set the attack box color\r\n    context.fillRect(\r\n      player.position.x + attackBox.offset.x,\r\n      player.position.y + attackBox.offset.y,\r\n      attackBox.width,\r\n      attackBox.height\r\n    );\r\n  };\r\n\r\n  const [attackAnimationFrames, setAttackAnimationFrames] = useState([]);\r\n  const attackAnimationSpeed = 5; // Adjust the speed as needed\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    const backgroundImage = new Image();\r\n    backgroundImage.src = spriteImage;\r\n\r\n    const image = new Image();\r\n    image.src = kenjiImage;\r\n\r\n    image.onload = function () {\r\n      ctx.drawImage(image, 50, 50);\r\n    };\r\n\r\n    const fighter = new Image();\r\n    fighter.src = samuraiImage;\r\n\r\n    fighter.onload = function () {\r\n      ctx.drawImage(fighter, 50, 50);\r\n    };\r\n\r\n    const kenjiAnimationFrame = new AnimationFrame({\r\n      image: image,\r\n      frameWidth: kenjiFrameWidth,\r\n      frameHeight: kenjiFrameHeight,\r\n      totalFrames: kenjiTotalFrames,\r\n      animationSpeed: kenjiAnimationSpeed,\r\n    });\r\n\r\n    const samuraiAnimationFrame = new AnimationFrame({\r\n      image: fighter,\r\n      frameWidth: samuraiFrameWidth,\r\n      frameHeight: samuraiFrameHeight,\r\n      totalFrames: samuraiTotalFrames,\r\n      animationSpeed: samuraiAnimationSpeed,\r\n    });\r\n\r\n    const keys = {\r\n      a: false,\r\n      d: false,\r\n      w: false,\r\n      space: false,\r\n      ArrowLeft: false,\r\n      ArrowRight: false,\r\n      ArrowUp: false,\r\n      ArrowDown: false,\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n      if (!players.player.dead) {\r\n        switch (event.key) {\r\n          case 'a':\r\n            keys.a = true;\r\n            break;\r\n          case 'd':\r\n            keys.d = true;\r\n            break;\r\n          case 'w':\r\n            players.player.velocity.y = -20;\r\n            break;\r\n          case ' ':\r\n            // players.player.attack();\r\n            attack(players.player, players.enemy);\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (!players.enemy.dead) {\r\n        switch (event.key) {\r\n          case 'ArrowLeft':\r\n            keys.ArrowLeft = true;\r\n            break;\r\n          case 'ArrowRight':\r\n            keys.ArrowRight = true;\r\n            break;\r\n          case 'ArrowUp':\r\n            players.enemy.velocity.y = -20;\r\n            break;\r\n          case 'ArrowDown':\r\n            // players.enemy.attack();\r\n            attack(players.enemy, players.player);\r\n            break;\r\n        }\r\n      }\r\n    };\r\n\r\n    const handleKeyUp = (event) => {\r\n      switch (event.key) {\r\n        case 'a':\r\n          keys.a = false;\r\n          break;\r\n        case 'd':\r\n          keys.d = false;\r\n          break;\r\n      }\r\n\r\n      // enemy keys\r\n      switch (event.key) {\r\n        case 'ArrowLeft':\r\n          keys.ArrowLeft = false;\r\n          break;\r\n        case 'ArrowRight':\r\n          keys.ArrowRight = false;\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n\r\n    const animate = () => {\r\n      window.requestAnimationFrame(animate);\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Handle player movement\r\n      if (keys.a) {\r\n        players.player.position.x -= players.player.velocity.x;\r\n      } else if (keys.d) {\r\n        players.player.position.x += players.player.velocity.x;\r\n      } else if (keys.w) {\r\n        // Handle jump for player\r\n        // Add your jump logic here\r\n      }\r\n\r\n      // Handle enemy movement\r\n      if (keys.ArrowLeft) {\r\n        players.enemy.position.x -= players.enemy.velocity.x;\r\n      } else if (keys.ArrowRight) {\r\n        players.enemy.position.x += players.enemy.velocity.x;\r\n      } else if (keys.ArrowUp) {\r\n        // Handle jump for enemy\r\n        // Add your jump logic here\r\n      }\r\n\r\n      // Draw attack animations\r\n      if (attackAnimationFrames.length > 0) {\r\n        const frameIndex = Math.floor(currentFrame / attackAnimationSpeed) % attackAnimationFrames.length;\r\n        const attackFrame = attackAnimationFrames[frameIndex];\r\n        ctx.drawImage(attackFrame.image, attackFrame.x, attackFrame.y);\r\n      } else {\r\n        // Draw player and enemy normally when not attacking\r\n        kenjiAnimationFrame.draw(ctx, players.player.position.x, players.player.position.y);\r\n        samuraiAnimationFrame.draw(ctx, players.enemy.position.x + 400, players.enemy.position.y);\r\n      }\r\n\r\n      // Attack logic\r\n      attack(players.player, players.enemy);\r\n      attack(players.enemy, players.player);\r\n\r\n      setCurrentFrame((prevFrame) => prevFrame + 1);\r\n    };\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      window.removeEventListener('keyup', handleKeyUp);\r\n    };\r\n  }, [currentFrame, players]); // Include 'currentFrame' and 'players' in the dependency array\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanvasDrawing;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}