{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\Signup.jsx\",\n  _s = $RefreshSig$();\n// import {\n//   Button,\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   InputGroup,\n//   InputRightElement,\n//   VStack,\n//   useToast,\n// } from \"@chakra-ui/react\";\n// import { Flex, Spacer } from '@chakra-ui/react'\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { Box , Container, Center} from '@chakra-ui/react';\n// import clicksound from './Sounds/Click-SoundEffect.mp3'\n\n// const Signup = () => {\n//   const [username, setName] = useState();\n//   const [email, setEmail] = useState();\n//   const [confirmpassword, setConfirmpassword] = useState();\n//   const [password, setPassword] = useState();\n//   const [show, setShow] = useState(false);\n//   const [showconfirm, setShowconfirm] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const toast = useToast();\n\n//   const ding=(e)=>{\n//     const sound=new Audio(clicksound);\n//    sound.play();\n//   }\n\n//   const submitHandler = async () => {\n//     setLoading(true);\n//     if (!username || !email || !password || !confirmpassword) {\n//       toast({\n//         title: \"Please fill all the required fields\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: \"true\",\n//         position: \"bottom\",\n//       });\n\n//       setLoading(false);\n//       return;\n//     }\n//     if (password !== confirmpassword) {\n//       toast({\n//         title: \"Passwords Doesn't match\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//       return;\n//     }\n//     try {\n//       const config = {\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//         },\n//       };\n\n//       const { data } = await axios.post(\n//         '/roboWar',\n//         { username, email, password },\n//         config\n//       );\n\n//       toast({\n//         title: \"Registration successful\",\n//         duration: 5000,\n//         status: \"success\",\n//         isClosable: true,\n//         position: \"top\",\n//       });\n\n//       localStorage.setItem(\"userInfo\", JSON.stringify(data));\n//       setLoading(false);\n//     } \n//       catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: error.response.data.message,\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//     }\n//   };\n\n//   return (\n//     <>\n//     <Container>\n//         <Flex color='yellow'>\n//         <Box w='5750px'>\n\n//     <VStack spacing=\"5px\" color=\"white\">\n//       <FormControl id=\"first-name\" isRequired>\n//         <FormLabel>Username</FormLabel>\n//         <Input\n//         onClick={ding}\n//           placeholder=\"Enter your name\"\n//           bg={username ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setName(event.target.value);\n//           }}\n//           value={username}\n//         />\n//       </FormControl>\n\n//       <FormControl id=\"email\" isRequired>\n//         <FormLabel>Email</FormLabel>\n//         <Input\n//         onClick={ding}\n//           placeholder=\"Enter your email\"\n//           bg={email ? \"gray.50\" : \"white\"}\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setEmail(event.target.value);\n//           }}\n//           value={email}\n//         />\n//       </FormControl>\n\n//       <FormControl id=\"password\" isRequired>\n//         <FormLabel>Password</FormLabel>\n//            <Input\n//            onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={password ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setPassword(event.target.value);\n//           }}\n//           value={password}\n//         />\n//          </FormControl>\n\n//       <FormControl id=\"confirm-password\" isRequired>\n//         <FormLabel>Confirm Password</FormLabel>\n//         <InputGroup>\n//           <Input\n//           onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setConfirmpassword(event.target.value);\n//           }}\n//           value={confirmpassword}\n//         />\n//         </InputGroup>\n//       </FormControl>\n\n//      <Button\n//         colorScheme=\"teal\"\n//         size='lg'\n//         margin={'5'}\n//         color='white'\n//         fontWeight='bold'\n//         borderRadius='md'\n//         bgGradient='linear(to-r, teal.500, green.500)'\n//         _hover={{\n//         bgGradient: 'linear(to-r, red.500, yellow.500)',\n//         }}\n//         style={{ marginTop: 15 }}\n//         onClick={submitHandler}\n//         isLoading={loading}\n//       >\n//         Sign Up\n//       </Button>\n//     </VStack>\n\n//     </Box>\n//       </Flex>\n//       </Container>\n\n//       </>\n//   );\n// };\n\n// export default Signup;\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Button, FormControl, FormLabel, Input, InputGroup, VStack, useToast, Box, Container, Flex } from \"@chakra-ui/react\";\nimport clicksound from \"./Sounds/Click-SoundEffect.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Signup = () => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const ding = () => {\n    const sound = new Audio(clicksound);\n    sound.play();\n  };\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!username || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please fill all the required fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      setLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords don't match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\"\n      });\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await axios.post('/roboWar', {\n        username,\n        email,\n        password\n      });\n      toast({\n        title: \"Registration successful\",\n        duration: 5000,\n        status: \"success\",\n        isClosable: true,\n        position: \"top\"\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(response.data));\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\"\n      });\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        color: \"white\",\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          w: \"5750px\",\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: \"5px\",\n            color: \"white\",\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"first-name\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                onClick: ding,\n                placeholder: \"Enter your name\",\n                bg: username ? \"gray.50\" : \"white\",\n                color: \"black\",\n                _hover: {\n                  borderColor: \"black\"\n                },\n                borderColor: \"black\",\n                onChange: event => {\n                  setUsername(event.target.value);\n                },\n                value: username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"email\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                onClick: ding,\n                placeholder: \"Enter your email\",\n                bg: email ? \"gray.50\" : \"white\",\n                _hover: {\n                  borderColor: \"black\"\n                },\n                borderColor: \"black\",\n                onChange: event => {\n                  setEmail(event.target.value);\n                },\n                value: email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"password\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                onClick: ding,\n                placeholder: \"Enter your password\",\n                bg: password ? \"gray.50\" : \"white\",\n                color: \"black\",\n                _hover: {\n                  borderColor: \"black\"\n                },\n                borderColor: \"black\",\n                onChange: event => {\n                  setPassword(event.target.value);\n                },\n                value: password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"confirm-password\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Confirm Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  onClick: ding,\n                  placeholder: \"Enter your password\",\n                  bg: confirmpassword ? \"gray.50\" : \"white\",\n                  color: \"black\",\n                  _hover: {\n                    borderColor: \"black\"\n                  },\n                  borderColor: \"black\",\n                  onChange: event => {\n                    setConfirmpassword(event.target.value);\n                  },\n                  value: confirmpassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              size: \"lg\",\n              margin: \"5\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              borderRadius: \"md\",\n              bgGradient: \"linear(to-r, teal.500, green.500)\",\n              _hover: {\n                bgGradient: \"linear(to-r, red.500, yellow.500)\"\n              },\n              style: {\n                marginTop: 15\n              },\n              onClick: () => {\n                ding(); // Play sound effect\n                submitHandler(); // Handle form submission\n              },\n\n              isLoading: loading,\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Signup, \"wQCAXFMWlAWsB39/yTzo1yLHLRI=\", false, function () {\n  return [useToast];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useState","axios","Button","FormControl","FormLabel","Input","InputGroup","VStack","useToast","Box","Container","Flex","clicksound","jsxDEV","_jsxDEV","Fragment","_Fragment","Signup","_s","username","setUsername","email","setEmail","password","setPassword","confirmpassword","setConfirmpassword","loading","setLoading","toast","ding","sound","Audio","play","submitHandler","title","status","duration","isClosable","position","response","post","localStorage","setItem","JSON","stringify","data","error","description","message","children","color","align","w","spacing","id","isRequired","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","bg","_hover","borderColor","onChange","event","target","value","colorScheme","size","margin","fontWeight","borderRadius","bgGradient","style","marginTop","isLoading","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Signup.jsx"],"sourcesContent":["// import {\r\n//   Button,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Input,\r\n//   InputGroup,\r\n//   InputRightElement,\r\n//   VStack,\r\n//   useToast,\r\n// } from \"@chakra-ui/react\";\r\n// import { Flex, Spacer } from '@chakra-ui/react'\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Box , Container, Center} from '@chakra-ui/react';\r\n// import clicksound from './Sounds/Click-SoundEffect.mp3'\r\n\r\n\r\n// const Signup = () => {\r\n//   const [username, setName] = useState();\r\n//   const [email, setEmail] = useState();\r\n//   const [confirmpassword, setConfirmpassword] = useState();\r\n//   const [password, setPassword] = useState();\r\n//   const [show, setShow] = useState(false);\r\n//   const [showconfirm, setShowconfirm] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const toast = useToast();\r\n\r\n//   const ding=(e)=>{\r\n//     const sound=new Audio(clicksound);\r\n//    sound.play();\r\n//   }\r\n  \r\n\r\n//   const submitHandler = async () => {\r\n//     setLoading(true);\r\n//     if (!username || !email || !password || !confirmpassword) {\r\n//       toast({\r\n//         title: \"Please fill all the required fields\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: \"true\",\r\n//         position: \"bottom\",\r\n//       });\r\n\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     if (password !== confirmpassword) {\r\n//       toast({\r\n//         title: \"Passwords Doesn't match\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//       return;\r\n//     }\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           \"Content-type\": \"application/json\",\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.post(\r\n//         '/roboWar',\r\n//         { username, email, password },\r\n//         config\r\n//       );\r\n\r\n//       toast({\r\n//         title: \"Registration successful\",\r\n//         duration: 5000,\r\n//         status: \"success\",\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n    \r\n\r\n//       localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n//       setLoading(false);\r\n//     } \r\n//       catch (error) {\r\n//       toast({\r\n//         title: \"Error Occured!\",\r\n//         description: error.response.data.message,\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//     <Container>\r\n//         <Flex color='yellow'>\r\n//         <Box w='5750px'>\r\n   \r\n    \r\n//     <VStack spacing=\"5px\" color=\"white\">\r\n//       <FormControl id=\"first-name\" isRequired>\r\n//         <FormLabel>Username</FormLabel>\r\n//         <Input\r\n//         onClick={ding}\r\n//           placeholder=\"Enter your name\"\r\n//           bg={username ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setName(event.target.value);\r\n//           }}\r\n//           value={username}\r\n//         />\r\n//       </FormControl>\r\n\r\n//       <FormControl id=\"email\" isRequired>\r\n//         <FormLabel>Email</FormLabel>\r\n//         <Input\r\n//         onClick={ding}\r\n//           placeholder=\"Enter your email\"\r\n//           bg={email ? \"gray.50\" : \"white\"}\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setEmail(event.target.value);\r\n//           }}\r\n//           value={email}\r\n//         />\r\n//       </FormControl>\r\n\r\n//       <FormControl id=\"password\" isRequired>\r\n//         <FormLabel>Password</FormLabel>\r\n//            <Input\r\n//            onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={password ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setPassword(event.target.value);\r\n//           }}\r\n//           value={password}\r\n//         />\r\n//          </FormControl>\r\n         \r\n\r\n//       <FormControl id=\"confirm-password\" isRequired>\r\n//         <FormLabel>Confirm Password</FormLabel>\r\n//         <InputGroup>\r\n//           <Input\r\n//           onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setConfirmpassword(event.target.value);\r\n//           }}\r\n//           value={confirmpassword}\r\n//         />\r\n//         </InputGroup>\r\n//       </FormControl>\r\n\r\n//      <Button\r\n//         colorScheme=\"teal\"\r\n//         size='lg'\r\n//         margin={'5'}\r\n//         color='white'\r\n//         fontWeight='bold'\r\n//         borderRadius='md'\r\n//         bgGradient='linear(to-r, teal.500, green.500)'\r\n//         _hover={{\r\n//         bgGradient: 'linear(to-r, red.500, yellow.500)',\r\n//         }}\r\n//         style={{ marginTop: 15 }}\r\n//         onClick={submitHandler}\r\n//         isLoading={loading}\r\n//       >\r\n//         Sign Up\r\n//       </Button>\r\n//     </VStack>\r\n\r\n//     </Box>\r\n//       </Flex>\r\n//       </Container>\r\n\r\n//       </>\r\n//   );\r\n// };\r\n\r\n// export default Signup;\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  VStack,\r\n  useToast,\r\n  Box,\r\n  Container,\r\n  Flex,\r\n} from \"@chakra-ui/react\";\r\nimport clicksound from \"./Sounds/Click-SoundEffect.mp3\";\r\n\r\n\r\nconst Signup = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const ding = () => {\r\n    const sound = new Audio(clicksound);\r\n    sound.play();\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n\r\n    if (!username || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please fill all the required fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords don't match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('/roboWar', {\r\n        username,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      toast({\r\n        title: \"Registration successful\",\r\n        duration: 5000,\r\n        status: \"success\",\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(response.data));\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Flex color=\"white\" align=\"center\">\r\n          <Box w=\"5750px\">\r\n            <VStack spacing=\"5px\" color=\"white\">\r\n              {/* ... Your form controls */}\r\n              <FormControl id=\"first-name\" isRequired>\r\n                <FormLabel>Username</FormLabel>\r\n                <Input\r\n                onClick={ding}\r\n                placeholder=\"Enter your name\"\r\n                bg={username ? \"gray.50\" : \"white\"}\r\n                color=\"black\"\r\n                _hover={{ borderColor: \"black\" }}\r\n                borderColor=\"black\"\r\n                onChange={(event) => {\r\n                  setUsername(event.target.value);\r\n          }}\r\n          value={username}\r\n        />\r\n      </FormControl>\r\n\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email</FormLabel>\r\n        <Input\r\n        onClick={ding}\r\n          placeholder=\"Enter your email\"\r\n          bg={email ? \"gray.50\" : \"white\"}\r\n          _hover={{ borderColor: \"black\" }}\r\n          borderColor=\"black\"\r\n          onChange={(event) => {\r\n            setEmail(event.target.value);\r\n          }}\r\n          value={email}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <Input\r\n           onClick={ding}\r\n          placeholder=\"Enter your password\"\r\n          bg={password ? \"gray.50\" : \"white\"}\r\n          color=\"black\"\r\n          _hover={{ borderColor: \"black\" }}\r\n          borderColor=\"black\"\r\n          onChange={(event) => {\r\n            setPassword(event.target.value);\r\n          }}\r\n          value={password}\r\n        />\r\n         </FormControl>\r\n         \r\n         <FormControl id=\"confirm-password\" isRequired>\r\n          <FormLabel>Confirm Password</FormLabel>\r\n          <InputGroup>\r\n          <Input\r\n          onClick={ding}\r\n          placeholder=\"Enter your password\"\r\n          bg={confirmpassword ? \"gray.50\" : \"white\"}\r\n          color=\"black\"\r\n          _hover={{ borderColor: \"black\" }}\r\n          borderColor=\"black\"\r\n          onChange={(event) => {\r\n            setConfirmpassword(event.target.value);\r\n          }}\r\n          value={confirmpassword}\r\n        />\r\n        </InputGroup>\r\n      </FormControl>\r\n              <Button\r\n                colorScheme=\"teal\"\r\n                size=\"lg\"\r\n                margin=\"5\"\r\n                color=\"white\"\r\n                fontWeight=\"bold\"\r\n                borderRadius=\"md\"\r\n                bgGradient=\"linear(to-r, teal.500, green.500)\"\r\n                _hover={{\r\n                  bgGradient: \"linear(to-r, red.500, yellow.500)\",\r\n                }}\r\n                style={{ marginTop: 15 }}\r\n                onClick={() => {\r\n                  ding(); // Play sound effect\r\n                  submitHandler(); // Handle form submission\r\n                }}\r\n                isLoading={loading}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n            </VStack>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,MAAM,EACNC,WAAW,EACXC,SAAS,EACTC,KAAK,EACLC,UAAU,EACVC,MAAM,EACNC,QAAQ,EACRC,GAAG,EACHC,SAAS,EACTC,IAAI,QACC,kBAAkB;AACzB,OAAOC,UAAU,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGxD,MAAMC,MAAM,GAAGA,CAAA,KAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}