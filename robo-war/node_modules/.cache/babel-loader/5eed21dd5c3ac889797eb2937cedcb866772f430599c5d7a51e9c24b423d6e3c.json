{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\Play.jsx\",\n  _s = $RefreshSig$();\n// import { useRef, useEffect } from 'react';\n// import React, { useState, Suspense } from 'react';\n\n// export function Play(props) {\n//   const canvasRef = useRef(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n\n//     context.fillStyle = 'red';\n//     context.fillRect(0, 0, props.width, props.height);\n\n//     const clickHandler = () => {\n//       context.fillStyle = 'blue';\n//       context.fillRect(0, 0, props.width, props.height);\n//     };\n\n//     canvas.addEventListener('click', clickHandler);\n\n//     return () => {\n//       canvas.removeEventListener('click', clickHandler);\n//     };\n//   }, []);\n\n//   return <canvas ref={canvasRef} width={props.width} height={props.height} />;\n// }\n// export default Play;\n\n// // const canvas = document.querySelector('canvas');\n// // const c = canvas.getContext('2d')\n\n// // canvas.width = 1024\n// // canvas.height = 576\n\n// // c.fillRect(0, 0, canvas.width, canvas.height)\n\n// // const gravity = 0.7\n\n// // class Sprite {\n// //     constructor({position, velocity, color = 'red',offset }) {\n// //         this.position = position\n// //         this.velocity = velocity\n// //         this.width = 50\n// //         this.height = 150\n// //         this.lastKey\n// //         this.attackBox = {\n// //             position: {\n// //                 x: this.position.x,\n// //                 y: this.position.y\n// //             },\n// //             offset,\n// //                 width: 100,\n// //                 height:50  \n\n// //         }\n// //         this.color = color\n// //         this.isAttacking\n// //     }\n// //     draw() {\n// //         c.fillStyle = this.color\n// //         c.fillRect(this.position.x, this.position.y, this.width, this.height)\n\n// // // attack box\n// // if (this.isAttacking ) {\n// // c.fillStyle = 'green'\n\n// // c.fillRect(this.attackBox.position.x , \n// //     this.attackBox.position.y, \n// //     this.attackBox.width, \n// //     this.attackBox.height\n// //     )\n// // }\n// //     }\n// //     update() {\n// //         this.draw()\n// //         this.attackBox.position.x =this.position.x +this.attackBox.offset.x\n// //         this.attackBox.position.y =this.position.y\n\n// //         this.position.x +=this.velocity.x\n// //         this.position.y +=this.velocity.y\n\n// //         this.position.y = this.position.y +=this.velocity.y\n\n// //         if (this.position.y + this.height +this.velocity.y >=canvas.height) {\n// //             this.velocity.y = 0\n// //         } else\n// //         this.velocity.y +=gravity\n// //     }\n\n// //     attack() \n// //     {\n// //         this.isAttacking = true\n// //         setTimeout(() => {\n// //             this.isAttacking = false\n\n// //         },100)\n// //     }\n// // }\n\n// // const player = new Sprite({\n// //     position: {\n// //     x:0,\n// //     y:0\n// // },\n// // velocity:{\n// //     x: 0,\n// //     y:0\n// // },\n// // offset: {\n// //     x: -50,\n// //     y: 0\n// // }})\n\n// // const enemy = new Sprite({\n// //     position: {\n// //     x:400,\n// //     y:100\n// // },\n// // velocity:{\n// //     x: 0,\n// //     y:0\n// // },\n// // color:'blue',\n// // offset: {\n// //     x: -50,\n// //     y: 0\n// // }\n// // })\n\n// // console.log(player)\n\n// // const keys = {\n// //     a: {\n// //         pressed: false\n// //     },\n// //     d: {\n// //         pressed: false\n// //     },\n// //     ArrowRight:  {\n// //         pressed: false\n// //     },\n// //     ArrowLeft: {\n// //         pressed:false\n// //     }\n\n// // }\n\n// // function rectangularCollision({\n// //     rectangle1, rectangle2\n// // }){\n// //     return (\n// //         rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && \n// //         rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width &&\n// //         rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y &&\n// //         rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\n// //     )\n// // }\n// // function animate()  {\n// //     window.requestAnimationFrame(animate)\n// //     c.fillStyle = 'black'\n// //     c.fillRect(0, 0, canvas.width, canvas.height)\n// //     player.update()\n// //     enemy.update()\n\n// //     player.velocity.x = 0\n// //     enemy.velocity.x = 0\n\n// // // player movement\n// //     if (keys.a.pressed && player.lastKey === 'a')  {\n// //         player.velocity.x = -5\n// //     } else if (keys.d.pressed && player.lastKey === 'd') {\n// //         player.velocity.x = 5\n// //     }\n\n// //     //enemy movement\n// //     if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft')  {\n// //         enemy.velocity.x = -5\n// //     } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n// //         enemy.velocity.x = 5\n// //     }\n// //     //detect for collison\n// //     if (rectangularCollision({\n// //         rectangle1: player,\n// //         rectangle2: enemy\n// //     }) &&\n// //         player.isAttacking) {\n// //             player.isAttacking = false\n// //         console.log('go')\n// //     }\n// //     if (rectangularCollision({\n// //         rectangle1: enemy,\n// //         rectangle2: player\n// //     }) &&\n// //         enemy.isAttacking) {\n// //             enemy.isAttacking = false\n// //         console.log('enemy attack successful')\n// //     }\n\n// // }\n\n// // animate()\n\n// // window.addEventListener('keydown', (event) => {\n// //     switch(event.key) {\n// //     case 'd':\n// //         keys.d.pressed = true  \n// //         player.lastKey = 'd'     \n// //          break\n// //     case 'a':\n// //             keys.a.pressed = true   \n// //             player.lastKey = 'a'    \n// //              break\n\n// //     case 'w':\n// //                 player.velocity.y = -10  \n// //                  break\n// //     case ' ':\n// //         player.attack()\n// //         break\n\n// //     case 'ArrowRight':\n// //                     keys.ArrowRight.pressed = true  \n// //                     lastKey = 'd'   \n// //                     enemy.lastKey = 'ArrowRight'  \n// //                      break\n// //     case 'ArrowLeft':\n// //                         keys.ArrowLeft.pressed = true   \n// //                         lastKey = 'a' \n// //                         enemy.lastKey = 'ArrowLeft'   \n// //                          break\n\n// //     case 'ArrowUp':\n// //                             enemy.velocity.y = -10  \n// //                              break\n// //     case 'ArrowDown':\n// //         enemy.isAttacking = true\n// //                              break\n// //     }\n\n// // })\n\n// // window.addEventListener('keyup', (event) => {\n// //     switch(event.key) {\n// //     case 'd':\n// //         keys.d.pressed = false\n// //                 break\n// //         case 'a':\n// //             keys.a.pressed = false\n// //                     break\n\n// //     }\n// //     //enemy keys\n// //     switch(event.key) {\n// //         case 'ArrowRight':\n// //             keys.ArrowRight.pressed = false\n// //                     break\n// //             case 'ArrowLeft':\n// //                 keys.ArrowLeft.pressed = false\n// //                         break\n// // }\n// // }\n// // )\n\n// import { useRef, useEffect } from 'react';\n// import Classes from './Classes.jsx';\n// const canvas = document.querySelector('canvas')\n// const c = canvas.getContext('2d')\n\n// canvas.width = 1024\n// canvas.height = 576\n\n// c.fillRect(0, 0, canvas.width, canvas.height)\n\n// const gravity = 0.7\n\n// const background = new Sprite({\n//   position: {\n//     x: 0,\n//     y: 0\n//   },\n//   imageSrc: './img/background.png'\n// })\n\n// const shop = new Sprite({\n//   position: {\n//     x: 650,\n//     y: 128\n//   },\n//   imageSrc: './img/shop.png',\n//   scale: 2.75,\n//   framesMax: 6\n// })\n\n// const player = new Fighter({\n//   position: {\n//     x: 0,\n//     y: 0\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   offset: {\n//     x: 0,\n//     y: 0\n//   },\n//   imageSrc: './img/samuraiMack/Idle.png',\n//   framesMax: 8,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 157\n//   }, ***\n//   sprites: {\n//     idle: {\n//       imageSrc: './img/samuraiMack/Idle.png',\n//       framesMax: 8\n//     },\n//     run: {\n//       imageSrc: './img/samuraiMack/Run.png',\n//       framesMax: 8\n//     },\n//     jump: {\n//       imageSrc: './img/samuraiMack/Jump.png',\n//       framesMax: 2\n//     },\n//     fall: {\n//       imageSrc: './img/samuraiMack/Fall.png',\n//       framesMax: 2\n//     },\n//     attack1: {\n//       imageSrc: './img/samuraiMack/Attack1.png',\n//       framesMax: 6\n//     },\n//     takeHit: {\n//       imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\n//       framesMax: 4\n//     },\n//     death: {\n//       imageSrc: './img/samuraiMack/Death.png',\n//       framesMax: 6\n//     }\n//   },\n//   attackBox: {\n//     offset: {\n//       x: 100,\n//       y: 50\n//     },\n//     width: 160,\n//     height: 50\n//   }\n// })\n\n// const enemy = new Fighter({\n//   position: {\n//     x: 400,\n//     y: 100\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   color: 'blue',\n//   offset: {\n//     x: -50,\n//     y: 0\n//   },\n//   imageSrc: './img/kenji/Idle.png',\n//   framesMax: 4,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 167\n//   },\n//   sprites: {\n//     idle: {\n//       imageSrc: './img/kenji/Idle.png',\n//       framesMax: 4\n//     },\n//     run: {\n//       imageSrc: './img/kenji/Run.png',\n//       framesMax: 8\n//     },\n//     jump: {\n//       imageSrc: './img/kenji/Jump.png',\n//       framesMax: 2\n//     },\n//     fall: {\n//       imageSrc: './img/kenji/Fall.png',\n//       framesMax: 2\n//     },\n//     attack1: {\n//       imageSrc: './img/kenji/Attack1.png',\n//       framesMax: 4\n//     },\n//     takeHit: {\n//       imageSrc: './img/kenji/Take hit.png',\n//       framesMax: 3\n//     },\n//     death: {\n//       imageSrc: './img/kenji/Death.png',\n//       framesMax: 7\n//     }\n//   },\n//   attackBox: {\n//     offset: {\n//       x: -170,\n//       y: 50\n//     },\n//     width: 170,\n//     height: 50\n//   }\n// })\n\n// console.log(player)\n\n// const keys = {\n//   a: {\n//     pressed: false\n//   },\n//   d: {\n//     pressed: false\n//   },\n//   ArrowRight: {\n//     pressed: false\n//   },\n//   ArrowLeft: {\n//     pressed: false\n//   }\n// }\n\n// decreaseTimer()\n\n// function animate() {\n//   window.requestAnimationFrame(animate)\n//   c.fillStyle = 'black'\n//   c.fillRect(0, 0, canvas.width, canvas.height)\n//   background.update()\n//   shop.update()\n//   c.fillStyle = 'rgba(255, 255, 255, 0.15)'\n//   c.fillRect(0, 0, canvas.width, canvas.height)\n//   player.update()\n//   enemy.update()\n\n//   player.velocity.x = 0\n//   enemy.velocity.x = 0\n\n//   // player movement\n\n//   if (keys.a.pressed && player.lastKey === 'a') {\n//     player.velocity.x = -5\n//     player.switchSprite('run')\n//   } else if (keys.d.pressed && player.lastKey === 'd') {\n//     player.velocity.x = 5\n//     player.switchSprite('run')\n//   } else {\n//     player.switchSprite('idle')\n//   }\n\n//   // jumping\n//   if (player.velocity.y < 0) {\n//     player.switchSprite('jump')\n//   } else if (player.velocity.y > 0) {\n//     player.switchSprite('fall')\n//   }\n\n//   // Enemy movement\n//   if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n//     enemy.velocity.x = -5\n//     enemy.switchSprite('run')\n//   } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n//     enemy.velocity.x = 5\n//     enemy.switchSprite('run')\n//   } else {\n//     enemy.switchSprite('idle')\n//   }\n\n//   // jumping\n//   if (enemy.velocity.y < 0) {\n//     enemy.switchSprite('jump')\n//   } else if (enemy.velocity.y > 0) {\n//     enemy.switchSprite('fall')\n//   }\n\n//   // detect for collision & enemy gets hit\n//   if (\n//     rectangularCollision({\n//       rectangle1: player,\n//       rectangle2: enemy\n//     }) &&\n//     player.isAttacking &&\n//     player.framesCurrent === 4\n//   ) {\n//     enemy.takeHit()\n//     player.isAttacking = false\n\n//     gsap.to('#enemyHealth', {\n//       width: enemy.health + '%'\n//     })\n//   }\n\n//   // if player misses\n//   if (player.isAttacking && player.framesCurrent === 4) {\n//     player.isAttacking = false\n//   }\n\n//   // this is where our player gets hit\n//   if (\n//     rectangularCollision({\n//       rectangle1: enemy,\n//       rectangle2: player\n//     }) &&\n//     enemy.isAttacking &&\n//     enemy.framesCurrent === 2\n//   ) {\n//     player.takeHit()\n//     enemy.isAttacking = false\n\n//     gsap.to('#playerHealth', {\n//       width: player.health + '%'\n//     })\n//   }\n\n//   // if player misses\n//   if (enemy.isAttacking && enemy.framesCurrent === 2) {\n//     enemy.isAttacking = false\n//   }\n\n//   // end game based on health\n//   if (enemy.health <= 0 || player.health <= 0) {\n//     determineWinner({ player, enemy, timerId })\n//   }\n// }\n\n// animate()\n\n// window.addEventListener('keydown', (event) => {\n//   if (!player.dead) {\n//     switch (event.key) {\n//       case 'd':\n//         keys.d.pressed = true\n//         player.lastKey = 'd'\n//         break\n//       case 'a':\n//         keys.a.pressed = true\n//         player.lastKey = 'a'\n//         break\n//       case 'w':\n//         player.velocity.y = -20\n//         break\n//       case ' ':\n//         player.attack()\n//         break\n//     }\n//   }\n\n//   if (!enemy.dead) {\n//     switch (event.key) {\n//       case 'ArrowRight':\n//         keys.ArrowRight.pressed = true\n//         enemy.lastKey = 'ArrowRight'\n//         break\n//       case 'ArrowLeft':\n//         keys.ArrowLeft.pressed = true\n//         enemy.lastKey = 'ArrowLeft'\n//         break\n//       case 'ArrowUp':\n//         enemy.velocity.y = -20\n//         break\n//       case 'ArrowDown':\n//         enemy.attack()\n\n//         break\n//     }\n//   }\n// })\n\n// window.addEventListener('keyup', (event) => {\n//   switch (event.key) {\n//     case 'd':\n//       keys.d.pressed = false\n//       break\n//     case 'a':\n//       keys.a.pressed = false\n//       break\n//   }\n\n//   // enemy keys\n//   switch (event.key) {\n//     case 'ArrowRight':\n//       keys.ArrowRight.pressed = false\n//       break\n//     case 'ArrowLeft':\n//       keys.ArrowLeft.pressed = false\n//       break\n//   }\n//   <Classes />\n// })\n\nimport React, { useState } from 'react';\nimport CanvasDrawing from './CanvasDrawing.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Play() {\n  _s();\n  const [showCanvas, setShowCanvas] = useState(true);\n\n  // const handleButtonClick = () => {\n  //   setShowCanvas(true);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showCanvas && /*#__PURE__*/_jsxDEV(CanvasDrawing, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 624,\n    columnNumber: 5\n  }, this);\n}\n_s(Play, \"DUScuiCwtFNL30es7P71EfYdniM=\");\n_c = Play;\nexport default Play;\nvar _c;\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"names":["React","useState","CanvasDrawing","jsxDEV","_jsxDEV","Play","_s","showCanvas","setShowCanvas","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Play.jsx"],"sourcesContent":["// import { useRef, useEffect } from 'react';\r\n// import React, { useState, Suspense } from 'react';\r\n\r\n// export function Play(props) {\r\n//   const canvasRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const context = canvas.getContext('2d');\r\n\r\n//     context.fillStyle = 'red';\r\n//     context.fillRect(0, 0, props.width, props.height);\r\n\r\n//     const clickHandler = () => {\r\n//       context.fillStyle = 'blue';\r\n//       context.fillRect(0, 0, props.width, props.height);\r\n//     };\r\n\r\n//     canvas.addEventListener('click', clickHandler);\r\n\r\n//     return () => {\r\n//       canvas.removeEventListener('click', clickHandler);\r\n//     };\r\n//   }, []);\r\n\r\n//   return <canvas ref={canvasRef} width={props.width} height={props.height} />;\r\n// }\r\n// export default Play;\r\n\r\n\r\n\r\n\r\n\r\n// // const canvas = document.querySelector('canvas');\r\n// // const c = canvas.getContext('2d')\r\n\r\n// // canvas.width = 1024\r\n// // canvas.height = 576\r\n\r\n// // c.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n// // const gravity = 0.7\r\n\r\n// // class Sprite {\r\n// //     constructor({position, velocity, color = 'red',offset }) {\r\n// //         this.position = position\r\n// //         this.velocity = velocity\r\n// //         this.width = 50\r\n// //         this.height = 150\r\n// //         this.lastKey\r\n// //         this.attackBox = {\r\n// //             position: {\r\n// //                 x: this.position.x,\r\n// //                 y: this.position.y\r\n// //             },\r\n// //             offset,\r\n// //                 width: 100,\r\n// //                 height:50  \r\n        \r\n        \r\n           \r\n// //         }\r\n// //         this.color = color\r\n// //         this.isAttacking\r\n// //     }\r\n// //     draw() {\r\n// //         c.fillStyle = this.color\r\n// //         c.fillRect(this.position.x, this.position.y, this.width, this.height)\r\n\r\n// // // attack box\r\n// // if (this.isAttacking ) {\r\n// // c.fillStyle = 'green'\r\n\r\n// // c.fillRect(this.attackBox.position.x , \r\n// //     this.attackBox.position.y, \r\n// //     this.attackBox.width, \r\n// //     this.attackBox.height\r\n// //     )\r\n// // }\r\n// //     }\r\n// //     update() {\r\n// //         this.draw()\r\n// //         this.attackBox.position.x =this.position.x +this.attackBox.offset.x\r\n// //         this.attackBox.position.y =this.position.y\r\n\r\n// //         this.position.x +=this.velocity.x\r\n// //         this.position.y +=this.velocity.y\r\n        \r\n// //         this.position.y = this.position.y +=this.velocity.y\r\n\r\n// //         if (this.position.y + this.height +this.velocity.y >=canvas.height) {\r\n// //             this.velocity.y = 0\r\n// //         } else\r\n// //         this.velocity.y +=gravity\r\n// //     }\r\n\r\n// //     attack() \r\n// //     {\r\n// //         this.isAttacking = true\r\n// //         setTimeout(() => {\r\n// //             this.isAttacking = false\r\n\r\n// //         },100)\r\n// //     }\r\n// // }\r\n\r\n\r\n// // const player = new Sprite({\r\n// //     position: {\r\n// //     x:0,\r\n// //     y:0\r\n// // },\r\n// // velocity:{\r\n// //     x: 0,\r\n// //     y:0\r\n// // },\r\n// // offset: {\r\n// //     x: -50,\r\n// //     y: 0\r\n// // }})\r\n\r\n\r\n\r\n// // const enemy = new Sprite({\r\n// //     position: {\r\n// //     x:400,\r\n// //     y:100\r\n// // },\r\n// // velocity:{\r\n// //     x: 0,\r\n// //     y:0\r\n// // },\r\n// // color:'blue',\r\n// // offset: {\r\n// //     x: -50,\r\n// //     y: 0\r\n// // }\r\n// // })\r\n\r\n\r\n// // console.log(player)\r\n\r\n// // const keys = {\r\n// //     a: {\r\n// //         pressed: false\r\n// //     },\r\n// //     d: {\r\n// //         pressed: false\r\n// //     },\r\n// //     ArrowRight:  {\r\n// //         pressed: false\r\n// //     },\r\n// //     ArrowLeft: {\r\n// //         pressed:false\r\n// //     }\r\n    \r\n// // }\r\n\r\n\r\n// // function rectangularCollision({\r\n// //     rectangle1, rectangle2\r\n// // }){\r\n// //     return (\r\n// //         rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && \r\n// //         rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width &&\r\n// //         rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y &&\r\n// //         rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\r\n// //     )\r\n// // }\r\n// // function animate()  {\r\n// //     window.requestAnimationFrame(animate)\r\n// //     c.fillStyle = 'black'\r\n// //     c.fillRect(0, 0, canvas.width, canvas.height)\r\n// //     player.update()\r\n// //     enemy.update()\r\n\r\n// //     player.velocity.x = 0\r\n// //     enemy.velocity.x = 0\r\n\r\n// // // player movement\r\n// //     if (keys.a.pressed && player.lastKey === 'a')  {\r\n// //         player.velocity.x = -5\r\n// //     } else if (keys.d.pressed && player.lastKey === 'd') {\r\n// //         player.velocity.x = 5\r\n// //     }\r\n\r\n// //     //enemy movement\r\n// //     if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft')  {\r\n// //         enemy.velocity.x = -5\r\n// //     } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n// //         enemy.velocity.x = 5\r\n// //     }\r\n// //     //detect for collison\r\n// //     if (rectangularCollision({\r\n// //         rectangle1: player,\r\n// //         rectangle2: enemy\r\n// //     }) &&\r\n// //         player.isAttacking) {\r\n// //             player.isAttacking = false\r\n// //         console.log('go')\r\n// //     }\r\n// //     if (rectangularCollision({\r\n// //         rectangle1: enemy,\r\n// //         rectangle2: player\r\n// //     }) &&\r\n// //         enemy.isAttacking) {\r\n// //             enemy.isAttacking = false\r\n// //         console.log('enemy attack successful')\r\n// //     }\r\n\r\n// // }\r\n\r\n// // animate()\r\n\r\n// // window.addEventListener('keydown', (event) => {\r\n// //     switch(event.key) {\r\n// //     case 'd':\r\n// //         keys.d.pressed = true  \r\n// //         player.lastKey = 'd'     \r\n// //          break\r\n// //     case 'a':\r\n// //             keys.a.pressed = true   \r\n// //             player.lastKey = 'a'    \r\n// //              break\r\n\r\n// //     case 'w':\r\n// //                 player.velocity.y = -10  \r\n// //                  break\r\n// //     case ' ':\r\n// //         player.attack()\r\n// //         break\r\n\r\n// //     case 'ArrowRight':\r\n// //                     keys.ArrowRight.pressed = true  \r\n// //                     lastKey = 'd'   \r\n// //                     enemy.lastKey = 'ArrowRight'  \r\n// //                      break\r\n// //     case 'ArrowLeft':\r\n// //                         keys.ArrowLeft.pressed = true   \r\n// //                         lastKey = 'a' \r\n// //                         enemy.lastKey = 'ArrowLeft'   \r\n// //                          break\r\n            \r\n// //     case 'ArrowUp':\r\n// //                             enemy.velocity.y = -10  \r\n// //                              break\r\n// //     case 'ArrowDown':\r\n// //         enemy.isAttacking = true\r\n// //                              break\r\n// //     }\r\n    \r\n// // })\r\n\r\n\r\n// // window.addEventListener('keyup', (event) => {\r\n// //     switch(event.key) {\r\n// //     case 'd':\r\n// //         keys.d.pressed = false\r\n// //                 break\r\n// //         case 'a':\r\n// //             keys.a.pressed = false\r\n// //                     break\r\n        \r\n// //     }\r\n// //     //enemy keys\r\n// //     switch(event.key) {\r\n// //         case 'ArrowRight':\r\n// //             keys.ArrowRight.pressed = false\r\n// //                     break\r\n// //             case 'ArrowLeft':\r\n// //                 keys.ArrowLeft.pressed = false\r\n// //                         break\r\n// // }\r\n// // }\r\n// // )\r\n\r\n// import { useRef, useEffect } from 'react';\r\n// import Classes from './Classes.jsx';\r\n// const canvas = document.querySelector('canvas')\r\n// const c = canvas.getContext('2d')\r\n\r\n// canvas.width = 1024\r\n// canvas.height = 576\r\n\r\n// c.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n// const gravity = 0.7\r\n\r\n// const background = new Sprite({\r\n//   position: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   imageSrc: './img/background.png'\r\n// })\r\n\r\n// const shop = new Sprite({\r\n//   position: {\r\n//     x: 650,\r\n//     y: 128\r\n//   },\r\n//   imageSrc: './img/shop.png',\r\n//   scale: 2.75,\r\n//   framesMax: 6\r\n// })\r\n\r\n// const player = new Fighter({\r\n//   position: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   offset: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   imageSrc: './img/samuraiMack/Idle.png',\r\n//   framesMax: 8,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 157\r\n//   }, ***\r\n//   sprites: {\r\n//     idle: {\r\n//       imageSrc: './img/samuraiMack/Idle.png',\r\n//       framesMax: 8\r\n//     },\r\n//     run: {\r\n//       imageSrc: './img/samuraiMack/Run.png',\r\n//       framesMax: 8\r\n//     },\r\n//     jump: {\r\n//       imageSrc: './img/samuraiMack/Jump.png',\r\n//       framesMax: 2\r\n//     },\r\n//     fall: {\r\n//       imageSrc: './img/samuraiMack/Fall.png',\r\n//       framesMax: 2\r\n//     },\r\n//     attack1: {\r\n//       imageSrc: './img/samuraiMack/Attack1.png',\r\n//       framesMax: 6\r\n//     },\r\n//     takeHit: {\r\n//       imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\r\n//       framesMax: 4\r\n//     },\r\n//     death: {\r\n//       imageSrc: './img/samuraiMack/Death.png',\r\n//       framesMax: 6\r\n//     }\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: 100,\r\n//       y: 50\r\n//     },\r\n//     width: 160,\r\n//     height: 50\r\n//   }\r\n// })\r\n\r\n// const enemy = new Fighter({\r\n//   position: {\r\n//     x: 400,\r\n//     y: 100\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   color: 'blue',\r\n//   offset: {\r\n//     x: -50,\r\n//     y: 0\r\n//   },\r\n//   imageSrc: './img/kenji/Idle.png',\r\n//   framesMax: 4,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 167\r\n//   },\r\n//   sprites: {\r\n//     idle: {\r\n//       imageSrc: './img/kenji/Idle.png',\r\n//       framesMax: 4\r\n//     },\r\n//     run: {\r\n//       imageSrc: './img/kenji/Run.png',\r\n//       framesMax: 8\r\n//     },\r\n//     jump: {\r\n//       imageSrc: './img/kenji/Jump.png',\r\n//       framesMax: 2\r\n//     },\r\n//     fall: {\r\n//       imageSrc: './img/kenji/Fall.png',\r\n//       framesMax: 2\r\n//     },\r\n//     attack1: {\r\n//       imageSrc: './img/kenji/Attack1.png',\r\n//       framesMax: 4\r\n//     },\r\n//     takeHit: {\r\n//       imageSrc: './img/kenji/Take hit.png',\r\n//       framesMax: 3\r\n//     },\r\n//     death: {\r\n//       imageSrc: './img/kenji/Death.png',\r\n//       framesMax: 7\r\n//     }\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: -170,\r\n//       y: 50\r\n//     },\r\n//     width: 170,\r\n//     height: 50\r\n//   }\r\n// })\r\n\r\n// console.log(player)\r\n\r\n// const keys = {\r\n//   a: {\r\n//     pressed: false\r\n//   },\r\n//   d: {\r\n//     pressed: false\r\n//   },\r\n//   ArrowRight: {\r\n//     pressed: false\r\n//   },\r\n//   ArrowLeft: {\r\n//     pressed: false\r\n//   }\r\n// }\r\n\r\n// decreaseTimer()\r\n\r\n// function animate() {\r\n//   window.requestAnimationFrame(animate)\r\n//   c.fillStyle = 'black'\r\n//   c.fillRect(0, 0, canvas.width, canvas.height)\r\n//   background.update()\r\n//   shop.update()\r\n//   c.fillStyle = 'rgba(255, 255, 255, 0.15)'\r\n//   c.fillRect(0, 0, canvas.width, canvas.height)\r\n//   player.update()\r\n//   enemy.update()\r\n\r\n//   player.velocity.x = 0\r\n//   enemy.velocity.x = 0\r\n\r\n//   // player movement\r\n\r\n//   if (keys.a.pressed && player.lastKey === 'a') {\r\n//     player.velocity.x = -5\r\n//     player.switchSprite('run')\r\n//   } else if (keys.d.pressed && player.lastKey === 'd') {\r\n//     player.velocity.x = 5\r\n//     player.switchSprite('run')\r\n//   } else {\r\n//     player.switchSprite('idle')\r\n//   }\r\n\r\n//   // jumping\r\n//   if (player.velocity.y < 0) {\r\n//     player.switchSprite('jump')\r\n//   } else if (player.velocity.y > 0) {\r\n//     player.switchSprite('fall')\r\n//   }\r\n\r\n//   // Enemy movement\r\n//   if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\r\n//     enemy.velocity.x = -5\r\n//     enemy.switchSprite('run')\r\n//   } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n//     enemy.velocity.x = 5\r\n//     enemy.switchSprite('run')\r\n//   } else {\r\n//     enemy.switchSprite('idle')\r\n//   }\r\n\r\n//   // jumping\r\n//   if (enemy.velocity.y < 0) {\r\n//     enemy.switchSprite('jump')\r\n//   } else if (enemy.velocity.y > 0) {\r\n//     enemy.switchSprite('fall')\r\n//   }\r\n\r\n//   // detect for collision & enemy gets hit\r\n//   if (\r\n//     rectangularCollision({\r\n//       rectangle1: player,\r\n//       rectangle2: enemy\r\n//     }) &&\r\n//     player.isAttacking &&\r\n//     player.framesCurrent === 4\r\n//   ) {\r\n//     enemy.takeHit()\r\n//     player.isAttacking = false\r\n\r\n//     gsap.to('#enemyHealth', {\r\n//       width: enemy.health + '%'\r\n//     })\r\n//   }\r\n\r\n//   // if player misses\r\n//   if (player.isAttacking && player.framesCurrent === 4) {\r\n//     player.isAttacking = false\r\n//   }\r\n\r\n//   // this is where our player gets hit\r\n//   if (\r\n//     rectangularCollision({\r\n//       rectangle1: enemy,\r\n//       rectangle2: player\r\n//     }) &&\r\n//     enemy.isAttacking &&\r\n//     enemy.framesCurrent === 2\r\n//   ) {\r\n//     player.takeHit()\r\n//     enemy.isAttacking = false\r\n\r\n//     gsap.to('#playerHealth', {\r\n//       width: player.health + '%'\r\n//     })\r\n//   }\r\n\r\n//   // if player misses\r\n//   if (enemy.isAttacking && enemy.framesCurrent === 2) {\r\n//     enemy.isAttacking = false\r\n//   }\r\n\r\n//   // end game based on health\r\n//   if (enemy.health <= 0 || player.health <= 0) {\r\n//     determineWinner({ player, enemy, timerId })\r\n//   }\r\n// }\r\n\r\n// animate()\r\n\r\n// window.addEventListener('keydown', (event) => {\r\n//   if (!player.dead) {\r\n//     switch (event.key) {\r\n//       case 'd':\r\n//         keys.d.pressed = true\r\n//         player.lastKey = 'd'\r\n//         break\r\n//       case 'a':\r\n//         keys.a.pressed = true\r\n//         player.lastKey = 'a'\r\n//         break\r\n//       case 'w':\r\n//         player.velocity.y = -20\r\n//         break\r\n//       case ' ':\r\n//         player.attack()\r\n//         break\r\n//     }\r\n//   }\r\n\r\n//   if (!enemy.dead) {\r\n//     switch (event.key) {\r\n//       case 'ArrowRight':\r\n//         keys.ArrowRight.pressed = true\r\n//         enemy.lastKey = 'ArrowRight'\r\n//         break\r\n//       case 'ArrowLeft':\r\n//         keys.ArrowLeft.pressed = true\r\n//         enemy.lastKey = 'ArrowLeft'\r\n//         break\r\n//       case 'ArrowUp':\r\n//         enemy.velocity.y = -20\r\n//         break\r\n//       case 'ArrowDown':\r\n//         enemy.attack()\r\n\r\n//         break\r\n//     }\r\n//   }\r\n// })\r\n\r\n// window.addEventListener('keyup', (event) => {\r\n//   switch (event.key) {\r\n//     case 'd':\r\n//       keys.d.pressed = false\r\n//       break\r\n//     case 'a':\r\n//       keys.a.pressed = false\r\n//       break\r\n//   }\r\n\r\n//   // enemy keys\r\n//   switch (event.key) {\r\n//     case 'ArrowRight':\r\n//       keys.ArrowRight.pressed = false\r\n//       break\r\n//     case 'ArrowLeft':\r\n//       keys.ArrowLeft.pressed = false\r\n//       break\r\n//   }\r\n//   <Classes />\r\n// })\r\n\r\nimport React, { useState } from 'react';\r\nimport CanvasDrawing from './CanvasDrawing.js';\r\n\r\nfunction Play() {\r\n  const [showCanvas, setShowCanvas] = useState(true);\r\n\r\n  // const handleButtonClick = () => {\r\n  //   setShowCanvas(true);\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      {/* <button onClick={handleButtonClick}>Show Canvas</button> */}\r\n      {showCanvas && <CanvasDrawing />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Play;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAMA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA;EACA;;EAEA,oBACEG,OAAA;IAAAK,QAAA,EAEGF,UAAU,iBAAIH,OAAA,CAACF,aAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV;AAACP,EAAA,CAbQD,IAAI;AAAAS,EAAA,GAAJT,IAAI;AAeb,eAAeA,IAAI;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}