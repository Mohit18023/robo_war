{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\n// // // CanvasDrawing.js\n\n// // import React, { useRef, useEffect } from 'react';\n// // import './Components.css'; // Import your component-specific CSS file\n\n// // import spriteImage from './img/background.png';\n\n// // function CanvasDrawing() {\n// //   // Create a ref for the canvas element\n// //   const canvasRef = useRef(null);\n\n// //   useEffect(() => {\n// //     // const canvas = canvasRef.current;\n// //     // const ctx = canvas.getContext('2d');\n\n// //     const canvas = document.querySelector('canvas');\n// //     const ctx = canvas.getContext('2d')\n// //     // Set canvas dimensions\n// //     canvas.width = 1024;\n// //     canvas.height = 576;\n\n// //     // Drawing code here\n// //     // ctx.fillStyle = 'blue';\n// //     ctx.fillRect(0, 0, canvas.width, canvas.height);\n// //     const gravity = 0.7\n\n// //     const Components = () => {\n// //       return (\n// //         <div className=\"SpriteImage\">\n// //           {/* Your component content */}\n// //         </div>\n// //       );\n// //     };\n// //     // Cleanup (optional)\n// //     return () => {\n// //       // You can perform cleanup here if needed\n// //     };\n// //   }, []); // Empty dependency array to run only once\n\n// //   return (\n// //     <div>\n// //       <canvas ref={canvasRef}></canvas>\n// //     </div>\n// //   );\n// // }\n\n// // export default CanvasDrawing;\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import './Components.css'; // Import your component-specific CSS file\n\n// import spriteImage from './img/background.png';\n\n// const initialPlayerState = {\n//   position: {\n//     x: 0,\n//     y: 0\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   offset: {\n//     x: 0,\n//     y: 0\n//   },\n//   imageSrc: './img/samuraiMack/Idle.png',\n//   framesMax: 8,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 157\n//   },\n//   sprites: {\n//     idle: {\n//       imageSrc: './img/samuraiMack/Idle.png',\n//       framesMax: 8\n//     },\n//     // ... Add other sprite definitions here\n//   },\n//   attackBox: {\n//     offset: {\n//       x: 100,\n//       y: 50\n//     },\n//     width: 160,\n//     height: 50\n//   }\n// };\n// const initialEnemyState = {\n//   position: {\n//     x: 400,\n//     y: 100\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   color: 'blue',\n//   offset: {\n//     x: -50,\n//     y: 0\n//   },\n//   imageSrc: './img/kenji/Idle.png',\n//   framesMax: 4,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 167\n//   },\n//   sprites: {\n//     idle: {\n//       imageSrc: './img/kenji/Idle.png',\n//       framesMax: 4\n//     },\n//     // ... Add other sprite definitions here\n//   },\n//   attackBox: {\n//     offset: {\n//       x: -170,\n//       y: 50\n//     },\n//     width: 170,\n//     height: 50\n//   }\n// };\n// function CanvasDrawing() {\n//   // Create a ref for the canvas element\n//   const canvasRef = useRef(null);\n//   const [player, setPlayer] = useState(initialPlayerState);\n//   const [enemy, setEnemy] = useState(initialEnemyState);\n//   const [keys, setKeys] = useState({\n//     a: {\n//       pressed: false\n//     },\n//     d: {\n//       pressed: false\n//     },\n//     ArrowRight: {\n//       pressed: false\n//     },\n//     ArrowLeft: {\n//       pressed: false\n//     }\n//   });\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const gravity = 0.7;\n\n//     // Set canvas dimensions\n//     canvas.width = 1024;\n//     canvas.height = 576;\n\n//     // Use the spriteImage as the background\n//     const backgroundImage = new Image();\n//     backgroundImage.src = spriteImage;\n\n//     // Once the image is loaded, draw it on the canvas\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n//     // Other drawing code here\n//     // ctx.fillStyle = 'blue';\n//     // ctx.fillRect(0, 0, canvas.width, canvas.height);\n// // Draw the sprite image\n// const playerImage = new Image();\n// playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\n// playerImage.onload = () => {\n//   // Draw the player image at the desired position (player.position.x, player.position.y)\n//   ctx.drawImage(playerImage, player.position.x, player.position.y);\n// };\n// };\n//     const handleKeyDown = (event) => {\n//       // Update the keys state based on the pressed key\n//       setKeys((prevKeys) => ({\n//         ...prevKeys,\n//         [event.key]: {\n//           pressed: true\n//         }\n//       }));\n//     };\n\n//     const handleKeyUp = (event) => {\n//       // Update the keys state when a key is released\n//       setKeys((prevKeys) => ({\n//         ...prevKeys,\n//         [event.key]: {\n//           pressed: false\n//         }\n//       }));\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n//     window.addEventListener('keyup', handleKeyUp);\n\n//     // Cleanup (optional)\n//     return () => {\n//       // You can perform cleanup here if needed\n//     };\n//   }, []); // Empty dependency array to run only once\n\n//   return (\n//     <div>\n//       <canvas ref={canvasRef}></canvas>\n//     </div>\n//   );\n// }\n\n// export default CanvasDrawing;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Fighter {\n  constructor({\n    position,\n    velocity,\n    offset,\n    imageSrc,\n    framesMax,\n    scale,\n    sprites\n  }) {\n    this.position = position;\n    this.velocity = velocity;\n    this.offset = offset;\n    this.imageSrc = imageSrc;\n    this.framesMax = framesMax;\n    this.scale = scale;\n    this.sprites = sprites;\n    this.currentSprite = 'idle'; // Set an initial sprite state\n  }\n\n  // You can add methods for animations or game logic here\n}\n\nfunction PlayerComponent() {\n  _s();\n  const [player, setPlayer] = useState(null);\n  useEffect(() => {\n    // Create the player object when the component mounts\n    const playerInstance = new Fighter({\n      position: {\n        x: 0,\n        y: 0\n      },\n      velocity: {\n        x: 0,\n        y: 0\n      },\n      offset: {\n        x: 215,\n        y: 157\n      },\n      imageSrc: './img/kenji/Idle.png',\n      framesMax: 8,\n      scale: 2.5,\n      sprites: {\n        idle: {\n          imageSrc: './img/kenji/Idle.png',\n          framesMax: 8\n        }\n        // Add more sprite animations here if needed\n      }\n    });\n\n    setPlayer(playerInstance);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: player &&\n    /*#__PURE__*/\n    // Check if player exists\n    _jsxDEV(\"img\", {\n      src: player.imageSrc\n      // alt=\"Player Character\"\n      ,\n      style: {\n        position: 'absolute',\n        left: player.position.x + 'px',\n        top: player.position.y + 'px',\n        width: player.width * player.scale + 'px',\n        height: player.height * player.scale + 'px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(PlayerComponent, \"uzxOLAuaxn3hE1Kc574CrqPAUa0=\");\n_c = PlayerComponent;\nexport default PlayerComponent;\nvar _c;\n$RefreshReg$(_c, \"PlayerComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fighter","constructor","position","velocity","offset","imageSrc","framesMax","scale","sprites","currentSprite","PlayerComponent","_s","player","setPlayer","playerInstance","x","y","idle","children","src","style","left","top","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["// // // CanvasDrawing.js\r\n\r\n// // import React, { useRef, useEffect } from 'react';\r\n// // import './Components.css'; // Import your component-specific CSS file\r\n\r\n// // import spriteImage from './img/background.png';\r\n\r\n// // function CanvasDrawing() {\r\n// //   // Create a ref for the canvas element\r\n// //   const canvasRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     // const canvas = canvasRef.current;\r\n// //     // const ctx = canvas.getContext('2d');\r\n\r\n// //     const canvas = document.querySelector('canvas');\r\n// //     const ctx = canvas.getContext('2d')\r\n// //     // Set canvas dimensions\r\n// //     canvas.width = 1024;\r\n// //     canvas.height = 576;\r\n\r\n// //     // Drawing code here\r\n// //     // ctx.fillStyle = 'blue';\r\n// //     ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// //     const gravity = 0.7\r\n\r\n// //     const Components = () => {\r\n// //       return (\r\n// //         <div className=\"SpriteImage\">\r\n// //           {/* Your component content */}\r\n// //         </div>\r\n// //       );\r\n// //     };\r\n// //     // Cleanup (optional)\r\n// //     return () => {\r\n// //       // You can perform cleanup here if needed\r\n// //     };\r\n// //   }, []); // Empty dependency array to run only once\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <canvas ref={canvasRef}></canvas>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default CanvasDrawing;\r\n\r\n\r\n// import React, { useRef, useEffect, useState } from 'react';\r\n// import './Components.css'; // Import your component-specific CSS file\r\n\r\n// import spriteImage from './img/background.png';\r\n\r\n\r\n// const initialPlayerState = {\r\n//   position: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   offset: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   imageSrc: './img/samuraiMack/Idle.png',\r\n//   framesMax: 8,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 157\r\n//   },\r\n//   sprites: {\r\n//     idle: {\r\n//       imageSrc: './img/samuraiMack/Idle.png',\r\n//       framesMax: 8\r\n//     },\r\n//     // ... Add other sprite definitions here\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: 100,\r\n//       y: 50\r\n//     },\r\n//     width: 160,\r\n//     height: 50\r\n//   }\r\n// };\r\n// const initialEnemyState = {\r\n//   position: {\r\n//     x: 400,\r\n//     y: 100\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   color: 'blue',\r\n//   offset: {\r\n//     x: -50,\r\n//     y: 0\r\n//   },\r\n//   imageSrc: './img/kenji/Idle.png',\r\n//   framesMax: 4,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 167\r\n//   },\r\n//   sprites: {\r\n//     idle: {\r\n//       imageSrc: './img/kenji/Idle.png',\r\n//       framesMax: 4\r\n//     },\r\n//     // ... Add other sprite definitions here\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: -170,\r\n//       y: 50\r\n//     },\r\n//     width: 170,\r\n//     height: 50\r\n//   }\r\n// };\r\n// function CanvasDrawing() {\r\n//   // Create a ref for the canvas element\r\n//   const canvasRef = useRef(null);\r\n//   const [player, setPlayer] = useState(initialPlayerState);\r\n//   const [enemy, setEnemy] = useState(initialEnemyState);\r\n//   const [keys, setKeys] = useState({\r\n//     a: {\r\n//       pressed: false\r\n//     },\r\n//     d: {\r\n//       pressed: false\r\n//     },\r\n//     ArrowRight: {\r\n//       pressed: false\r\n//     },\r\n//     ArrowLeft: {\r\n//       pressed: false\r\n//     }\r\n//   });\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext('2d');\r\n//     const gravity = 0.7;\r\n\r\n//     // Set canvas dimensions\r\n//     canvas.width = 1024;\r\n//     canvas.height = 576;\r\n\r\n//     // Use the spriteImage as the background\r\n//     const backgroundImage = new Image();\r\n//     backgroundImage.src = spriteImage;\r\n    \r\n//     // Once the image is loaded, draw it on the canvas\r\n//     backgroundImage.onload = () => {\r\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n    \r\n\r\n//     // Other drawing code here\r\n//     // ctx.fillStyle = 'blue';\r\n//     // ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// // Draw the sprite image\r\n// const playerImage = new Image();\r\n// playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\r\n// playerImage.onload = () => {\r\n//   // Draw the player image at the desired position (player.position.x, player.position.y)\r\n//   ctx.drawImage(playerImage, player.position.x, player.position.y);\r\n// };\r\n// };\r\n//     const handleKeyDown = (event) => {\r\n//       // Update the keys state based on the pressed key\r\n//       setKeys((prevKeys) => ({\r\n//         ...prevKeys,\r\n//         [event.key]: {\r\n//           pressed: true\r\n//         }\r\n//       }));\r\n//     };\r\n\r\n//     const handleKeyUp = (event) => {\r\n//       // Update the keys state when a key is released\r\n//       setKeys((prevKeys) => ({\r\n//         ...prevKeys,\r\n//         [event.key]: {\r\n//           pressed: false\r\n//         }\r\n//       }));\r\n//     };\r\n\r\n//     window.addEventListener('keydown', handleKeyDown);\r\n//     window.addEventListener('keyup', handleKeyUp);\r\n    \r\n//     // Cleanup (optional)\r\n//     return () => {\r\n//       // You can perform cleanup here if needed\r\n//     };\r\n//   }, []); // Empty dependency array to run only once\r\n\r\n//   return (\r\n//     <div>\r\n//       <canvas ref={canvasRef}></canvas>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CanvasDrawing;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nclass Fighter {\r\n  constructor({\r\n    position,\r\n    velocity,\r\n    offset,\r\n    imageSrc,\r\n    framesMax,\r\n    scale,\r\n    sprites,\r\n  }) {\r\n    this.position = position;\r\n    this.velocity = velocity;\r\n    this.offset = offset;\r\n    this.imageSrc = imageSrc;\r\n    this.framesMax = framesMax;\r\n    this.scale = scale;\r\n    this.sprites = sprites;\r\n    this.currentSprite = 'idle'; // Set an initial sprite state\r\n  }\r\n\r\n  // You can add methods for animations or game logic here\r\n}\r\n\r\nfunction PlayerComponent() {\r\n  const [player, setPlayer] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Create the player object when the component mounts\r\n    const playerInstance = new Fighter({\r\n      position: { x: 0, y: 0 },\r\n      velocity: { x: 0, y: 0 },\r\n      offset: { x: 215, y: 157 },\r\n      imageSrc: './img/kenji/Idle.png',\r\n      framesMax: 8,\r\n      scale: 2.5,\r\n      sprites: {\r\n        idle: {\r\n          imageSrc: './img/kenji/Idle.png',\r\n          framesMax: 8,\r\n        },\r\n        // Add more sprite animations here if needed\r\n      },\r\n    });\r\n\r\n    setPlayer(playerInstance);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {player && ( // Check if player exists\r\n        <img\r\n          src={player.imageSrc}\r\n          // alt=\"Player Character\"\r\n          style={{\r\n            position: 'absolute',\r\n            left: player.position.x + 'px',\r\n            top: player.position.y + 'px',\r\n            width: player.width * player.scale + 'px',\r\n            height: player.height * player.scale + 'px',\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlayerComponent;\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAAC;IACVC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,QAAQ;IACRC,SAAS;IACTC,KAAK;IACLC;EACF,CAAC,EAAE;IACD,IAAI,CAACN,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,aAAa,GAAG,MAAM,CAAC,CAAC;EAC/B;;EAEA;AACF;;AAEA,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,cAAc,GAAG,IAAId,OAAO,CAAC;MACjCE,QAAQ,EAAE;QAAEa,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC;MACxBb,QAAQ,EAAE;QAAEY,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC;MACxBZ,MAAM,EAAE;QAAEW,CAAC,EAAE,GAAG;QAAEC,CAAC,EAAE;MAAI,CAAC;MAC1BX,QAAQ,EAAE,sBAAsB;MAChCC,SAAS,EAAE,CAAC;MACZC,KAAK,EAAE,GAAG;MACVC,OAAO,EAAE;QACPS,IAAI,EAAE;UACJZ,QAAQ,EAAE,sBAAsB;UAChCC,SAAS,EAAE;QACb;QACA;MACF;IACF,CAAC,CAAC;;IAEFO,SAAS,CAACC,cAAc,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEf,OAAA;IAAAmB,QAAA,EACGN,MAAM;IAAA;IAAM;IACXb,OAAA;MACEoB,GAAG,EAAEP,MAAM,CAACP;MACZ;MAAA;MACAe,KAAK,EAAE;QACLlB,QAAQ,EAAE,UAAU;QACpBmB,IAAI,EAAET,MAAM,CAACV,QAAQ,CAACa,CAAC,GAAG,IAAI;QAC9BO,GAAG,EAAEV,MAAM,CAACV,QAAQ,CAACc,CAAC,GAAG,IAAI;QAC7BO,KAAK,EAAEX,MAAM,CAACW,KAAK,GAAGX,MAAM,CAACL,KAAK,GAAG,IAAI;QACzCiB,MAAM,EAAEZ,MAAM,CAACY,MAAM,GAAGZ,MAAM,CAACL,KAAK,GAAG;MACzC;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACjB,EAAA,CAzCQD,eAAe;AAAAmB,EAAA,GAAfnB,eAAe;AA2CxB,eAAeA,eAAe;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}