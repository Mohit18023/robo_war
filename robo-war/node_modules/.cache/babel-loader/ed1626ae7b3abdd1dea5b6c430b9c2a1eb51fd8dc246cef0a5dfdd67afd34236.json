{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport spriteImage from './Images/background.png';\nimport IdleImage from './Images/Idle.png';\n// import { Center, Flex, position } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = props => {\n  _s();\n  const canvasRef = useRef(null);\n  let player;\n  let enemy;\n  let backgroundImage;\n  let timer = 60;\n  let timerId;\n  const keys = {\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    ArrowRight: {\n      pressed: false\n    },\n    ArrowLeft: {\n      pressed: false\n    }\n  };\n  let lastkey = ''; // Initialize lastkey with an empty string\n\n  function determineWinner({\n    player,\n    enemy,\n    timerId\n  }) {\n    clearTimeout(timerId);\n    document.querySelector('#displayText').style.display = 'flex';\n    if (player.health === enemy.health) {\n      document.querySelector('#displayText').innerHTML = 'Tie';\n    } else if (player.health > enemy.health) {\n      document.querySelector('#displayText').innerHTML = 'Player 1 Wins!!';\n    } else if (enemy.health > player.health) {\n      document.querySelector('#displayText').innerHTML = 'Player 2 Wins!!';\n    }\n  }\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 576;\n    backgroundImage = new Image();\n    backgroundImage.src = spriteImage;\n    player = new Fighter({\n      position: {\n        x: 150,\n        y: 425\n      },\n      velocity: {\n        x: 0,\n        y: 0\n      },\n      offset: {\n        x: 0,\n        y: 0\n      },\n      imageSrc: IdleImage,\n      frameMax: 5,\n      scale: 1\n    });\n    // const IdleImageFrameWidth = 284;\n    // const IdleImageFrameHeight = 600;\n    // const IdleImageTotalFrames = 5;\n    // const IdleImageAnimationSpeed = 10;\n\n    enemy = new Fighter({\n      position: {\n        x: 450,\n        y: 425\n      },\n      velocity: {\n        x: 0,\n        y: 0\n      },\n      offset: {\n        x: 50,\n        y: 0\n      },\n      color: 'blue'\n    });\n    backgroundImage.onload = () => {\n      // Draw the background image\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n      // Draw the initial sprites\n      player.draw(ctx);\n      enemy.draw(ctx);\n    };\n\n    // Event listeners\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    function handleKeyDown(event) {\n      switch (event.key) {\n        case 'd':\n          keys.d.pressed = true;\n          lastkey = 'd';\n          break;\n        case 'a':\n          keys.a.pressed = true;\n          lastkey = 'a';\n          break;\n        case ' ':\n          player.attack();\n          break;\n        case 'ArrowRight':\n          keys.ArrowRight.pressed = true;\n          enemy.lastkey = 'ArrowRight';\n          break;\n        case 'ArrowLeft':\n          keys.ArrowLeft.pressed = true;\n          enemy.lastkey = 'ArrowLeft';\n          break;\n        case 'ArrowDown':\n          enemy.isAttacking = true;\n          break;\n      }\n    }\n    function handleKeyUp(event) {\n      switch (event.key) {\n        case 'd':\n          keys.d.pressed = false;\n          break;\n        case 'a':\n          keys.a.pressed = false;\n          break;\n        case 'ArrowRight':\n          keys.ArrowRight.pressed = false;\n          enemy.lastkey = 'ArrowRight';\n          break;\n        case 'ArrowLeft':\n          keys.ArrowLeft.pressed = false;\n          enemy.lastkey = 'ArrowLeft';\n          break;\n      }\n    }\n\n    //   function decreaseTimer() {\n    //     if (timer > 0) {\n    //       setTimeout(() => {\n    //         timer--;\n    //         document.querySelector('#timer').innerHTML = timer;\n    //         decreaseTimer(); // Call itself for the next second\n    //       }, 1000);\n    //     }\n\n    //     if (timer === 0){\n    //       determineWinner({ player, enemy });\n    //   }\n    // }\n    function decreaseTimer() {\n      if (timer > 0 && player.health > 0 && enemy.health > 0) {\n        timerId = setTimeout(() => {\n          timer--;\n          document.querySelector('#timer').innerHTML = timer;\n          decreaseTimer(); // Call itself for the next second\n        }, 1000);\n      }\n      if (player.health <= 0 || enemy.health <= 0) {\n        determineWinner({\n          player,\n          enemy,\n          timerId\n        });\n      }\n    }\n    decreaseTimer(); // Start the countdown\n  }, []);\n  const gravity = 0.007;\n  class Sprite {\n    constructor({\n      position,\n      velocity,\n      color = 'red',\n      offset = {\n        x: 0,\n        y: 0\n      }\n    }) {\n      this.position = position;\n      this.velocity = velocity;\n      this.height = 150;\n      this.width = 50;\n      this.attackbox = {\n        position: {\n          x: this.position.x,\n          y: this.position.y\n        },\n        offset,\n        width: 100,\n        height: 50\n      };\n      this.isAttacking = '';\n      this.color = color;\n      this.health = 100;\n    }\n    draw(ctx) {\n      ctx.fillStyle = this.color;\n      ctx.fillRect(this.position.x, this.position.y, 50, this.height);\n      //attack box\n      if (this.isAttacking) {\n        ctx.fillStyle = 'green';\n        ctx.fillRect(this.attackbox.position.x, this.attackbox.position.y, this.attackbox.width, this.attackbox.height);\n      }\n    }\n    update(ctx) {\n      this.attackbox.position.x = this.position.x - this.attackbox.offset.x;\n      this.attackbox.position.y = this.position.y;\n      this.animateFrames();\n      this.position.x += this.velocity.x;\n      this.position.y += this.velocity.y;\n      if (this.position.y + this.height >= ctx.height) {\n        this.velocity.y = 0;\n        this.position.y = ctx.height - this.height;\n      } else {\n        this.velocity.y += gravity;\n      }\n    }\n    attack() {\n      this.isAttacking = true;\n      setTimeout(() => {\n        this.isAttacking = false;\n      }, 100);\n    }\n  }\n  class Fighter {\n    constructor({\n      position,\n      velocity,\n      color = 'red',\n      offset = {\n        x: 0,\n        y: 0\n      },\n      imageSrc,\n      scale = 5,\n      frameMax = 1\n    }) {\n      this.position = position;\n      this.velocity = velocity;\n      this.height = 150;\n      this.width = 150;\n      this.image = new Image();\n      this.image.src = IdleImage;\n      this.scale = scale;\n      this.frameMax = frameMax;\n      this.framesCurrent = 5;\n      this.frameElapsed = 0;\n      this.framesHold = 1;\n      this.attackbox = {\n        position: {\n          x: this.position.x,\n          y: this.position.y\n        },\n        offset,\n        width: 150,\n        height: 10\n      };\n      this.isAttacking = '';\n      this.color = color;\n      this.health = 100;\n    }\n    draw(ctx) {\n      if (this.image.complete) {\n        ctx.drawImage(this.image, this.position.x, this.position.y, 50, this.height);\n      }\n      // ctx.fillStyle = this.color;\n      // ctx.fillRect(this.position.x, this.position.y, 50, this.height);\n      //attack box\n      if (this.isAttacking) {\n        ctx.fillStyle = 'green';\n        ctx.fillRect(this.attackbox.position.x, this.attackbox.position.y, this.attackbox.width, this.attackbox.height);\n      }\n    }\n    animateFrames() {\n      this.frameElapsed++;\n      if (this.frameElapsed % this.framesHold === 0) {\n        if (this.framesCurrent < this.framesMax - 1) {\n          this.framesCurrent++;\n        } else {\n          this.framesCurrent = 0;\n        }\n      }\n    }\n    update(ctx) {\n      this.attackbox.position.x = this.position.x - this.attackbox.offset.x;\n      this.attackbox.position.y = this.position.y;\n      this.animateFrames();\n      this.position.x += this.velocity.x;\n      this.position.y += this.velocity.y;\n      if (this.position.y + this.height >= ctx.height) {\n        this.velocity.y = 0;\n        this.position.y = ctx.height - this.height;\n      } else {\n        this.velocity.y += gravity;\n      }\n    }\n    attack() {\n      this.isAttacking = true;\n      setTimeout(() => {\n        this.isAttacking = false;\n      }, 100);\n    }\n  }\n  function rectangularCollision({\n    rectangle1,\n    rectangle2\n  }) {\n    return rectangle1.attackbox.position.x + rectangle1.attackbox.width >= rectangle2.position.x && rectangle1.attackbox.position.x <= rectangle2.position.x + rectangle2.width && rectangle1.attackbox.position.y + rectangle1.attackbox.height >= rectangle2.position.y && rectangle1.attackbox.position.y <= rectangle2.position.y + rectangle2.height;\n  }\n  function animate() {\n    const canvas = canvasRef.current;\n    if (canvas && player && enemy) {\n      const ctx = canvas.getContext('2d');\n\n      // Clear the canvas\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw the background image\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n      // Update and draw the sprites\n      player.update(canvas);\n      player.draw(ctx);\n      enemy.update(canvas);\n      enemy.draw(ctx);\n      player.velocity.x = 0;\n      enemy.velocity.x = 0;\n      if (keys.a.pressed && lastkey === 'a') {\n        player.velocity.x = -5;\n      } else if (keys.d.pressed && lastkey === 'd') {\n        player.velocity.x = 5;\n      }\n      if (keys.ArrowLeft.pressed && enemy.lastkey === 'ArrowLeft') {\n        enemy.velocity.x = -5;\n      } else if (keys.ArrowRight.pressed && enemy.lastkey === 'ArrowRight') {\n        enemy.velocity.x = 5;\n      }\n      // detect for collision\n      if (rectangularCollision({\n        rectangle1: player,\n        rectangle2: enemy\n      }) && player.isAttacking) {\n        player.isAttacking = false;\n        enemy.health -= 20;\n        document.querySelector('#enemyHealth').style.width = enemy.health + '%';\n        console.log('go');\n      }\n      if (rectangularCollision({\n        rectangle1: enemy,\n        rectangle2: player\n      }) && enemy.isAttacking) {\n        enemy.isAttacking = false;\n        player.health -= 20;\n        document.querySelector('#playerHealth').style.width = player.health + '%';\n        console.log('enemy attack successful');\n      }\n\n      // end game based on health\n      if (player.health <= 0 || player.health <= 0) {\n        determineWinner({\n          player,\n          enemy,\n          timerId\n        });\n      }\n    }\n    window.requestAnimationFrame(animate);\n  }\n  useEffect(() => {\n    animate(); // Start the animation loop after the initial render\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        display: 'flex',\n        width: '100%',\n        alignItems: 'center',\n        padding: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          height: '30px',\n          width: '100%',\n          display: 'flex',\n          justifyContent: 'flex-end'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: 'yellow',\n            height: '30px',\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"playerHealth\",\n          style: {\n            position: 'absolute',\n            background: 'blue',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"timer\",\n        style: {\n          backgroundColor: 'red',\n          width: '100px',\n          height: '100px',\n          flexShrink: 0,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: timer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          height: '30px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: 'yellow',\n            height: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"enemyHealth\",\n          style: {\n            position: 'absolute',\n            background: 'blue',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"displayText\",\n      style: {\n        position: 'absolute',\n        color: 'black',\n        alignItems: 'center',\n        justifyContent: 'center',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        display: 'none'\n      },\n      children: \"Tie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        boxSizing: 'border-box'\n      },\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"classes.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 398,\n    columnNumber: 3\n  }, this);\n};\n_s(Canvas, \"1O11hef6JMAr7xpSnL0aZ5Ib60Q=\");\n_c = Canvas;\nexport default Canvas;\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import spriteImage from './Images/background.png';\n// import { Center, Flex, position } from '@chakra-ui/react';\n\n// const Canvas = (props) => {\n//   const canvasRef = useRef(null);\n//   let player;\n//   let enemy;\n//   let backgroundImage;\n//   let timer = 60;\n//   let timerId;\n//   const keys = {\n//     a: {\n//       pressed: false,\n//     },\n//     d: {\n//       pressed: false,\n//     },\n//     ArrowRight: {\n//       pressed: false,\n//     },\n//     ArrowLeft: {\n//       pressed: false,\n//     },\n//   };\n//   let lastkey = ''; // Initialize lastkey with an empty string\n\n//   function determineWinner({ player, enemy, timerId }){\n//     clearTimeout(timerId);\n//     document.querySelector('#displayText').style.display = 'flex';\n//       if (player.health === enemy.health){\n//         document.querySelector('#displayText').innerHTML = 'Tie';\n//       }\n//       else if(player.health > enemy.health){\n//         document.querySelector('#displayText').innerHTML = 'Player 1 Wins!!';\n//       }\n//       else if(enemy.health > player.health){\n//         document.querySelector('#displayText').innerHTML = 'Player 2 Wins!!';\n//       }\n//   }\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 1024;\n//     canvas.height = 576;\n\n//     backgroundImage = new Image();\n//     backgroundImage.src = spriteImage;\n\n//     player = new Sprite({\n//       position: { x: 150, y: 425 },\n//       velocity: { x: 0, y: 0 },\n//       offset: {\n//         x:0,\n//         y: 0\n//       }\n//     });\n\n//     enemy = new Sprite({\n//       position: { x: 450, y: 425 },\n//       velocity: { x: 0, y: 0 },\n//       offset: {\n//         x:50,\n//         y:0\n//       },\n//       color: 'blue'\n\n//     });\n\n//     backgroundImage.onload = () => {\n//       // Draw the background image\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n//       // Draw the initial sprites\n//       player.draw(ctx);\n//       enemy.draw(ctx);\n//     };\n\n//     // Event listeners\n//     window.addEventListener('keydown', handleKeyDown);\n//     window.addEventListener('keyup', handleKeyUp);\n\n//     function handleKeyDown(event) {\n//       switch (event.key) {\n//         case 'd':\n//           keys.d.pressed = true;\n//           lastkey = 'd';\n//           break;\n//         case 'a':\n//           keys.a.pressed = true;\n//           lastkey = 'a';\n//           break;\n//           case ' ':\n//             player.attack()  \n//             break;\n//         case 'ArrowRight':\n//           keys.ArrowRight.pressed = true;\n//           enemy.lastkey = 'ArrowRight';\n//           break;\n//           case 'ArrowLeft':\n//           keys.ArrowLeft.pressed = true;\n//           enemy.lastkey = 'ArrowLeft';\n//           break;\n//           case 'ArrowDown':\n//             enemy.isAttacking = true;\n//             break\n//       }\n//     }\n\n//     function handleKeyUp(event) {\n//       switch (event.key) {\n//         case 'd':\n//           keys.d.pressed = false;\n//           break;\n//         case 'a':\n//           keys.a.pressed = false;\n//           break;\n//         case 'ArrowRight':\n//           keys.ArrowRight.pressed = false;\n//           enemy.lastkey = 'ArrowRight';\n//           break;\n//           case 'ArrowLeft':\n//           keys.ArrowLeft.pressed = false;\n//           enemy.lastkey = 'ArrowLeft';\n//           break;\n//       }\n//     }\n//   function decreaseTimer() {\n//     if (timer > 0 && player.health > 0 && enemy.health > 0) {\n//       timerId = setTimeout(() => {\n//         timer--;\n//         document.querySelector('#timer').innerHTML = timer;\n//         decreaseTimer(); // Call itself for the next second\n//       }, 1000);\n//     }\n\n//     if (player.health <= 0 || enemy.health <= 0) {\n//       determineWinner({ player, enemy, timerId });\n//     }\n//   }\n\n//     decreaseTimer(); // Start the countdown\n\n//   }, []);\n\n//   const gravity = 0.007;\n\n//   class Sprite {\n//     constructor({ position, velocity,color = 'red', offset= { x: 0, y: 0 } }) {\n//       this.position = position;\n//       this.velocity = velocity;\n//       this.height = 150;\n//       this.width = 50;\n//       this.attackbox = {\n//         position: {\n//           x:this.position.x,\n//           y:this.position.y\n//         },\n//         offset,\n\n//         width: 100 ,\n//         height: 50\n//       }\n//       this.isAttacking = '';\n//       this.color = color;\n//       this.health = 100\n//     }\n\n//     draw(ctx) {\n//       ctx.fillStyle = this.color;\n//       ctx.fillRect(this.position.x, this.position.y, 50, this.height);\n//       //attack box\n//       if (this.isAttacking) {\n\n//       ctx.fillStyle = 'green';\n//       ctx.fillRect(this.attackbox.position.x, this.attackbox.position.y , this.attackbox.width , this.attackbox.height)\n//     }\n//   }\n\n//     update(ctx) {\n//       this.attackbox.position.x = this.position.x - this.attackbox.offset.x;\n//       this.attackbox.position.y = this.position.y;\n\n//       this.position.x += this.velocity.x;\n//       this.position.y += this.velocity.y;\n//       if (this.position.y + this.height >= ctx.height) {\n//         this.velocity.y = 0;\n//         this.position.y = ctx.height - this.height;\n//       } else {\n//         this.velocity.y += gravity;\n//       }\n//     }\n//       attack() {\n//         this.isAttacking = true\n//         setTimeout(() => {\n//           this.isAttacking = false\n//         }, 100);\n//       }\n//     }\n\n//   function rectangularCollision({rectangle1, rectangle2}) {\n//     return (\n//       rectangle1.attackbox.position.x + rectangle1.attackbox.width >= \n//       rectangle2.position.x && rectangle1.attackbox.position.x <= rectangle2.position.x + rectangle2.width &&\n//         rectangle1.attackbox.position.y + rectangle1.attackbox.height >= rectangle2.position.y\n//         && rectangle1.attackbox.position.y <= rectangle2.position.y + rectangle2.height\n\n//     );\n//   }\n\n//   function animate() {\n//     const canvas = canvasRef.current;\n\n//      if (canvas && player && enemy) {\n//       const ctx = canvas.getContext('2d');\n\n//       // Clear the canvas\n//       ctx.fillStyle = 'black';\n//       ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n//       // Draw the background image\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n//       // Update and draw the sprites\n//       player.update(canvas);\n//       player.draw(ctx);\n\n//       enemy.update(canvas);\n//       enemy.draw(ctx);\n\n//       player.velocity.x = 0;\n//       enemy.velocity.x = 0;\n\n//       if (keys.a.pressed && lastkey === 'a') {\n//         player.velocity.x = -5;\n//       } else if (keys.d.pressed && lastkey === 'd') {\n//         player.velocity.x = 5;\n//       }\n//       if (keys.ArrowLeft.pressed && enemy.lastkey === 'ArrowLeft') {\n//         enemy.velocity.x = -5;\n//       } else if (keys.ArrowRight.pressed && enemy.lastkey === 'ArrowRight') {\n//         enemy.velocity.x = 5;\n//       }\n//       // detect for collision\n//       if (rectangularCollision({\n//         rectangle1: player,\n//         rectangle2: enemy\n//       }) &&\n//         player.isAttacking) {\n//           player.isAttacking = false\n//           enemy.health -= 20\n//         document.querySelector('#enemyHealth').style.width = enemy.health + '%'\n//         console.log('go');\n//       }\n\n//       if (rectangularCollision({\n//         rectangle1: enemy,\n//         rectangle2: player\n//       }) &&\n//         enemy.isAttacking) {\n//           enemy.isAttacking = false\n//           player.health -= 20\n//             document.querySelector('#playerHealth').style.width = player.health + '%'\n//         console.log('enemy attack successful');\n//       }\n\n//       // end game based on health\n//       if(player.health <= 0 || player.health <=0) {\n//         determineWinner({ player, enemy, timerId });\n//       }\n\n//     }\n\n//     window.requestAnimationFrame(animate);\n//   }\n\n//   useEffect(() => {\n//     animate(); // Start the animation loop after the initial render\n//   }, []);\n\n// return (\n//   <div style={{ position: 'relative', display: 'inline-block' }}>\n//     <div\n//       style={{\n//         position: 'absolute',\n//         display: 'flex',\n//         width: '100%',\n//         alignItems: 'center',\n//         padding: '20px',\n//       }}\n//     >\n//       {/* Player Health Bar */}\n//       <div style={{ position: 'relative', height: '30px', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>\n//         <div style={{ backgroundColor: 'yellow', height: '30px', width: '100%' }}></div>\n//         <div\n//           id=\"playerHealth\"\n//           style={{\n//             position: 'absolute',\n//             background: 'blue',\n//             top: 0,\n//             right: 0,\n//             bottom: 0,\n//             width: '100%',\n//           }}\n//         ></div>\n//       </div>\n\n//       {/* Timer */}\n//       <div\n//       id = \"timer\"\n//        style={{ \n//         backgroundColor: 'red', \n//         width: '100px', \n//         height: '100px', \n//         flexShrink: 0,\n//         display: 'flex',\n//         alignItems: 'center',\n//         justifyContent: 'center',\n//         }}\n//       >\n//         {timer}\n//       </div>\n\n//       {/* Enemy Health Bar */}\n//       <div style={{ position: 'relative', height: '30px', width: '100%' }}>\n//         <div style={{ backgroundColor: 'yellow', height: '30px' }}></div>\n//         <div\n//           id=\"enemyHealth\"\n//           style={{\n//             position: 'absolute',\n//             background: 'blue',\n//             top: 0,\n//             right: 0,\n//             bottom: 0,\n//             left: 0,\n//           }}\n//         ></div>\n//       </div>\n//       <div></div>\n//     </div>\n//     <div\n//     id=\"displayText\"\n//      style={{\n//       position: 'absolute', \n//       color: 'black',\n//       alignItems: 'center', \n//       justifyContent:'center',\n//       top: 0,\n//       right : 0,\n//       bottom : 0,\n//       left: 0,\n//       display: 'none'\n//       }}>Tie\n//       </div>\n//     <canvas ref={canvasRef} style={{ boxSizing: 'border-box' }} {...props} />\n//   </div>\n// );\n// };\n\n// export default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","spriteImage","IdleImage","jsxDEV","_jsxDEV","Canvas","props","_s","canvasRef","player","enemy","backgroundImage","timer","timerId","keys","a","pressed","d","ArrowRight","ArrowLeft","lastkey","determineWinner","clearTimeout","document","querySelector","style","display","health","innerHTML","canvas","current","ctx","getContext","width","height","Image","src","Fighter","position","x","y","velocity","offset","imageSrc","frameMax","scale","color","onload","drawImage","draw","window","addEventListener","handleKeyDown","handleKeyUp","event","key","attack","isAttacking","decreaseTimer","setTimeout","gravity","Sprite","constructor","attackbox","fillStyle","fillRect","update","animateFrames","image","framesCurrent","frameElapsed","framesHold","complete","framesMax","rectangularCollision","rectangle1","rectangle2","animate","console","log","requestAnimationFrame","children","alignItems","padding","justifyContent","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","id","background","top","right","bottom","flexShrink","left","ref","boxSizing","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Canvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport spriteImage from './Images/background.png';\r\nimport IdleImage from './Images/Idle.png';\r\n// import { Center, Flex, position } from '@chakra-ui/react';\r\n\r\nconst Canvas = (props) => {\r\n  const canvasRef = useRef(null);\r\n  let player;\r\n  let enemy;\r\n  let backgroundImage;\r\n  let timer = 60;\r\n  let timerId;\r\n  const keys = {\r\n    a: {\r\n      pressed: false,\r\n    },\r\n    d: {\r\n      pressed: false,\r\n    },\r\n    ArrowRight: {\r\n      pressed: false,\r\n    },\r\n    ArrowLeft: {\r\n      pressed: false,\r\n    },\r\n  };\r\n  let lastkey = ''; // Initialize lastkey with an empty string\r\n\r\n  function determineWinner({ player, enemy, timerId }){\r\n    clearTimeout(timerId);\r\n    document.querySelector('#displayText').style.display = 'flex';\r\n      if (player.health === enemy.health){\r\n        document.querySelector('#displayText').innerHTML = 'Tie';\r\n      }\r\n      else if(player.health > enemy.health){\r\n        document.querySelector('#displayText').innerHTML = 'Player 1 Wins!!';\r\n      }\r\n      else if(enemy.health > player.health){\r\n        document.querySelector('#displayText').innerHTML = 'Player 2 Wins!!';\r\n      }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    backgroundImage = new Image();\r\n    backgroundImage.src = spriteImage;\r\n\r\n    player = new Fighter({\r\n      position: { x: 150, y: 425 },\r\n      velocity: { x: 0, y: 0 },\r\n      offset: {\r\n        x:0,\r\n        y: 0\r\n      },\r\n      \r\n      imageSrc: IdleImage,\r\n      frameMax: 5,\r\n      scale: 1\r\n      \r\n    });\r\n    // const IdleImageFrameWidth = 284;\r\n    // const IdleImageFrameHeight = 600;\r\n    // const IdleImageTotalFrames = 5;\r\n    // const IdleImageAnimationSpeed = 10;\r\n    \r\n    enemy = new Fighter({\r\n      position: { x: 450, y: 425 },\r\n      velocity: { x: 0, y: 0 },\r\n      offset: {\r\n        x:50,\r\n        y:0\r\n      },\r\n      color: 'blue'\r\n\r\n    });\r\n\r\n    backgroundImage.onload = () => {\r\n      // Draw the background image\r\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw the initial sprites\r\n      player.draw(ctx);\r\n      enemy.draw(ctx);\r\n    };\r\n\r\n    // Event listeners\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n\r\n    function handleKeyDown(event) {\r\n      switch (event.key) {\r\n        case 'd':\r\n          keys.d.pressed = true;\r\n          lastkey = 'd';\r\n          break;\r\n        case 'a':\r\n          keys.a.pressed = true;\r\n          lastkey = 'a';\r\n          break;\r\n          case ' ':\r\n            player.attack()  \r\n            break;\r\n        case 'ArrowRight':\r\n          keys.ArrowRight.pressed = true;\r\n          enemy.lastkey = 'ArrowRight';\r\n          break;\r\n          case 'ArrowLeft':\r\n          keys.ArrowLeft.pressed = true;\r\n          enemy.lastkey = 'ArrowLeft';\r\n          break;\r\n          case 'ArrowDown':\r\n            enemy.isAttacking = true;\r\n            break\r\n      }\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.key) {\r\n        case 'd':\r\n          keys.d.pressed = false;\r\n          break;\r\n        case 'a':\r\n          keys.a.pressed = false;\r\n          break;\r\n        case 'ArrowRight':\r\n          keys.ArrowRight.pressed = false;\r\n          enemy.lastkey = 'ArrowRight';\r\n          break;\r\n          case 'ArrowLeft':\r\n          keys.ArrowLeft.pressed = false;\r\n          enemy.lastkey = 'ArrowLeft';\r\n          break;\r\n      }\r\n    }\r\n\r\n    \r\n    \r\n  //   function decreaseTimer() {\r\n  //     if (timer > 0) {\r\n  //       setTimeout(() => {\r\n  //         timer--;\r\n  //         document.querySelector('#timer').innerHTML = timer;\r\n  //         decreaseTimer(); // Call itself for the next second\r\n  //       }, 1000);\r\n  //     }\r\n      \r\n  //     if (timer === 0){\r\n  //       determineWinner({ player, enemy });\r\n  //   }\r\n  // }\r\n  function decreaseTimer() {\r\n    if (timer > 0 && player.health > 0 && enemy.health > 0) {\r\n      timerId = setTimeout(() => {\r\n        timer--;\r\n        document.querySelector('#timer').innerHTML = timer;\r\n        decreaseTimer(); // Call itself for the next second\r\n      }, 1000);\r\n    }\r\n  \r\n    if (player.health <= 0 || enemy.health <= 0) {\r\n      determineWinner({ player, enemy, timerId });\r\n    }\r\n  }\r\n  \r\n    decreaseTimer(); // Start the countdown\r\n\r\n  }, []);\r\n\r\n  const gravity = 0.007;\r\n\r\n  class Sprite {\r\n    constructor({ position, velocity,color = 'red', offset= { x: 0, y: 0 } }) {\r\n      this.position = position;\r\n      this.velocity = velocity;\r\n      this.height = 150;\r\n      this.width = 50;\r\n      this.attackbox = {\r\n        position: {\r\n          x:this.position.x,\r\n          y:this.position.y\r\n        },\r\n        offset,\r\n        \r\n        width: 100 ,\r\n        height: 50\r\n      }\r\n      this.isAttacking = '';\r\n      this.color = color;\r\n      this.health = 100\r\n    }\r\n\r\n    draw(ctx) {\r\n      ctx.fillStyle = this.color;\r\n      ctx.fillRect(this.position.x, this.position.y, 50, this.height);\r\n      //attack box\r\n      if (this.isAttacking) {\r\n\r\n      \r\n      ctx.fillStyle = 'green';\r\n      ctx.fillRect(this.attackbox.position.x, this.attackbox.position.y , this.attackbox.width , this.attackbox.height)\r\n    }\r\n  }\r\n\r\n    update(ctx) {\r\n      this.attackbox.position.x = this.position.x - this.attackbox.offset.x;\r\n      this.attackbox.position.y = this.position.y;\r\nthis.animateFrames();\r\n      this.position.x += this.velocity.x;\r\n      this.position.y += this.velocity.y;\r\n      if (this.position.y + this.height >= ctx.height) {\r\n        this.velocity.y = 0;\r\n        this.position.y = ctx.height - this.height;\r\n      } else {\r\n        this.velocity.y += gravity;\r\n      }\r\n    }\r\n    attack() {\r\n      this.isAttacking = true\r\n      setTimeout(() => {\r\n        this.isAttacking = false\r\n      }, 100\r\n      );\r\n        \r\n      \r\n    }\r\n  }\r\n\r\n  class Fighter {\r\n    constructor({ position, velocity,color = 'red', offset= { x: 0, y: 0 }, imageSrc, scale = 5, frameMax = 1 }) {\r\n      this.position = position;\r\n      this.velocity = velocity;\r\n      this.height = 150;\r\n      this.width = 150;\r\n      this.image = new Image();\r\n      this.image.src = IdleImage;\r\n      this.scale = scale;\r\n      this.frameMax = frameMax;\r\n      this.framesCurrent = 5;\r\n      this.frameElapsed = 0;\r\n      this.framesHold = 1;\r\n     \r\n      this.attackbox = {\r\n        position: {\r\n          x:this.position.x,\r\n          y:this.position.y\r\n        },\r\n        offset,\r\n        \r\n        width: 150 ,\r\n        height: 10\r\n      }\r\n      this.isAttacking = '';\r\n      this.color = color;\r\n      this.health = 100\r\n    }\r\n\r\n    draw(ctx) {\r\n      if (this.image.complete) {\r\n        ctx.drawImage(this.image, this.position.x, this.position.y, 50, this.height);\r\n      }\r\n      // ctx.fillStyle = this.color;\r\n      // ctx.fillRect(this.position.x, this.position.y, 50, this.height);\r\n      //attack box\r\n      if (this.isAttacking) {\r\n\r\n      \r\n      ctx.fillStyle = 'green';\r\n      ctx.fillRect(this.attackbox.position.x, this.attackbox.position.y , this.attackbox.width , this.attackbox.height)\r\n    }\r\n  }\r\n  animateFrames() {\r\n    this.frameElapsed++;\r\nif (this.frameElapsed % this.framesHold === 0) {\r\n  if (this.framesCurrent < this.framesMax - 1) {\r\n    this.framesCurrent++\r\n  }\r\n  else {\r\n    this.framesCurrent = 0\r\n  }\r\n}\r\n  }\r\n\r\n    update(ctx) {\r\n      this.attackbox.position.x = this.position.x - this.attackbox.offset.x;\r\n      this.attackbox.position.y = this.position.y;\r\nthis.animateFrames();\r\n  \r\n      this.position.x += this.velocity.x;\r\n      this.position.y += this.velocity.y;\r\n      if (this.position.y + this.height >= ctx.height) {\r\n        this.velocity.y = 0;\r\n        this.position.y = ctx.height - this.height;\r\n      } else {\r\n        this.velocity.y += gravity;\r\n      }\r\n    }\r\n      attack() {\r\n        this.isAttacking = true\r\n        setTimeout(() => {\r\n          this.isAttacking = false\r\n        }, 100\r\n        );\r\n        \r\n      \r\n    }\r\n  }\r\n\r\n\r\n  \r\n  function rectangularCollision({rectangle1, rectangle2}) {\r\n    return (\r\n      rectangle1.attackbox.position.x + rectangle1.attackbox.width >= \r\n      rectangle2.position.x && rectangle1.attackbox.position.x <= rectangle2.position.x + rectangle2.width &&\r\n        rectangle1.attackbox.position.y + rectangle1.attackbox.height >= rectangle2.position.y\r\n        && rectangle1.attackbox.position.y <= rectangle2.position.y + rectangle2.height\r\n\r\n    );\r\n  }\r\n \r\n\r\n  function animate() {\r\n    const canvas = canvasRef.current;\r\n\r\n     if (canvas && player && enemy) {\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      // Clear the canvas\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw the background image\r\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Update and draw the sprites\r\n      player.update(canvas);\r\n      player.draw(ctx);\r\n\r\n      enemy.update(canvas);\r\n      enemy.draw(ctx);\r\n\r\n      player.velocity.x = 0;\r\n      enemy.velocity.x = 0;\r\n\r\n\r\n      if (keys.a.pressed && lastkey === 'a') {\r\n        player.velocity.x = -5;\r\n      } else if (keys.d.pressed && lastkey === 'd') {\r\n        player.velocity.x = 5;\r\n      }\r\n      if (keys.ArrowLeft.pressed && enemy.lastkey === 'ArrowLeft') {\r\n        enemy.velocity.x = -5;\r\n      } else if (keys.ArrowRight.pressed && enemy.lastkey === 'ArrowRight') {\r\n        enemy.velocity.x = 5;\r\n      }\r\n      // detect for collision\r\n      if (rectangularCollision({\r\n        rectangle1: player,\r\n        rectangle2: enemy\r\n      }) &&\r\n        player.isAttacking) {\r\n          player.isAttacking = false\r\n          enemy.health -= 20\r\n        document.querySelector('#enemyHealth').style.width = enemy.health + '%'\r\n        console.log('go');\r\n      }\r\n      \r\n      if (rectangularCollision({\r\n        rectangle1: enemy,\r\n        rectangle2: player\r\n      }) &&\r\n        enemy.isAttacking) {\r\n          enemy.isAttacking = false\r\n          player.health -= 20\r\n            document.querySelector('#playerHealth').style.width = player.health + '%'\r\n        console.log('enemy attack successful');\r\n      }\r\n    \r\n      // end game based on health\r\n      if(player.health <= 0 || player.health <=0) {\r\n        determineWinner({ player, enemy, timerId });\r\n      }\r\n    \r\n    }\r\n    \r\n    window.requestAnimationFrame(animate);\r\n  }\r\n\r\n  useEffect(() => {\r\n    animate(); // Start the animation loop after the initial render\r\n  }, []);\r\n\r\n\r\nreturn (\r\n  <div style={{ position: 'relative', display: 'inline-block' }}>\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        padding: '20px',\r\n      }}\r\n    >\r\n      {/* Player Health Bar */}\r\n      <div style={{ position: 'relative', height: '30px', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>\r\n        <div style={{ backgroundColor: 'yellow', height: '30px', width: '100%' }}></div>\r\n        <div\r\n          id=\"playerHealth\"\r\n          style={{\r\n            position: 'absolute',\r\n            background: 'blue',\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            width: '100%',\r\n          }}\r\n        ></div>\r\n      </div>\r\n\r\n      {/* Timer */}\r\n      <div\r\n      id = \"timer\"\r\n       style={{ \r\n        backgroundColor: 'red', \r\n        width: '100px', \r\n        height: '100px', \r\n        flexShrink: 0,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        }}\r\n      >\r\n        {timer}\r\n      </div>\r\n\r\n      {/* Enemy Health Bar */}\r\n      <div style={{ position: 'relative', height: '30px', width: '100%' }}>\r\n        <div style={{ backgroundColor: 'yellow', height: '30px' }}></div>\r\n        <div\r\n          id=\"enemyHealth\"\r\n          style={{\r\n            position: 'absolute',\r\n            background: 'blue',\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <div></div>\r\n    </div>\r\n    <div\r\n    id=\"displayText\"\r\n     style={{\r\n      position: 'absolute', \r\n      color: 'black',\r\n      alignItems: 'center', \r\n      justifyContent:'center',\r\n      top: 0,\r\n      right : 0,\r\n      bottom : 0,\r\n      left: 0,\r\n      display: 'none'\r\n      }}>Tie\r\n      </div>\r\n    <canvas ref={canvasRef} style={{ boxSizing: 'border-box' }} {...props} />\r\n    <script src=\"classes.js\"></script>\r\n  </div>\r\n  \r\n);\r\n};\r\n\r\nexport default Canvas;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useRef, useEffect, useState } from 'react';\r\n// import spriteImage from './Images/background.png';\r\n// import { Center, Flex, position } from '@chakra-ui/react';\r\n\r\n// const Canvas = (props) => {\r\n//   const canvasRef = useRef(null);\r\n//   let player;\r\n//   let enemy;\r\n//   let backgroundImage;\r\n//   let timer = 60;\r\n//   let timerId;\r\n//   const keys = {\r\n//     a: {\r\n//       pressed: false,\r\n//     },\r\n//     d: {\r\n//       pressed: false,\r\n//     },\r\n//     ArrowRight: {\r\n//       pressed: false,\r\n//     },\r\n//     ArrowLeft: {\r\n//       pressed: false,\r\n//     },\r\n//   };\r\n//   let lastkey = ''; // Initialize lastkey with an empty string\r\n\r\n//   function determineWinner({ player, enemy, timerId }){\r\n//     clearTimeout(timerId);\r\n//     document.querySelector('#displayText').style.display = 'flex';\r\n//       if (player.health === enemy.health){\r\n//         document.querySelector('#displayText').innerHTML = 'Tie';\r\n//       }\r\n//       else if(player.health > enemy.health){\r\n//         document.querySelector('#displayText').innerHTML = 'Player 1 Wins!!';\r\n//       }\r\n//       else if(enemy.health > player.health){\r\n//         document.querySelector('#displayText').innerHTML = 'Player 2 Wins!!';\r\n//       }\r\n//   }\r\n  \r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext('2d');\r\n//     canvas.width = 1024;\r\n//     canvas.height = 576;\r\n\r\n//     backgroundImage = new Image();\r\n//     backgroundImage.src = spriteImage;\r\n\r\n//     player = new Sprite({\r\n//       position: { x: 150, y: 425 },\r\n//       velocity: { x: 0, y: 0 },\r\n//       offset: {\r\n//         x:0,\r\n//         y: 0\r\n//       }\r\n//     });\r\n\r\n//     enemy = new Sprite({\r\n//       position: { x: 450, y: 425 },\r\n//       velocity: { x: 0, y: 0 },\r\n//       offset: {\r\n//         x:50,\r\n//         y:0\r\n//       },\r\n//       color: 'blue'\r\n\r\n//     });\r\n\r\n//     backgroundImage.onload = () => {\r\n//       // Draw the background image\r\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n//       // Draw the initial sprites\r\n//       player.draw(ctx);\r\n//       enemy.draw(ctx);\r\n//     };\r\n\r\n//     // Event listeners\r\n//     window.addEventListener('keydown', handleKeyDown);\r\n//     window.addEventListener('keyup', handleKeyUp);\r\n\r\n//     function handleKeyDown(event) {\r\n//       switch (event.key) {\r\n//         case 'd':\r\n//           keys.d.pressed = true;\r\n//           lastkey = 'd';\r\n//           break;\r\n//         case 'a':\r\n//           keys.a.pressed = true;\r\n//           lastkey = 'a';\r\n//           break;\r\n//           case ' ':\r\n//             player.attack()  \r\n//             break;\r\n//         case 'ArrowRight':\r\n//           keys.ArrowRight.pressed = true;\r\n//           enemy.lastkey = 'ArrowRight';\r\n//           break;\r\n//           case 'ArrowLeft':\r\n//           keys.ArrowLeft.pressed = true;\r\n//           enemy.lastkey = 'ArrowLeft';\r\n//           break;\r\n//           case 'ArrowDown':\r\n//             enemy.isAttacking = true;\r\n//             break\r\n//       }\r\n//     }\r\n\r\n//     function handleKeyUp(event) {\r\n//       switch (event.key) {\r\n//         case 'd':\r\n//           keys.d.pressed = false;\r\n//           break;\r\n//         case 'a':\r\n//           keys.a.pressed = false;\r\n//           break;\r\n//         case 'ArrowRight':\r\n//           keys.ArrowRight.pressed = false;\r\n//           enemy.lastkey = 'ArrowRight';\r\n//           break;\r\n//           case 'ArrowLeft':\r\n//           keys.ArrowLeft.pressed = false;\r\n//           enemy.lastkey = 'ArrowLeft';\r\n//           break;\r\n//       }\r\n//     }\r\n//   function decreaseTimer() {\r\n//     if (timer > 0 && player.health > 0 && enemy.health > 0) {\r\n//       timerId = setTimeout(() => {\r\n//         timer--;\r\n//         document.querySelector('#timer').innerHTML = timer;\r\n//         decreaseTimer(); // Call itself for the next second\r\n//       }, 1000);\r\n//     }\r\n  \r\n//     if (player.health <= 0 || enemy.health <= 0) {\r\n//       determineWinner({ player, enemy, timerId });\r\n//     }\r\n//   }\r\n  \r\n//     decreaseTimer(); // Start the countdown\r\n\r\n//   }, []);\r\n\r\n//   const gravity = 0.007;\r\n\r\n//   class Sprite {\r\n//     constructor({ position, velocity,color = 'red', offset= { x: 0, y: 0 } }) {\r\n//       this.position = position;\r\n//       this.velocity = velocity;\r\n//       this.height = 150;\r\n//       this.width = 50;\r\n//       this.attackbox = {\r\n//         position: {\r\n//           x:this.position.x,\r\n//           y:this.position.y\r\n//         },\r\n//         offset,\r\n        \r\n//         width: 100 ,\r\n//         height: 50\r\n//       }\r\n//       this.isAttacking = '';\r\n//       this.color = color;\r\n//       this.health = 100\r\n//     }\r\n\r\n//     draw(ctx) {\r\n//       ctx.fillStyle = this.color;\r\n//       ctx.fillRect(this.position.x, this.position.y, 50, this.height);\r\n//       //attack box\r\n//       if (this.isAttacking) {\r\n\r\n      \r\n//       ctx.fillStyle = 'green';\r\n//       ctx.fillRect(this.attackbox.position.x, this.attackbox.position.y , this.attackbox.width , this.attackbox.height)\r\n//     }\r\n//   }\r\n\r\n//     update(ctx) {\r\n//       this.attackbox.position.x = this.position.x - this.attackbox.offset.x;\r\n//       this.attackbox.position.y = this.position.y;\r\n\r\n//       this.position.x += this.velocity.x;\r\n//       this.position.y += this.velocity.y;\r\n//       if (this.position.y + this.height >= ctx.height) {\r\n//         this.velocity.y = 0;\r\n//         this.position.y = ctx.height - this.height;\r\n//       } else {\r\n//         this.velocity.y += gravity;\r\n//       }\r\n//     }\r\n//       attack() {\r\n//         this.isAttacking = true\r\n//         setTimeout(() => {\r\n//           this.isAttacking = false\r\n//         }, 100);\r\n//       }\r\n//     }\r\n\r\n  \r\n//   function rectangularCollision({rectangle1, rectangle2}) {\r\n//     return (\r\n//       rectangle1.attackbox.position.x + rectangle1.attackbox.width >= \r\n//       rectangle2.position.x && rectangle1.attackbox.position.x <= rectangle2.position.x + rectangle2.width &&\r\n//         rectangle1.attackbox.position.y + rectangle1.attackbox.height >= rectangle2.position.y\r\n//         && rectangle1.attackbox.position.y <= rectangle2.position.y + rectangle2.height\r\n\r\n//     );\r\n//   }\r\n \r\n\r\n//   function animate() {\r\n//     const canvas = canvasRef.current;\r\n\r\n//      if (canvas && player && enemy) {\r\n//       const ctx = canvas.getContext('2d');\r\n\r\n//       // Clear the canvas\r\n//       ctx.fillStyle = 'black';\r\n//       ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n//       // Draw the background image\r\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n//       // Update and draw the sprites\r\n//       player.update(canvas);\r\n//       player.draw(ctx);\r\n\r\n//       enemy.update(canvas);\r\n//       enemy.draw(ctx);\r\n\r\n//       player.velocity.x = 0;\r\n//       enemy.velocity.x = 0;\r\n\r\n\r\n//       if (keys.a.pressed && lastkey === 'a') {\r\n//         player.velocity.x = -5;\r\n//       } else if (keys.d.pressed && lastkey === 'd') {\r\n//         player.velocity.x = 5;\r\n//       }\r\n//       if (keys.ArrowLeft.pressed && enemy.lastkey === 'ArrowLeft') {\r\n//         enemy.velocity.x = -5;\r\n//       } else if (keys.ArrowRight.pressed && enemy.lastkey === 'ArrowRight') {\r\n//         enemy.velocity.x = 5;\r\n//       }\r\n//       // detect for collision\r\n//       if (rectangularCollision({\r\n//         rectangle1: player,\r\n//         rectangle2: enemy\r\n//       }) &&\r\n//         player.isAttacking) {\r\n//           player.isAttacking = false\r\n//           enemy.health -= 20\r\n//         document.querySelector('#enemyHealth').style.width = enemy.health + '%'\r\n//         console.log('go');\r\n//       }\r\n      \r\n//       if (rectangularCollision({\r\n//         rectangle1: enemy,\r\n//         rectangle2: player\r\n//       }) &&\r\n//         enemy.isAttacking) {\r\n//           enemy.isAttacking = false\r\n//           player.health -= 20\r\n//             document.querySelector('#playerHealth').style.width = player.health + '%'\r\n//         console.log('enemy attack successful');\r\n//       }\r\n    \r\n//       // end game based on health\r\n//       if(player.health <= 0 || player.health <=0) {\r\n//         determineWinner({ player, enemy, timerId });\r\n//       }\r\n    \r\n//     }\r\n    \r\n//     window.requestAnimationFrame(animate);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     animate(); // Start the animation loop after the initial render\r\n//   }, []);\r\n\r\n\r\n// return (\r\n//   <div style={{ position: 'relative', display: 'inline-block' }}>\r\n//     <div\r\n//       style={{\r\n//         position: 'absolute',\r\n//         display: 'flex',\r\n//         width: '100%',\r\n//         alignItems: 'center',\r\n//         padding: '20px',\r\n//       }}\r\n//     >\r\n//       {/* Player Health Bar */}\r\n//       <div style={{ position: 'relative', height: '30px', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>\r\n//         <div style={{ backgroundColor: 'yellow', height: '30px', width: '100%' }}></div>\r\n//         <div\r\n//           id=\"playerHealth\"\r\n//           style={{\r\n//             position: 'absolute',\r\n//             background: 'blue',\r\n//             top: 0,\r\n//             right: 0,\r\n//             bottom: 0,\r\n//             width: '100%',\r\n//           }}\r\n//         ></div>\r\n//       </div>\r\n\r\n//       {/* Timer */}\r\n//       <div\r\n//       id = \"timer\"\r\n//        style={{ \r\n//         backgroundColor: 'red', \r\n//         width: '100px', \r\n//         height: '100px', \r\n//         flexShrink: 0,\r\n//         display: 'flex',\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center',\r\n//         }}\r\n//       >\r\n//         {timer}\r\n//       </div>\r\n\r\n//       {/* Enemy Health Bar */}\r\n//       <div style={{ position: 'relative', height: '30px', width: '100%' }}>\r\n//         <div style={{ backgroundColor: 'yellow', height: '30px' }}></div>\r\n//         <div\r\n//           id=\"enemyHealth\"\r\n//           style={{\r\n//             position: 'absolute',\r\n//             background: 'blue',\r\n//             top: 0,\r\n//             right: 0,\r\n//             bottom: 0,\r\n//             left: 0,\r\n//           }}\r\n//         ></div>\r\n//       </div>\r\n//       <div></div>\r\n//     </div>\r\n//     <div\r\n//     id=\"displayText\"\r\n//      style={{\r\n//       position: 'absolute', \r\n//       color: 'black',\r\n//       alignItems: 'center', \r\n//       justifyContent:'center',\r\n//       top: 0,\r\n//       right : 0,\r\n//       bottom : 0,\r\n//       left: 0,\r\n//       display: 'none'\r\n//       }}>Tie\r\n//       </div>\r\n//     <canvas ref={canvasRef} style={{ boxSizing: 'border-box' }} {...props} />\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// export default Canvas;"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}