{"ast":null,"code":"// import React, { useRef, useEffect, useState } from 'react';\n// import './Components.css'; // Import your component-specific CSS file\n\n// import spriteImage from './Images/background.png';\n// import kenjiIdle from './Images/kenji/Idle.png';\n// import samuraiIdle from './Images/samuraiMack/Idle.png';\n\n// const initialPlayerState = {\n//   position: {\n//     x: 0,\n//     y: 0\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   offset: {\n//     x: 0,\n//     y: 0\n//   },\n//   // imageSrc: './img/samuraiMack/Idle.png',\n//   imageSrc: samuraiIdle,\n//   framesMax: 8,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 157\n//   },\n//   sprites: {\n//     idle: {\n//       // imageSrc: './img/samuraiMack/Idle.png',\n//       imageSrc: samuraiIdle,\n//       framesMax: 8\n//     },\n//     // ... Add other sprite definitions here\n//   },\n//   attackBox: {\n//     offset: {\n//       x: 100,\n//       y: 50\n//     },\n//     width: 160,\n//     height: 50\n//   }\n// };\n// const initialEnemyState = {\n//   position: {\n//     x: 400,\n//     y: 100\n//   },\n//   velocity: {\n//     x: 0,\n//     y: 0\n//   },\n//   color: 'blue',\n//   offset: {\n//     x: -50,\n//     y: 0\n//   },\n//   // imageSrc: './img/kenji/Idle.png',\n//   imageSrc: kenjiIdle,\n//   framesMax: 4,\n//   scale: 2.5,\n//   offset: {\n//     x: 215,\n//     y: 167\n//   },\n//   sprites: {\n//     idle: {\n//       // imageSrc: './img/kenji/Idle.png',\n//       imageSrc: kenjiIdle,\n//       framesMax: 4\n//     },\n//     // ... Add other sprite definitions here\n//   },\n//   attackBox: {\n//     offset: {\n//       x: -170,\n//       y: 50\n//     },\n//     width: 170,\n//     height: 50\n//   }\n// };\n// function CanvasDrawing() {\n//   // Create a ref for the canvas element\n//   const canvasRef = useRef(null);\n//   const [player, setPlayer] = useState(initialPlayerState);\n//   const [enemy, setEnemy] = useState(initialEnemyState);\n//   const [keys, setKeys] = useState({\n//     a: {\n//       pressed: false\n//     },\n//     d: {\n//       pressed: false\n//     },\n//     ArrowRight: {\n//       pressed: false\n//     },\n//     ArrowLeft: {\n//       pressed: false\n//     }\n//   });\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const gravity = 0.7;\n\n//     // Set canvas dimensions\n//     canvas.width = 1024;\n//     canvas.height = 576;\n\n//     // Use the spriteImage as the background\n//     const backgroundImage = new Image();\n//     backgroundImage.src = spriteImage;\n\n//     // Once the image is loaded, draw it on the canvas\n//     backgroundImage.onload = () => {\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n//     // Other drawing code here\n//     // ctx.fillStyle = 'blue';\n//     // ctx.fillRect(0, 0, canvas.width, canvas.height);\n// // Draw the sprite image\n// const playerImage = new Image();\n// // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\n// playerImage.src = kenjiIdle; \n// playerImage.onload = () => {\n//   // Draw the player image at the desired position (player.position.x, player.position.y)\n//   ctx.drawImage(playerImage, player.position.x, player.position.y);\n// };\n// };\n//     const handleKeyDown = (event) => {\n//       // Update the keys state based on the pressed key\n//       setKeys((prevKeys) => ({\n//         ...prevKeys,\n//         [event.key]: {\n//           pressed: true\n//         }\n//       }));\n//     };\n\n//     const handleKeyUp = (event) => {\n//       // Update the keys state when a key is released\n//       setKeys((prevKeys) => ({\n//         ...prevKeys,\n//         [event.key]: {\n//           pressed: false\n//         }\n//       }));\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n//     window.addEventListener('keyup', handleKeyUp);\n\n//     // Cleanup (optional)\n//     return () => {\n//       // You can perform cleanup here if needed\n//     };\n//   }, []); // Empty dependency array to run only once\n\n//   return (\n//     <div>\n//       <canvas ref={canvasRef}></canvas>\n//     </div>\n//   );\n// }\n\n// export default CanvasDrawing;","map":{"version":3,"names":[],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["// import React, { useRef, useEffect, useState } from 'react';\r\n// import './Components.css'; // Import your component-specific CSS file\r\n\r\n// import spriteImage from './Images/background.png';\r\n// import kenjiIdle from './Images/kenji/Idle.png';\r\n// import samuraiIdle from './Images/samuraiMack/Idle.png';\r\n\r\n// const initialPlayerState = {\r\n//   position: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   offset: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   // imageSrc: './img/samuraiMack/Idle.png',\r\n//   imageSrc: samuraiIdle,\r\n//   framesMax: 8,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 157\r\n//   },\r\n//   sprites: {\r\n//     idle: {\r\n//       // imageSrc: './img/samuraiMack/Idle.png',\r\n//       imageSrc: samuraiIdle,\r\n//       framesMax: 8\r\n//     },\r\n//     // ... Add other sprite definitions here\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: 100,\r\n//       y: 50\r\n//     },\r\n//     width: 160,\r\n//     height: 50\r\n//   }\r\n// };\r\n// const initialEnemyState = {\r\n//   position: {\r\n//     x: 400,\r\n//     y: 100\r\n//   },\r\n//   velocity: {\r\n//     x: 0,\r\n//     y: 0\r\n//   },\r\n//   color: 'blue',\r\n//   offset: {\r\n//     x: -50,\r\n//     y: 0\r\n//   },\r\n//   // imageSrc: './img/kenji/Idle.png',\r\n//   imageSrc: kenjiIdle,\r\n//   framesMax: 4,\r\n//   scale: 2.5,\r\n//   offset: {\r\n//     x: 215,\r\n//     y: 167\r\n//   },\r\n//   sprites: {\r\n//     idle: {\r\n//       // imageSrc: './img/kenji/Idle.png',\r\n//       imageSrc: kenjiIdle,\r\n//       framesMax: 4\r\n//     },\r\n//     // ... Add other sprite definitions here\r\n//   },\r\n//   attackBox: {\r\n//     offset: {\r\n//       x: -170,\r\n//       y: 50\r\n//     },\r\n//     width: 170,\r\n//     height: 50\r\n//   }\r\n// };\r\n// function CanvasDrawing() {\r\n//   // Create a ref for the canvas element\r\n//   const canvasRef = useRef(null);\r\n//   const [player, setPlayer] = useState(initialPlayerState);\r\n//   const [enemy, setEnemy] = useState(initialEnemyState);\r\n//   const [keys, setKeys] = useState({\r\n//     a: {\r\n//       pressed: false\r\n//     },\r\n//     d: {\r\n//       pressed: false\r\n//     },\r\n//     ArrowRight: {\r\n//       pressed: false\r\n//     },\r\n//     ArrowLeft: {\r\n//       pressed: false\r\n//     }\r\n//   });\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext('2d');\r\n//     const gravity = 0.7;\r\n\r\n//     // Set canvas dimensions\r\n//     canvas.width = 1024;\r\n//     canvas.height = 576;\r\n\r\n//     // Use the spriteImage as the background\r\n//     const backgroundImage = new Image();\r\n//     backgroundImage.src = spriteImage;\r\n    \r\n//     // Once the image is loaded, draw it on the canvas\r\n//     backgroundImage.onload = () => {\r\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n    \r\n\r\n//     // Other drawing code here\r\n//     // ctx.fillStyle = 'blue';\r\n//     // ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// // Draw the sprite image\r\n// const playerImage = new Image();\r\n// // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\r\n// playerImage.src = kenjiIdle; \r\n// playerImage.onload = () => {\r\n//   // Draw the player image at the desired position (player.position.x, player.position.y)\r\n//   ctx.drawImage(playerImage, player.position.x, player.position.y);\r\n// };\r\n// };\r\n//     const handleKeyDown = (event) => {\r\n//       // Update the keys state based on the pressed key\r\n//       setKeys((prevKeys) => ({\r\n//         ...prevKeys,\r\n//         [event.key]: {\r\n//           pressed: true\r\n//         }\r\n//       }));\r\n//     };\r\n\r\n//     const handleKeyUp = (event) => {\r\n//       // Update the keys state when a key is released\r\n//       setKeys((prevKeys) => ({\r\n//         ...prevKeys,\r\n//         [event.key]: {\r\n//           pressed: false\r\n//         }\r\n//       }));\r\n//     };\r\n\r\n//     window.addEventListener('keydown', handleKeyDown);\r\n//     window.addEventListener('keyup', handleKeyUp);\r\n    \r\n//     // Cleanup (optional)\r\n//     return () => {\r\n//       // You can perform cleanup here if needed\r\n//     };\r\n//   }, []); // Empty dependency array to run only once\r\n\r\n//   return (\r\n//     <div>\r\n//       <canvas ref={canvasRef}></canvas>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CanvasDrawing;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}