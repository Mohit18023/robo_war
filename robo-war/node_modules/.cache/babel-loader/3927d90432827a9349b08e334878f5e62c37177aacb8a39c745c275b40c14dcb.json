{"ast":null,"code":"export class Sprite {\n  constructor({\n    position,\n    imageSrc,\n    scale = 1,\n    framesMax = 1,\n    offset = {\n      x: 0,\n      y: 0\n    }\n  }) {\n    this.position = position;\n    this.width = 50;\n    this.height = 150;\n    this.image = new Image();\n    this.image.src = imageSrc;\n    this.scale = scale;\n    this.framesMax = framesMax;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.offset = offset;\n  }\n  draw() {\n    c.drawImage(this.image, this.framesCurrent * (this.image.width / this.framesMax), 0, this.image.width / this.framesMax, this.image.height, this.position.x - this.offset.x, this.position.y - this.offset.y, this.image.width / this.framesMax * this.scale, this.image.height * this.scale);\n  }\n  animateFrames() {\n    this.framesElapsed++;\n    if (this.framesElapsed % this.framesHold === 0) {\n      if (this.framesCurrent < this.framesMax - 1) {\n        this.framesCurrent++;\n      } else {\n        this.framesCurrent = 0;\n      }\n    }\n  }\n  update() {\n    this.draw();\n    this.animateFrames();\n  }\n}\nexport class Fighter extends Sprite {\n  constructor({\n    position,\n    velocity,\n    color = 'red',\n    imageSrc,\n    scale = 1,\n    framesMax = 1,\n    offset = {\n      x: 0,\n      y: 0\n    },\n    sprites,\n    attackBox = {\n      offset: {},\n      width: undefined,\n      height: undefined\n    }\n  }) {\n    super({\n      position,\n      imageSrc,\n      scale,\n      framesMax,\n      offset\n    });\n    this.velocity = velocity;\n    this.width = 50;\n    this.height = 150;\n    this.lastKey;\n    this.attackBox = {\n      position: {\n        x: this.position.x,\n        y: this.position.y\n      },\n      offset: attackBox.offset,\n      width: attackBox.width,\n      height: attackBox.height\n    };\n    this.color = color;\n    this.isAttacking;\n    this.health = 100;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.sprites = sprites;\n    this.dead = false;\n    for (const sprite in this.sprites) {\n      sprites[sprite].image = new Image();\n      sprites[sprite].image.src = sprites[sprite].imageSrc;\n    }\n  }\n  update() {\n    this.draw();\n    if (!this.dead) this.animateFrames();\n\n    // attack boxes\n    this.attackBox.position.x = this.position.x + this.attackBox.offset.x;\n    this.attackBox.position.y = this.position.y + this.attackBox.offset.y;\n\n    // draw the attack box\n    // c.fillRect(\n    //   this.attackBox.position.x,\n    //   this.attackBox.position.y,\n    //   this.attackBox.width,\n    //   this.attackBox.height\n    // )\n\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // gravity function\n    if (this.position.y + this.height + this.velocity.y >= canvas.height - 96) {\n      this.velocity.y = 0;\n      this.position.y = 330;\n    } else this.velocity.y += gravity;\n  }\n  attack() {\n    this.switchSprite('attack1');\n    this.isAttacking = true;\n  }\n  takeHit() {\n    this.health -= 20;\n    if (this.health <= 0) {\n      this.switchSprite('death');\n    } else this.switchSprite('takeHit');\n  }\n  switchSprite(sprite) {\n    if (this.image === this.sprites.death.image) {\n      if (this.framesCurrent === this.sprites.death.framesMax - 1) this.dead = true;\n      return;\n    }\n\n    // overriding all other animations with the attack animation\n    if (this.image === this.sprites.attack1.image && this.framesCurrent < this.sprites.attack1.framesMax - 1) return;\n\n    // override when fighter gets hit\n    if (this.image === this.sprites.takeHit.image && this.framesCurrent < this.sprites.takeHit.framesMax - 1) return;\n    switch (sprite) {\n      case 'idle':\n        if (this.image !== this.sprites.idle.image) {\n          this.image = this.sprites.idle.image;\n          this.framesMax = this.sprites.idle.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'run':\n        if (this.image !== this.sprites.run.image) {\n          this.image = this.sprites.run.image;\n          this.framesMax = this.sprites.run.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'jump':\n        if (this.image !== this.sprites.jump.image) {\n          this.image = this.sprites.jump.image;\n          this.framesMax = this.sprites.jump.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'fall':\n        if (this.image !== this.sprites.fall.image) {\n          this.image = this.sprites.fall.image;\n          this.framesMax = this.sprites.fall.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'attack1':\n        if (this.image !== this.sprites.attack1.image) {\n          this.image = this.sprites.attack1.image;\n          this.framesMax = this.sprites.attack1.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'takeHit':\n        if (this.image !== this.sprites.takeHit.image) {\n          this.image = this.sprites.takeHit.image;\n          this.framesMax = this.sprites.takeHit.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'death':\n        if (this.image !== this.sprites.death.image) {\n          this.image = this.sprites.death.image;\n          this.framesMax = this.sprites.death.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n    }\n  }\n}\nexport default Sprite;","map":{"version":3,"names":["Sprite","constructor","position","imageSrc","scale","framesMax","offset","x","y","width","height","image","Image","src","framesCurrent","framesElapsed","framesHold","draw","c","drawImage","animateFrames","update","Fighter","velocity","color","sprites","attackBox","undefined","lastKey","isAttacking","health","dead","sprite","canvas","gravity","attack","switchSprite","takeHit","death","attack1","idle","run","jump","fall"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/classes.js"],"sourcesContent":["export class Sprite {\r\n    constructor ({\r\n      position,\r\n      imageSrc,\r\n      scale = 1,\r\n      framesMax = 1,\r\n      offset = { x: 0, y: 0 }\r\n    }) {\r\n      this.position = position\r\n      this.width = 50\r\n      this.height = 150\r\n      this.image = new Image()\r\n      this.image.src = imageSrc\r\n      this.scale = scale\r\n      this.framesMax = framesMax\r\n      this.framesCurrent = 0\r\n      this.framesElapsed = 0\r\n      this.framesHold = 5\r\n      this.offset = offset\r\n    }\r\n  \r\n    draw() {\r\n      c.drawImage(\r\n        this.image,\r\n        this.framesCurrent * (this.image.width / this.framesMax),\r\n        0,\r\n        this.image.width / this.framesMax,\r\n        this.image.height,\r\n        this.position.x - this.offset.x,\r\n        this.position.y - this.offset.y,\r\n        (this.image.width / this.framesMax) * this.scale,\r\n        this.image.height * this.scale\r\n      )\r\n    }\r\n  \r\n    animateFrames() {\r\n      this.framesElapsed++\r\n  \r\n      if (this.framesElapsed % this.framesHold === 0) {\r\n        if (this.framesCurrent < this.framesMax - 1) {\r\n          this.framesCurrent++\r\n        } else {\r\n          this.framesCurrent = 0\r\n        }\r\n      }\r\n    }\r\n  \r\n    update() {\r\n      this.draw()\r\n      this.animateFrames()\r\n    }\r\n  }\r\n  \r\n  export class Fighter extends Sprite {\r\n    constructor({\r\n      position,\r\n      velocity,\r\n      color = 'red',\r\n      imageSrc,\r\n      scale = 1,\r\n      framesMax = 1,\r\n      offset = { x: 0, y: 0 },\r\n      sprites,\r\n      attackBox = { offset: {}, width: undefined, height: undefined }\r\n    }) {\r\n      super({\r\n        position,\r\n        imageSrc,\r\n        scale,\r\n        framesMax,\r\n        offset\r\n      })\r\n  \r\n      this.velocity = velocity\r\n      this.width = 50\r\n      this.height = 150\r\n      this.lastKey\r\n      this.attackBox = {\r\n        position: {\r\n          x: this.position.x,\r\n          y: this.position.y\r\n        },\r\n        offset: attackBox.offset,\r\n        width: attackBox.width,\r\n        height: attackBox.height\r\n      }\r\n      this.color = color\r\n      this.isAttacking\r\n      this.health = 100\r\n      this.framesCurrent = 0\r\n      this.framesElapsed = 0\r\n      this.framesHold = 5\r\n      this.sprites = sprites\r\n      this.dead = false\r\n  \r\n      for (const sprite in this.sprites) {\r\n        sprites[sprite].image = new Image()\r\n        sprites[sprite].image.src = sprites[sprite].imageSrc\r\n      }\r\n    }\r\n  \r\n    update() {\r\n      this.draw()\r\n      if (!this.dead) this.animateFrames()\r\n  \r\n      // attack boxes\r\n      this.attackBox.position.x = this.position.x + this.attackBox.offset.x\r\n      this.attackBox.position.y = this.position.y + this.attackBox.offset.y\r\n  \r\n      // draw the attack box\r\n      // c.fillRect(\r\n      //   this.attackBox.position.x,\r\n      //   this.attackBox.position.y,\r\n      //   this.attackBox.width,\r\n      //   this.attackBox.height\r\n      // )\r\n  \r\n      this.position.x += this.velocity.x\r\n      this.position.y += this.velocity.y\r\n  \r\n      // gravity function\r\n      if (this.position.y + this.height + this.velocity.y >= canvas.height - 96) {\r\n        this.velocity.y = 0\r\n        this.position.y = 330\r\n      } else this.velocity.y += gravity\r\n    }\r\n  \r\n    attack() {\r\n      this.switchSprite('attack1')\r\n      this.isAttacking = true\r\n    }\r\n  \r\n    takeHit() {\r\n      this.health -= 20\r\n  \r\n      if (this.health <= 0) {\r\n        this.switchSprite('death')\r\n      } else this.switchSprite('takeHit')\r\n    }\r\n  \r\n    switchSprite(sprite) {\r\n      if (this.image === this.sprites.death.image) {\r\n        if (this.framesCurrent === this.sprites.death.framesMax - 1)\r\n          this.dead = true\r\n        return\r\n      }\r\n  \r\n      // overriding all other animations with the attack animation\r\n      if (\r\n        this.image === this.sprites.attack1.image &&\r\n        this.framesCurrent < this.sprites.attack1.framesMax - 1\r\n      )\r\n        return\r\n  \r\n      // override when fighter gets hit\r\n      if (\r\n        this.image === this.sprites.takeHit.image &&\r\n        this.framesCurrent < this.sprites.takeHit.framesMax - 1\r\n      )\r\n        return\r\n  \r\n      switch (sprite) {\r\n        case 'idle':\r\n          if (this.image !== this.sprites.idle.image) {\r\n            this.image = this.sprites.idle.image\r\n            this.framesMax = this.sprites.idle.framesMax\r\n            this.framesCurrent = 0\r\n          }\r\n          break\r\n        case 'run':\r\n          if (this.image !== this.sprites.run.image) {\r\n            this.image = this.sprites.run.image\r\n            this.framesMax = this.sprites.run.framesMax\r\n            this.framesCurrent = 0\r\n          }\r\n          break\r\n        case 'jump':\r\n          if (this.image !== this.sprites.jump.image) {\r\n            this.image = this.sprites.jump.image\r\n            this.framesMax = this.sprites.jump.framesMax\r\n            this.framesCurrent = 0\r\n          }\r\n          break\r\n  \r\n        case 'fall':\r\n          if (this.image !== this.sprites.fall.image) {\r\n            this.image = this.sprites.fall.image\r\n            this.framesMax = this.sprites.fall.framesMax\r\n            this.framesCurrent = 0\r\n          }\r\n          break\r\n  \r\n        case 'attack1':\r\n          if (this.image !== this.sprites.attack1.image) {\r\n            this.image = this.sprites.attack1.image\r\n            this.framesMax = this.sprites.attack1.framesMax\r\n            this.framesCurrent = 0\r\n          }\r\n          break\r\n  \r\n        case 'takeHit':\r\n          if (this.image !== this.sprites.takeHit.image) {\r\n            this.image = this.sprites.takeHit.image\r\n            this.framesMax = this.sprites.takeHit.framesMax\r\n            this.framesCurrent = 0\r\n          }\r\n          break\r\n  \r\n        case 'death':\r\n          if (this.image !== this.sprites.death.image) {\r\n            this.image = this.sprites.death.image\r\n            this.framesMax = this.sprites.death.framesMax\r\n            this.framesCurrent = 0\r\n          }\r\n          break\r\n      }\r\n    }\r\n  }\r\n\r\nexport default Sprite;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}