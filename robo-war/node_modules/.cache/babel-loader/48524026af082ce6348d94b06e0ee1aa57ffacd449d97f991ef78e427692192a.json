{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nconst background = new Sprite({\n  position: {\n    x: 0,\n    y: 0\n  },\n  imageSrc: './img/background.png'\n});\nconst shop = new Sprite({\n  position: {\n    x: 650,\n    y: 128\n  },\n  imageSrc: './img/shop.png',\n  scale: 2.75,\n  framesMax: 6\n});\nconst player = new Fighter({\n  position: {\n    x: 0,\n    y: 0\n  },\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  offset: {\n    x: 0,\n    y: 0\n  },\n  imageSrc: './img/samuraiMack/Idle.png',\n  framesMax: 8,\n  scale: 2.5,\n  offset: {\n    x: 215,\n    y: 157\n  }\n});\nconst enemy = new Fighter({\n  position: {\n    x: 400,\n    y: 100\n  },\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  color: 'blue',\n  offset: {\n    x: -50,\n    y: 0\n  },\n  imageSrc: './img/kenji/Idle.png',\n  framesMax: 4,\n  scale: 2.5,\n  offset: {\n    x: 215,\n    y: 167\n  }\n});\nconst keys = {\n  a: {\n    pressed: false\n  },\n  d: {\n    pressed: false\n  },\n  ArrowRight: {\n    pressed: false\n  },\n  ArrowLeft: {\n    pressed: false\n  }\n};\nfunction rectangularCollision({\n  rectangle1,\n  rectangle2\n}) {\n  return rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width && rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y && rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height;\n}\nfunction determineWinner({\n  player,\n  enemy,\n  timerId\n}) {\n  clearTimeout(timerId);\n  document.querySelector('#displayText').style.display = 'flex';\n  if (player.health === enemy.health) {\n    document.querySelector('#displayText').innerHTML = 'Tie';\n  } else if (player.health > enemy.health) {\n    document.querySelector('#displayText').innerHTML = 'Player 1 Wins';\n  } else if (player.health < enemy.health) {\n    document.querySelector('#displayText').innerHTML = 'Player 2 Wins';\n  }\n}\nlet timer = 60;\nlet timerId;\nfunction decreaseTimer() {\n  if (timer > 0) {\n    timerId = setTimeout(decreaseTimer, 1000);\n    timer--;\n    document.querySelector('#timer').innerHTML = timer;\n  }\n  if (timer === 0) {\n    determineWinner({\n      player,\n      enemy,\n      timerId\n    });\n  }\n}\ndecreaseTimer();\n// Define your Sprite and Fighter classes here (including their methods) or import them if they are in separate files.\n// Sprite class definition\nclass Sprite {\n  constructor(options) {\n    // Initialize properties for the Sprite\n    this.position = options.position || {\n      x: 0,\n      y: 0\n    };\n    this.imageSrc = options.imageSrc || ''; // Path to image\n    this.scale = options.scale || 1;\n    this.framesMax = options.framesMax || 1;\n    // Add other properties as needed\n\n    // Load and initialize the image\n    this.image = new Image();\n    this.image.src = this.imageSrc;\n\n    // Initialize other properties and methods\n\n    // Load the image (you can add an event listener for 'load' to ensure it's loaded before rendering)\n    this.image.onload = () => {\n      // Image is loaded, you can set up any additional initialization here\n    };\n  }\n\n  // Define methods for the Sprite class\n  update() {\n    // Update the position, animation, or any other logic for the sprite\n    // ...\n\n    // Render the sprite on the canvas\n    // You can use ctx.drawImage to draw the image on the canvas\n    // Example: ctx.drawImage(this.image, this.position.x, this.position.y, this.image.width * this.scale, this.image.height * this.scale);\n  }\n}\n\n// Fighter class definition (extends Sprite)\nclass Fighter extends Sprite {\n  constructor(options) {\n    super(options); // Call the constructor of the parent class (Sprite)\n\n    // Initialize properties specific to Fighter class\n    this.velocity = options.velocity || {\n      x: 0,\n      y: 0\n    };\n    this.isAttacking = false;\n    this.health = 100;\n    // Add other properties as needed\n\n    // Initialize other properties and methods\n    // ...\n  }\n\n  // Define methods for the Fighter class\n  attack() {\n    // Implement attack logic\n    // ...\n\n    // Set this.isAttacking to true during attack animation\n    this.isAttacking = true;\n  }\n  takeHit() {\n    // Implement logic for taking damage\n    // ...\n\n    // Update health and play hit animation\n    this.health -= 10; // Adjust this based on your game's mechanics\n  }\n\n  // Add other methods for Fighter class\n  // ...\n}\n\nexport { Sprite, Fighter };\nconst FightingGame = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = 1024;\n    canvas.height = 576;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const gravity = 0.7;\n\n    // Define your background, shop, player, enemy, keys, and other game objects here.\n    // ...\n\n    // Your existing game loop (animate) can also be moved here\n    function animate() {\n      window.requestAnimationFrame(animate);\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Add your game update and rendering logic here\n      // ...\n\n      // Don't forget to clear the canvas before rendering\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Render your objects here\n      background.update();\n      shop.update();\n      ctx.fillStyle = \"rgba(255, 255, 255, 0.15)\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      player.update();\n      enemy.update();\n\n      // Rest of your game logic goes here\n      // ...\n      player.velocity.x = 0;\n      enemy.velocity.x = 0;\n\n      // player movement\n\n      if (keys.a.pressed && player.lastKey === 'a') {\n        player.velocity.x = -5;\n        player.switchSprite('run');\n      } else if (keys.d.pressed && player.lastKey === 'd') {\n        player.velocity.x = 5;\n        player.switchSprite('run');\n      } else {\n        player.switchSprite('idle');\n      }\n\n      // jumping\n      if (player.velocity.y < 0) {\n        player.switchSprite('jump');\n      } else if (player.velocity.y > 0) {\n        player.switchSprite('fall');\n      }\n\n      // Enemy movement\n      if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n        enemy.velocity.x = -5;\n        enemy.switchSprite('run');\n      } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n        enemy.velocity.x = 5;\n        enemy.switchSprite('run');\n      } else {\n        enemy.switchSprite('idle');\n      }\n\n      // jumping\n      if (enemy.velocity.y < 0) {\n        enemy.switchSprite('jump');\n      } else if (enemy.velocity.y > 0) {\n        enemy.switchSprite('fall');\n      }\n\n      // Your collision detection and other game mechanics\n      // ...\n      //  detect for collision & enemy gets hit\n      // if (\n      //   rectangularCollision({\n      //     rectangle1: player,\n      //     rectangle2: enemy\n      //   }) &&\n      //   player.isAttacking &&\n      //   player.framesCurrent === 4\n      // ) {\n      //   enemy.takeHit()\n      //   player.isAttacking = false\n\n      //   gsap.to('#enemyHealth', {\n      //     width: enemy.health + '%'\n      //   })\n      // }\n\n      // End game based on health or other conditions\n      // ...\n      // end game based on health\n      if (enemy.health <= 0 || player.health <= 0) {\n        determineWinner({\n          player,\n          enemy,\n          timerId\n        });\n      }\n\n      // Handle other game events and mechanics\n      // ...\n    }\n\n    animate();\n\n    // Event listeners can be added here\n    window.addEventListener(\"keydown\", event => {\n      // Your keydown event handling logic\n      if (!player.dead) {\n        switch (event.key) {\n          case 'd':\n            keys.d.pressed = true;\n            player.lastKey = 'd';\n            break;\n          case 'a':\n            keys.a.pressed = true;\n            player.lastKey = 'a';\n            break;\n          case 'w':\n            player.velocity.y = -20;\n            break;\n          case ' ':\n            player.attack();\n            break;\n        }\n      }\n      if (!enemy.dead) {\n        switch (event.key) {\n          case 'ArrowRight':\n            keys.ArrowRight.pressed = true;\n            enemy.lastKey = 'ArrowRight';\n            break;\n          case 'ArrowLeft':\n            keys.ArrowLeft.pressed = true;\n            enemy.lastKey = 'ArrowLeft';\n            break;\n          case 'ArrowUp':\n            enemy.velocity.y = -20;\n            break;\n          case 'ArrowDown':\n            enemy.attack();\n            break;\n        }\n      }\n    });\n    window.addEventListener(\"keyup\", event => {\n      // Your keyup event handling logic\n      // ...\n      switch (event.key) {\n        case 'd':\n          keys.d.pressed = false;\n          break;\n        case 'a':\n          keys.a.pressed = false;\n          break;\n      }\n\n      // enemy keys\n      switch (event.key) {\n        case 'ArrowRight':\n          keys.ArrowRight.pressed = false;\n          break;\n        case 'ArrowLeft':\n          keys.ArrowLeft.pressed = false;\n          break;\n      }\n    });\n\n    // Don't forget to remove event listeners on component unmount\n    // return () => {\n    //   window.removeEventListener(\"keydown\", handleKeyDown);\n    //   window.removeEventListener(\"keyup\", handleKeyUp);\n    // };\n  }, []);\n\n  // return <canvas ref={canvasRef}></canvas>;\n};\n_s(FightingGame, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = FightingGame;\nexport default FightingGame;\nvar _c;\n$RefreshReg$(_c, \"FightingGame\");","map":{"version":3,"names":["React","useEffect","useRef","background","Sprite","position","x","y","imageSrc","shop","scale","framesMax","player","Fighter","velocity","offset","enemy","color","keys","a","pressed","d","ArrowRight","ArrowLeft","rectangularCollision","rectangle1","rectangle2","attackBox","width","height","determineWinner","timerId","clearTimeout","document","querySelector","style","display","health","innerHTML","timer","decreaseTimer","setTimeout","constructor","options","image","Image","src","onload","update","isAttacking","attack","takeHit","FightingGame","_s","canvasRef","canvas","current","ctx","getContext","fillRect","gravity","animate","window","requestAnimationFrame","fillStyle","clearRect","lastKey","switchSprite","addEventListener","event","dead","key","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/FightingGame.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nconst background = new Sprite({\r\n  position: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  imageSrc: './img/background.png'\r\n})\r\nconst shop = new Sprite({\r\n  position: {\r\n    x: 650,\r\n    y: 128\r\n  },\r\n  imageSrc: './img/shop.png',\r\n  scale: 2.75,\r\n  framesMax: 6\r\n})\r\n\r\nconst player = new Fighter({\r\n  position: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  velocity: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  offset: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  imageSrc: './img/samuraiMack/Idle.png',\r\n  framesMax: 8,\r\n  scale: 2.5,\r\n  offset: {\r\n    x: 215,\r\n    y: 157\r\n  },\r\n})\r\n\r\nconst enemy = new Fighter({\r\n  position: {\r\n    x: 400,\r\n    y: 100\r\n  },\r\n  velocity: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  color: 'blue',\r\n  offset: {\r\n    x: -50,\r\n    y: 0\r\n  },\r\n  imageSrc: './img/kenji/Idle.png',\r\n  framesMax: 4,\r\n  scale: 2.5,\r\n  offset: {\r\n    x: 215,\r\n    y: 167\r\n  },\r\n})\r\n\r\nconst keys = {\r\n  a: {\r\n    pressed: false\r\n  },\r\n  d: {\r\n    pressed: false\r\n  },\r\n  ArrowRight: {\r\n    pressed: false\r\n  },\r\n  ArrowLeft: {\r\n    pressed: false\r\n  }\r\n}\r\n\r\nfunction rectangularCollision({rectangle1 , rectangle2}) {\r\n    return (\r\n        rectangle1.attackBox.position.x + rectangle1.attackBox.width >=\r\n            rectangle2.position.x && \r\n        rectangle1.attackBox.position.x <=\r\n            rectangle2.position.x + rectangle2.width &&\r\n        rectangle1.attackBox.position.y + rectangle1.attackBox.height >= \r\n            rectangle2.position.y\r\n        && rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\r\n    )\r\n}\r\n\r\nfunction determineWinner({player, enemy, timerId}) {\r\n    clearTimeout(timerId)\r\n    document.querySelector('#displayText').style.display = 'flex'\r\n    if(player.health === enemy.health) {\r\n        document.querySelector('#displayText').innerHTML = 'Tie'\r\n    }else if (player.health > enemy.health) {\r\n        document.querySelector('#displayText').innerHTML = 'Player 1 Wins'\r\n    }else if (player.health < enemy.health) {\r\n        document.querySelector('#displayText').innerHTML = 'Player 2 Wins'\r\n    }\r\n}\r\n\r\nlet timer = 60\r\nlet timerId\r\nfunction decreaseTimer() {\r\n    if(timer>0) {\r\n        timerId = setTimeout(decreaseTimer, 1000)\r\n        timer--\r\n        document.querySelector('#timer').innerHTML = timer\r\n    }\r\n\r\n    if (timer === 0) {\r\n        determineWinner({player, enemy, timerId})\r\n    }\r\n}\r\n\r\ndecreaseTimer()\r\n// Define your Sprite and Fighter classes here (including their methods) or import them if they are in separate files.\r\n// Sprite class definition\r\nclass Sprite {\r\n  constructor(options) {\r\n    // Initialize properties for the Sprite\r\n    this.position = options.position || { x: 0, y: 0 };\r\n    this.imageSrc = options.imageSrc || ''; // Path to image\r\n    this.scale = options.scale || 1;\r\n    this.framesMax = options.framesMax || 1;\r\n    // Add other properties as needed\r\n    \r\n    // Load and initialize the image\r\n    this.image = new Image();\r\n    this.image.src = this.imageSrc;\r\n    \r\n    // Initialize other properties and methods\r\n \r\n\r\n    // Load the image (you can add an event listener for 'load' to ensure it's loaded before rendering)\r\n    this.image.onload = () => {\r\n      // Image is loaded, you can set up any additional initialization here\r\n    };\r\n  }\r\n\r\n  // Define methods for the Sprite class\r\n  update() {\r\n    // Update the position, animation, or any other logic for the sprite\r\n    // ...\r\n\r\n    // Render the sprite on the canvas\r\n    // You can use ctx.drawImage to draw the image on the canvas\r\n    // Example: ctx.drawImage(this.image, this.position.x, this.position.y, this.image.width * this.scale, this.image.height * this.scale);\r\n  }\r\n}\r\n\r\n// Fighter class definition (extends Sprite)\r\nclass Fighter extends Sprite {\r\n  constructor(options) {\r\n    super(options); // Call the constructor of the parent class (Sprite)\r\n    \r\n    // Initialize properties specific to Fighter class\r\n    this.velocity = options.velocity || { x: 0, y: 0 };\r\n    this.isAttacking = false;\r\n    this.health = 100;\r\n    // Add other properties as needed\r\n    \r\n    // Initialize other properties and methods\r\n    // ...\r\n  }\r\n\r\n  // Define methods for the Fighter class\r\n  attack() {\r\n    // Implement attack logic\r\n    // ...\r\n\r\n    // Set this.isAttacking to true during attack animation\r\n    this.isAttacking = true;\r\n  }\r\n\r\n  takeHit() {\r\n    // Implement logic for taking damage\r\n    // ...\r\n\r\n    // Update health and play hit animation\r\n    this.health -= 10; // Adjust this based on your game's mechanics\r\n  }\r\n\r\n  // Add other methods for Fighter class\r\n  // ...\r\n}\r\n\r\nexport { Sprite, Fighter };\r\n\r\n\r\nconst FightingGame = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const gravity = 0.7;\r\n\r\n    // Define your background, shop, player, enemy, keys, and other game objects here.\r\n    // ...\r\n\r\n    // Your existing game loop (animate) can also be moved here\r\n    function animate() {\r\n      window.requestAnimationFrame(animate);\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Add your game update and rendering logic here\r\n      // ...\r\n\r\n      // Don't forget to clear the canvas before rendering\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Render your objects here\r\n      background.update();\r\n      shop.update();\r\n      ctx.fillStyle = \"rgba(255, 255, 255, 0.15)\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      player.update();\r\n      enemy.update();\r\n\r\n      // Rest of your game logic goes here\r\n      // ...\r\n        player.velocity.x = 0\r\n        enemy.velocity.x = 0\r\n      \r\n      // player movement\r\n      \r\n    if (keys.a.pressed && player.lastKey === 'a') {\r\n    player.velocity.x = -5\r\n    player.switchSprite('run')\r\n  } else if (keys.d.pressed && player.lastKey === 'd') {\r\n    player.velocity.x = 5\r\n    player.switchSprite('run')\r\n  } else {\r\n    player.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (player.velocity.y < 0) {\r\n    player.switchSprite('jump')\r\n  } else if (player.velocity.y > 0) {\r\n    player.switchSprite('fall')\r\n  }\r\n\r\n  // Enemy movement\r\n  if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\r\n    enemy.velocity.x = -5\r\n    enemy.switchSprite('run')\r\n  } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n    enemy.velocity.x = 5\r\n    enemy.switchSprite('run')\r\n  } else {\r\n    enemy.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (enemy.velocity.y < 0) {\r\n    enemy.switchSprite('jump')\r\n  } else if (enemy.velocity.y > 0) {\r\n    enemy.switchSprite('fall')\r\n  }\r\n\r\n      // Your collision detection and other game mechanics\r\n      // ...\r\n      //  detect for collision & enemy gets hit\r\n  // if (\r\n  //   rectangularCollision({\r\n  //     rectangle1: player,\r\n  //     rectangle2: enemy\r\n  //   }) &&\r\n  //   player.isAttacking &&\r\n  //   player.framesCurrent === 4\r\n  // ) {\r\n  //   enemy.takeHit()\r\n  //   player.isAttacking = false\r\n\r\n  //   gsap.to('#enemyHealth', {\r\n  //     width: enemy.health + '%'\r\n  //   })\r\n  // }\r\n\r\n      // End game based on health or other conditions\r\n      // ...\r\n        // end game based on health\r\n  if (enemy.health <= 0 || player.health <= 0) {\r\n    determineWinner({ player, enemy, timerId })\r\n  }\r\n\r\n\r\n      // Handle other game events and mechanics\r\n      // ...\r\n    }\r\n\r\n    animate();\r\n\r\n    // Event listeners can be added here\r\n    window.addEventListener(\"keydown\", (event) => {\r\n      // Your keydown event handling logic\r\n        if (!player.dead) {\r\n    switch (event.key) {\r\n      case 'd':\r\n        keys.d.pressed = true\r\n        player.lastKey = 'd'\r\n        break\r\n      case 'a':\r\n        keys.a.pressed = true\r\n        player.lastKey = 'a'\r\n        break\r\n      case 'w':\r\n        player.velocity.y = -20\r\n        break\r\n      case ' ':\r\n        player.attack()\r\n        break\r\n    }\r\n  }\r\n\r\n  if (!enemy.dead) {\r\n    switch (event.key) {\r\n      case 'ArrowRight':\r\n        keys.ArrowRight.pressed = true\r\n        enemy.lastKey = 'ArrowRight'\r\n        break\r\n      case 'ArrowLeft':\r\n        keys.ArrowLeft.pressed = true\r\n        enemy.lastKey = 'ArrowLeft'\r\n        break\r\n      case 'ArrowUp':\r\n        enemy.velocity.y = -20\r\n        break\r\n      case 'ArrowDown':\r\n        enemy.attack()\r\n\r\n        break\r\n    }\r\n  }\r\n    });\r\n\r\n    window.addEventListener(\"keyup\", (event) => {\r\n      // Your keyup event handling logic\r\n      // ...\r\n        switch (event.key) {\r\n    case 'd':\r\n      keys.d.pressed = false\r\n      break\r\n    case 'a':\r\n      keys.a.pressed = false\r\n      break\r\n  }\r\n\r\n  // enemy keys\r\n  switch (event.key) {\r\n    case 'ArrowRight':\r\n      keys.ArrowRight.pressed = false\r\n      break\r\n    case 'ArrowLeft':\r\n      keys.ArrowLeft.pressed = false\r\n      break\r\n  }\r\n    });\r\n\r\n    // Don't forget to remove event listeners on component unmount\r\n    // return () => {\r\n    //   window.removeEventListener(\"keydown\", handleKeyDown);\r\n    //   window.removeEventListener(\"keyup\", handleKeyUp);\r\n    // };\r\n  }, []);\r\n\r\n  // return <canvas ref={canvasRef}></canvas>;\r\n};\r\n\r\nexport default FightingGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}