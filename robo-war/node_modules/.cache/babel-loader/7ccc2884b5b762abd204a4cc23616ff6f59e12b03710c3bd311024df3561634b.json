{"ast":null,"code":"\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import './Components.css';\n\n// import spriteImage from './Images/background.png';\n// import { AnimationFrame } from './AnimationFrame.js';\n// import kenjiImage from './Idle3 .png';\n// import samuraiImage from './fighter1.png';\n\n// const gravity = 0.7;\n// const initialPlayer1State = {\n//   position: {\n//     x: 100,\n//     y: 400\n//   },\n//   velocity: {\n//     x: 10,\n//     y: 0\n//   },\n//   scale: 2.5,\n//   health: 100 \n// };\n\n// const initialPlayer2State = {\n//   position: {\n//     x: 250,\n//     y: 400\n//   },\n//   velocity: {\n//     x: 10,\n//     y: 0\n//   },\n//   scale: 2.5,\n//   health: 100\n// };\n\n// const kenjiFrameWidth = 284;\n// const kenjiFrameHeight = 600;\n// const kenjiTotalFrames = 1;\n// const kenjiAnimationSpeed = 10;\n\n// const samuraiFrameWidth = 284;\n// const samuraiFrameHeight = 600;\n// const samuraiTotalFrames = 1;\n// const samuraiAnimationSpeed = 10;\n\n// function CanvasDrawing() {\n//   const canvasRef = useRef(null);\n//   const [player1, setPlayer1] = useState(initialPlayer1State);\n//   const [player2, setPlayer2] = useState(initialPlayer2State);\n//   const [currentFrame, setCurrentFrame] = useState(0);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = 1024;\n//     canvas.height = 576;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = spriteImage;\n\n//     const image = new Image();\n//     image.src = kenjiImage;\n\n//     image.onload = function () {\n//       ctx.drawImage(image, 50, 50);\n//     };\n\n//     const fighter = new Image();\n//     fighter.src = samuraiImage;\n\n//     fighter.onload = function () {\n//       ctx.drawImage(fighter, 50, 50);\n//     };\n\n//     const kenjiAnimationFrame = new AnimationFrame({\n//       image: image,\n//       frameWidth: kenjiFrameWidth,\n//       frameHeight: kenjiFrameHeight,\n//       totalFrames: kenjiTotalFrames,\n//       animationSpeed: kenjiAnimationSpeed,\n//     });\n\n//     const samuraiAnimationFrame = new AnimationFrame({\n//       image: fighter,\n//       frameWidth: samuraiFrameWidth,\n//       frameHeight: samuraiFrameHeight,\n//       totalFrames: samuraiTotalFrames,\n//       animationSpeed: samuraiAnimationSpeed,\n//     });\n\n//     const keys = {\n//       a: false,\n//       d: false,\n//       w: false,\n//       space: false,\n//       ArrowLeft: false,\n//       ArrowRight: false,\n//       ArrowUp: false,\n//       ArrowDown: false,\n//     };\n\n//     const handleKeyDown = (event) => {\n//       if (event.key === 'a') {\n//         keys.a = true;\n//       } else if (event.key === 'd') {\n//         keys.d = true;\n//       } else if (event.key === 'w') {\n//         keys.w = true;\n//       } else if (event.key === ' ') {\n//         keys.space = true;\n//       } else if (event.key === 'ArrowLeft') {\n//         keys.ArrowLeft = true;\n//       } else if (event.key === 'ArrowRight') {\n//         keys.ArrowRight = true;\n//       } else if (event.key === 'ArrowUp') {\n//         keys.ArrowUp = true;\n//       } else if (event.key === 'ArrowDown') {\n//         keys.ArrowDown = true;\n//       }\n//     };\n\n//     const handleKeyUp = (event) => {\n//       if (event.key === 'a') {\n//         keys.a = false;\n//       } else if (event.key === 'd') {\n//         keys.d = false;\n//       } else if (event.key === 'w') {\n//         keys.w = false;\n//       } else if (event.key === ' ') {\n//         keys.space = false;\n//       } else if (event.key === 'ArrowLeft') {\n//         keys.ArrowLeft = false;\n//       } else if (event.key === 'ArrowRight') {\n//         keys.ArrowRight = false;\n//       } else if (event.key === 'ArrowUp') {\n//         keys.ArrowUp = false;\n//       } else if (event.key === 'ArrowDown') {\n//         keys.ArrowDown = false;\n//       }\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n//     window.addEventListener('keyup', handleKeyUp);\n\n//     const animate = () => {\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n//       if (keys.a) {\n//         player1.position.x -= player1.velocity.x;\n//       } else if (keys.d) {\n//         player1.position.x += player1.velocity.x;\n//       } else if (keys.w) {\n//         // Handle jump for player 1\n//         // Add your jump logic here\n//       } else if (keys.space) {\n//         // Handle attack for player 1\n//         // Add your attack logic here\n//       }\n\n//       if (keys.ArrowLeft) {\n//         player2.position.x -= player2.velocity.x;\n//       } else if (keys.ArrowRight) {\n//         player2.position.x += player2.velocity.x;\n//       } else if (keys.ArrowUp) {\n//         // Handle jump for player 2\n//         // Add your jump logic here\n//       } else if (keys.ArrowDown) {\n//         // Handle attack for player 2\n//         // Add your attack logic here\n//       }\n\n//       kenjiAnimationFrame.draw(ctx, player1.position.x, player1.position.y);\n//       samuraiAnimationFrame.draw(ctx, player2.position.x + 400, player2.position.y);\n\n//       setCurrentFrame((prevFrame) => prevFrame + 1);\n\n//       requestAnimationFrame(animate);\n//     };\n\n//     animate();\n\n//     return () => {\n//       window.removeEventListener('keydown', handleKeyDown);\n//       window.removeEventListener('keyup', handleKeyUp);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <canvas ref={canvasRef}></canvas>\n//     </div>\n//   );\n// }\n\n// export default CanvasDrawing;","map":{"version":3,"names":[],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["\r\n\r\n\r\n\r\n// import React, { useRef, useEffect, useState } from 'react';\r\n// import './Components.css';\r\n\r\n// import spriteImage from './Images/background.png';\r\n// import { AnimationFrame } from './AnimationFrame.js';\r\n// import kenjiImage from './Idle3 .png';\r\n// import samuraiImage from './fighter1.png';\r\n\r\n// const gravity = 0.7;\r\n// const initialPlayer1State = {\r\n//   position: {\r\n//     x: 100,\r\n//     y: 400\r\n//   },\r\n//   velocity: {\r\n//     x: 10,\r\n//     y: 0\r\n//   },\r\n//   scale: 2.5,\r\n//   health: 100 \r\n// };\r\n\r\n// const initialPlayer2State = {\r\n//   position: {\r\n//     x: 250,\r\n//     y: 400\r\n//   },\r\n//   velocity: {\r\n//     x: 10,\r\n//     y: 0\r\n//   },\r\n//   scale: 2.5,\r\n//   health: 100\r\n// };\r\n\r\n// const kenjiFrameWidth = 284;\r\n// const kenjiFrameHeight = 600;\r\n// const kenjiTotalFrames = 1;\r\n// const kenjiAnimationSpeed = 10;\r\n\r\n// const samuraiFrameWidth = 284;\r\n// const samuraiFrameHeight = 600;\r\n// const samuraiTotalFrames = 1;\r\n// const samuraiAnimationSpeed = 10;\r\n\r\n// function CanvasDrawing() {\r\n//   const canvasRef = useRef(null);\r\n//   const [player1, setPlayer1] = useState(initialPlayer1State);\r\n//   const [player2, setPlayer2] = useState(initialPlayer2State);\r\n//   const [currentFrame, setCurrentFrame] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext('2d');\r\n\r\n//     canvas.width = 1024;\r\n//     canvas.height = 576;\r\n\r\n//     const backgroundImage = new Image();\r\n//     backgroundImage.src = spriteImage;\r\n\r\n//     const image = new Image();\r\n//     image.src = kenjiImage;\r\n\r\n//     image.onload = function () {\r\n//       ctx.drawImage(image, 50, 50);\r\n//     };\r\n\r\n//     const fighter = new Image();\r\n//     fighter.src = samuraiImage;\r\n\r\n//     fighter.onload = function () {\r\n//       ctx.drawImage(fighter, 50, 50);\r\n//     };\r\n\r\n//     const kenjiAnimationFrame = new AnimationFrame({\r\n//       image: image,\r\n//       frameWidth: kenjiFrameWidth,\r\n//       frameHeight: kenjiFrameHeight,\r\n//       totalFrames: kenjiTotalFrames,\r\n//       animationSpeed: kenjiAnimationSpeed,\r\n//     });\r\n\r\n//     const samuraiAnimationFrame = new AnimationFrame({\r\n//       image: fighter,\r\n//       frameWidth: samuraiFrameWidth,\r\n//       frameHeight: samuraiFrameHeight,\r\n//       totalFrames: samuraiTotalFrames,\r\n//       animationSpeed: samuraiAnimationSpeed,\r\n//     });\r\n\r\n//     const keys = {\r\n//       a: false,\r\n//       d: false,\r\n//       w: false,\r\n//       space: false,\r\n//       ArrowLeft: false,\r\n//       ArrowRight: false,\r\n//       ArrowUp: false,\r\n//       ArrowDown: false,\r\n//     };\r\n\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === 'a') {\r\n//         keys.a = true;\r\n//       } else if (event.key === 'd') {\r\n//         keys.d = true;\r\n//       } else if (event.key === 'w') {\r\n//         keys.w = true;\r\n//       } else if (event.key === ' ') {\r\n//         keys.space = true;\r\n//       } else if (event.key === 'ArrowLeft') {\r\n//         keys.ArrowLeft = true;\r\n//       } else if (event.key === 'ArrowRight') {\r\n//         keys.ArrowRight = true;\r\n//       } else if (event.key === 'ArrowUp') {\r\n//         keys.ArrowUp = true;\r\n//       } else if (event.key === 'ArrowDown') {\r\n//         keys.ArrowDown = true;\r\n//       }\r\n//     };\r\n\r\n//     const handleKeyUp = (event) => {\r\n//       if (event.key === 'a') {\r\n//         keys.a = false;\r\n//       } else if (event.key === 'd') {\r\n//         keys.d = false;\r\n//       } else if (event.key === 'w') {\r\n//         keys.w = false;\r\n//       } else if (event.key === ' ') {\r\n//         keys.space = false;\r\n//       } else if (event.key === 'ArrowLeft') {\r\n//         keys.ArrowLeft = false;\r\n//       } else if (event.key === 'ArrowRight') {\r\n//         keys.ArrowRight = false;\r\n//       } else if (event.key === 'ArrowUp') {\r\n//         keys.ArrowUp = false;\r\n//       } else if (event.key === 'ArrowDown') {\r\n//         keys.ArrowDown = false;\r\n//       }\r\n//     };\r\n\r\n//     window.addEventListener('keydown', handleKeyDown);\r\n//     window.addEventListener('keyup', handleKeyUp);\r\n\r\n//     const animate = () => {\r\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n//       if (keys.a) {\r\n//         player1.position.x -= player1.velocity.x;\r\n//       } else if (keys.d) {\r\n//         player1.position.x += player1.velocity.x;\r\n//       } else if (keys.w) {\r\n//         // Handle jump for player 1\r\n//         // Add your jump logic here\r\n//       } else if (keys.space) {\r\n//         // Handle attack for player 1\r\n//         // Add your attack logic here\r\n//       }\r\n\r\n//       if (keys.ArrowLeft) {\r\n//         player2.position.x -= player2.velocity.x;\r\n//       } else if (keys.ArrowRight) {\r\n//         player2.position.x += player2.velocity.x;\r\n//       } else if (keys.ArrowUp) {\r\n//         // Handle jump for player 2\r\n//         // Add your jump logic here\r\n//       } else if (keys.ArrowDown) {\r\n//         // Handle attack for player 2\r\n//         // Add your attack logic here\r\n//       }\r\n\r\n//       kenjiAnimationFrame.draw(ctx, player1.position.x, player1.position.y);\r\n//       samuraiAnimationFrame.draw(ctx, player2.position.x + 400, player2.position.y);\r\n\r\n//       setCurrentFrame((prevFrame) => prevFrame + 1);\r\n\r\n//       requestAnimationFrame(animate);\r\n//     };\r\n\r\n//     animate();\r\n\r\n//     return () => {\r\n//       window.removeEventListener('keydown', handleKeyDown);\r\n//       window.removeEventListener('keyup', handleKeyUp);\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <canvas ref={canvasRef}></canvas>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CanvasDrawing;\r\n"],"mappings":";;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}