{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\FightingGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\n\n// Define your Sprite and Fighter classes here (including their methods) or import them if they are in separate files.\n// Sprite class definition\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Sprite {\n  constructor(options) {\n    // Initialize properties for the Sprite\n    this.position = options.position || {\n      x: 0,\n      y: 0\n    };\n    this.imageSrc = options.imageSrc || ''; // Path to image\n    this.scale = options.scale || 1;\n    this.framesMax = options.framesMax || 1;\n    // Add other properties as needed\n\n    // Load and initialize the image\n    this.image = new Image();\n    this.image.src = this.imageSrc;\n\n    // Initialize other properties and methods\n    // ...\n\n    // Load the image (you can add an event listener for 'load' to ensure it's loaded before rendering)\n    this.image.onload = () => {\n      // Image is loaded, you can set up any additional initialization here\n    };\n  }\n\n  // Define methods for the Sprite class\n  update() {\n    // Update the position, animation, or any other logic for the sprite\n    // ...\n\n    // Render the sprite on the canvas\n    // You can use ctx.drawImage to draw the image on the canvas\n    // Example: ctx.drawImage(this.image, this.position.x, this.position.y, this.image.width * this.scale, this.image.height * this.scale);\n  }\n}\n\n// Fighter class definition (extends Sprite)\nclass Fighter extends Sprite {\n  constructor(options) {\n    super(options); // Call the constructor of the parent class (Sprite)\n\n    // Initialize properties specific to Fighter class\n    this.velocity = options.velocity || {\n      x: 0,\n      y: 0\n    };\n    this.isAttacking = false;\n    this.health = 100;\n    // Add other properties as needed\n\n    // Initialize other properties and methods\n    // ...\n  }\n\n  // Define methods for the Fighter class\n  attack() {\n    // Implement attack logic\n    // ...\n\n    // Set this.isAttacking to true during attack animation\n    this.isAttacking = true;\n  }\n  takeHit() {\n    // Implement logic for taking damage\n    // ...\n\n    // Update health and play hit animation\n    this.health -= 10; // Adjust this based on your game's mechanics\n  }\n\n  // Add other methods for Fighter class\n  // ...\n}\n\nexport { Sprite, Fighter };\nconst FightingGame = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = 1024;\n    canvas.height = 576;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const gravity = 0.7;\n\n    // Define your background, shop, player, enemy, keys, and other game objects here.\n    // ...\n\n    // Your existing game loop (animate) can also be moved here\n    function animate() {\n      window.requestAnimationFrame(animate);\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Add your game update and rendering logic here\n      // ...\n\n      // Don't forget to clear the canvas before rendering\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Render your objects here\n      background.update();\n      shop.update();\n      ctx.fillStyle = \"rgba(255, 255, 255, 0.15)\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      player.update();\n      enemy.update();\n\n      // Rest of your game logic goes here\n      // ...\n\n      // Your collision detection and other game mechanics\n      // ...\n\n      // End game based on health or other conditions\n      // ...\n\n      // Handle other game events and mechanics\n      // ...\n    }\n\n    animate();\n\n    // Event listeners can be added here\n    window.addEventListener(\"keydown\", event => {\n      // Your keydown event handling logic\n    });\n    window.addEventListener(\"keyup\", event => {\n      // Your keyup event handling logic\n      // ...\n    });\n\n    // Don't forget to remove event listeners on component unmount\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 10\n  }, this);\n};\n_s(FightingGame, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = FightingGame;\nexport default FightingGame;\nvar _c;\n$RefreshReg$(_c, \"FightingGame\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Sprite","constructor","options","position","x","y","imageSrc","scale","framesMax","image","Image","src","onload","update","Fighter","velocity","isAttacking","health","attack","takeHit","FightingGame","_s","canvasRef","canvas","current","ctx","getContext","width","height","fillRect","gravity","animate","window","requestAnimationFrame","fillStyle","clearRect","background","shop","player","enemy","addEventListener","event","removeEventListener","handleKeyDown","handleKeyUp","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/FightingGame.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\n// Define your Sprite and Fighter classes here (including their methods) or import them if they are in separate files.\r\n// Sprite class definition\r\nclass Sprite {\r\n  constructor(options) {\r\n    // Initialize properties for the Sprite\r\n    this.position = options.position || { x: 0, y: 0 };\r\n    this.imageSrc = options.imageSrc || ''; // Path to image\r\n    this.scale = options.scale || 1;\r\n    this.framesMax = options.framesMax || 1;\r\n    // Add other properties as needed\r\n    \r\n    // Load and initialize the image\r\n    this.image = new Image();\r\n    this.image.src = this.imageSrc;\r\n    \r\n    // Initialize other properties and methods\r\n    // ...\r\n\r\n    // Load the image (you can add an event listener for 'load' to ensure it's loaded before rendering)\r\n    this.image.onload = () => {\r\n      // Image is loaded, you can set up any additional initialization here\r\n    };\r\n  }\r\n\r\n  // Define methods for the Sprite class\r\n  update() {\r\n    // Update the position, animation, or any other logic for the sprite\r\n    // ...\r\n\r\n    // Render the sprite on the canvas\r\n    // You can use ctx.drawImage to draw the image on the canvas\r\n    // Example: ctx.drawImage(this.image, this.position.x, this.position.y, this.image.width * this.scale, this.image.height * this.scale);\r\n  }\r\n}\r\n\r\n// Fighter class definition (extends Sprite)\r\nclass Fighter extends Sprite {\r\n  constructor(options) {\r\n    super(options); // Call the constructor of the parent class (Sprite)\r\n    \r\n    // Initialize properties specific to Fighter class\r\n    this.velocity = options.velocity || { x: 0, y: 0 };\r\n    this.isAttacking = false;\r\n    this.health = 100;\r\n    // Add other properties as needed\r\n    \r\n    // Initialize other properties and methods\r\n    // ...\r\n  }\r\n\r\n  // Define methods for the Fighter class\r\n  attack() {\r\n    // Implement attack logic\r\n    // ...\r\n\r\n    // Set this.isAttacking to true during attack animation\r\n    this.isAttacking = true;\r\n  }\r\n\r\n  takeHit() {\r\n    // Implement logic for taking damage\r\n    // ...\r\n\r\n    // Update health and play hit animation\r\n    this.health -= 10; // Adjust this based on your game's mechanics\r\n  }\r\n\r\n  // Add other methods for Fighter class\r\n  // ...\r\n}\r\n\r\nexport { Sprite, Fighter };\r\n\r\n\r\nconst FightingGame = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const gravity = 0.7;\r\n\r\n    // Define your background, shop, player, enemy, keys, and other game objects here.\r\n    // ...\r\n\r\n    // Your existing game loop (animate) can also be moved here\r\n    function animate() {\r\n      window.requestAnimationFrame(animate);\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Add your game update and rendering logic here\r\n      // ...\r\n\r\n      // Don't forget to clear the canvas before rendering\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Render your objects here\r\n      background.update();\r\n      shop.update();\r\n      ctx.fillStyle = \"rgba(255, 255, 255, 0.15)\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      player.update();\r\n      enemy.update();\r\n\r\n      // Rest of your game logic goes here\r\n      // ...\r\n\r\n      // Your collision detection and other game mechanics\r\n      // ...\r\n\r\n      // End game based on health or other conditions\r\n      // ...\r\n\r\n      // Handle other game events and mechanics\r\n      // ...\r\n    }\r\n\r\n    animate();\r\n\r\n    // Event listeners can be added here\r\n    window.addEventListener(\"keydown\", (event) => {\r\n      // Your keydown event handling logic\r\n      \r\n    });\r\n\r\n    window.addEventListener(\"keyup\", (event) => {\r\n      // Your keyup event handling logic\r\n      // ...\r\n    });\r\n\r\n    // Don't forget to remove event listeners on component unmount\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n      window.removeEventListener(\"keyup\", handleKeyUp);\r\n    };\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef}></canvas>;\r\n};\r\n\r\nexport default FightingGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}