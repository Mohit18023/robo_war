{"ast":null,"code":"// // import { player, enemy } from './CanvasGame';\n\n// function rectangularCollision({ rectangle1, rectangle2,player,enemy }) {\n//     return (\n//       rectangle1.attackBox.position.x + rectangle1.attackBox.width >=\n//         rectangle2.position.x &&\n//       rectangle1.attackBox.position.x <=\n//         rectangle2.position.x + rectangle2.width &&\n//       rectangle1.attackBox.position.y + rectangle1.attackBox.height >=\n//         rectangle2.position.y &&\n//       rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\n//     )\n//   }\n\n//   function determineWinner({ player, enemy, timerId }) {\n//     clearTimeout(timerId)\n//     document.querySelector('#displayText').style.display = 'flex'\n//     if (player.health === enemy.health) {\n//       document.querySelector('#displayText').innerHTML = 'Tie'\n//     } else if (player.health > enemy.health) {\n//       document.querySelector('#displayText').innerHTML = 'Player 1 Wins'\n//     } else if (player.health < enemy.health) {\n//       document.querySelector('#displayText').innerHTML = 'Player 2 Wins'\n//     }\n//   }\n\n//   let timer = 60\n//   let timerId\n//   function decreaseTimer() {\n//     if (timer > 0) {\n//       timerId = setTimeout(decreaseTimer, 1000)\n//       timer--\n//       document.querySelector('#timer').innerHTML = timer\n//     }\n\n//     if (timer === 0) {\n//       determineWinner({ player, enemy, timerId })\n//     }\n//   }\n\n//   export { rectangularCollision, determineWinner, timer, timerId, decreaseTimer };\n\n// utils.js\n// Import the necessary elements\nimport { player, enemy } from './CanvasGame';\nfunction rectangularCollision({\n  rectangle1,\n  rectangle2\n}) {\n  return rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width && rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y && rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height;\n}\nfunction determineWinner({\n  player,\n  enemy,\n  timerId\n}) {\n  clearTimeout(timerId);\n  document.querySelector('#displayText').style.display = 'flex';\n  if (player.health === enemy.health) {\n    document.querySelector('#displayText').innerHTML = 'Tie';\n  } else if (player.health > enemy.health) {\n    document.querySelector('#displayText').innerHTML = 'Player 1 Wins';\n  } else if (player.health < enemy.health) {\n    document.querySelector('#displayText').innerHTML = 'Player 2 Wins';\n  }\n}\nlet timer = 60;\nlet timerId;\nfunction decreaseTimer() {\n  if (timer > 0) {\n    timerId = setTimeout(decreaseTimer, 1000);\n    timer--;\n    document.querySelector('#timer').innerHTML = timer;\n  }\n  if (timer === 0) {\n    determineWinner({\n      player,\n      enemy,\n      timerId\n    });\n  }\n}\nexport { rectangularCollision, determineWinner, timer, timerId, decreaseTimer };","map":{"version":3,"names":["player","enemy","rectangularCollision","rectangle1","rectangle2","attackBox","position","x","width","y","height","determineWinner","timerId","clearTimeout","document","querySelector","style","display","health","innerHTML","timer","decreaseTimer","setTimeout"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/utils.js"],"sourcesContent":["// // import { player, enemy } from './CanvasGame';\r\n\r\n// function rectangularCollision({ rectangle1, rectangle2,player,enemy }) {\r\n//     return (\r\n//       rectangle1.attackBox.position.x + rectangle1.attackBox.width >=\r\n//         rectangle2.position.x &&\r\n//       rectangle1.attackBox.position.x <=\r\n//         rectangle2.position.x + rectangle2.width &&\r\n//       rectangle1.attackBox.position.y + rectangle1.attackBox.height >=\r\n//         rectangle2.position.y &&\r\n//       rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\r\n//     )\r\n//   }\r\n  \r\n//   function determineWinner({ player, enemy, timerId }) {\r\n//     clearTimeout(timerId)\r\n//     document.querySelector('#displayText').style.display = 'flex'\r\n//     if (player.health === enemy.health) {\r\n//       document.querySelector('#displayText').innerHTML = 'Tie'\r\n//     } else if (player.health > enemy.health) {\r\n//       document.querySelector('#displayText').innerHTML = 'Player 1 Wins'\r\n//     } else if (player.health < enemy.health) {\r\n//       document.querySelector('#displayText').innerHTML = 'Player 2 Wins'\r\n//     }\r\n//   }\r\n  \r\n//   let timer = 60\r\n//   let timerId\r\n//   function decreaseTimer() {\r\n//     if (timer > 0) {\r\n//       timerId = setTimeout(decreaseTimer, 1000)\r\n//       timer--\r\n//       document.querySelector('#timer').innerHTML = timer\r\n//     }\r\n  \r\n//     if (timer === 0) {\r\n//       determineWinner({ player, enemy, timerId })\r\n//     }\r\n//   }\r\n\r\n//   export { rectangularCollision, determineWinner, timer, timerId, decreaseTimer };\r\n\r\n// utils.js\r\n// Import the necessary elements\r\nimport { player, enemy } from './CanvasGame';\r\n\r\nfunction rectangularCollision({ rectangle1, rectangle2 }) {\r\n  return (\r\n    rectangle1.attackBox.position.x + rectangle1.attackBox.width >=\r\n      rectangle2.position.x &&\r\n    rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width &&\r\n    rectangle1.attackBox.position.y + rectangle1.attackBox.height >=\r\n      rectangle2.position.y &&\r\n    rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\r\n  );\r\n}\r\n\r\nfunction determineWinner({ player, enemy, timerId }) {\r\n  clearTimeout(timerId);\r\n  document.querySelector('#displayText').style.display = 'flex';\r\n  if (player.health === enemy.health) {\r\n    document.querySelector('#displayText').innerHTML = 'Tie';\r\n  } else if (player.health > enemy.health) {\r\n    document.querySelector('#displayText').innerHTML = 'Player 1 Wins';\r\n  } else if (player.health < enemy.health) {\r\n    document.querySelector('#displayText').innerHTML = 'Player 2 Wins';\r\n  }\r\n}\r\n\r\nlet timer = 60;\r\nlet timerId;\r\n\r\nfunction decreaseTimer() {\r\n  if (timer > 0) {\r\n    timerId = setTimeout(decreaseTimer, 1000);\r\n    timer--;\r\n    document.querySelector('#timer').innerHTML = timer;\r\n  }\r\n\r\n  if (timer === 0) {\r\n    determineWinner({ player, enemy, timerId });\r\n  }\r\n}\r\n\r\nexport { rectangularCollision, determineWinner, timer, timerId, decreaseTimer };\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAASA,MAAM,EAAEC,KAAK,QAAQ,cAAc;AAE5C,SAASC,oBAAoBA,CAAC;EAAEC,UAAU;EAAEC;AAAW,CAAC,EAAE;EACxD,OACED,UAAU,CAACE,SAAS,CAACC,QAAQ,CAACC,CAAC,GAAGJ,UAAU,CAACE,SAAS,CAACG,KAAK,IAC1DJ,UAAU,CAACE,QAAQ,CAACC,CAAC,IACvBJ,UAAU,CAACE,SAAS,CAACC,QAAQ,CAACC,CAAC,IAAIH,UAAU,CAACE,QAAQ,CAACC,CAAC,GAAGH,UAAU,CAACI,KAAK,IAC3EL,UAAU,CAACE,SAAS,CAACC,QAAQ,CAACG,CAAC,GAAGN,UAAU,CAACE,SAAS,CAACK,MAAM,IAC3DN,UAAU,CAACE,QAAQ,CAACG,CAAC,IACvBN,UAAU,CAACE,SAAS,CAACC,QAAQ,CAACG,CAAC,IAAIL,UAAU,CAACE,QAAQ,CAACG,CAAC,GAAGL,UAAU,CAACM,MAAM;AAEhF;AAEA,SAASC,eAAeA,CAAC;EAAEX,MAAM;EAAEC,KAAK;EAAEW;AAAQ,CAAC,EAAE;EACnDC,YAAY,CAACD,OAAO,CAAC;EACrBE,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC,CAACC,KAAK,CAACC,OAAO,GAAG,MAAM;EAC7D,IAAIjB,MAAM,CAACkB,MAAM,KAAKjB,KAAK,CAACiB,MAAM,EAAE;IAClCJ,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC,CAACI,SAAS,GAAG,KAAK;EAC1D,CAAC,MAAM,IAAInB,MAAM,CAACkB,MAAM,GAAGjB,KAAK,CAACiB,MAAM,EAAE;IACvCJ,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC,CAACI,SAAS,GAAG,eAAe;EACpE,CAAC,MAAM,IAAInB,MAAM,CAACkB,MAAM,GAAGjB,KAAK,CAACiB,MAAM,EAAE;IACvCJ,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC,CAACI,SAAS,GAAG,eAAe;EACpE;AACF;AAEA,IAAIC,KAAK,GAAG,EAAE;AACd,IAAIR,OAAO;AAEX,SAASS,aAAaA,CAAA,EAAG;EACvB,IAAID,KAAK,GAAG,CAAC,EAAE;IACbR,OAAO,GAAGU,UAAU,CAACD,aAAa,EAAE,IAAI,CAAC;IACzCD,KAAK,EAAE;IACPN,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAACI,SAAS,GAAGC,KAAK;EACpD;EAEA,IAAIA,KAAK,KAAK,CAAC,EAAE;IACfT,eAAe,CAAC;MAAEX,MAAM;MAAEC,KAAK;MAAEW;IAAQ,CAAC,CAAC;EAC7C;AACF;AAEA,SAASV,oBAAoB,EAAES,eAAe,EAAES,KAAK,EAAER,OAAO,EAAES,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}