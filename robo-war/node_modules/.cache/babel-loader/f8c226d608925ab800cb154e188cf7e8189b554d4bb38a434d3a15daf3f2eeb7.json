{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './Components.css'; // Import your component-specific CSS file\n\nimport spriteImage from './Images/background.png';\nimport kenjiIdle from './Images/kenji/Idle.png';\nimport samuraiIdle from './Images/samuraiMack/Idle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPlayerState = {\n  position: {\n    x: 0,\n    y: 0\n  },\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  offset: {\n    x: 0,\n    y: 0\n  },\n  // imageSrc: './img/samuraiMack/Idle.png',\n  imageSrc: sa,\n  framesMax: 8,\n  scale: 2.5,\n  offset: {\n    x: 215,\n    y: 157\n  },\n  sprites: {\n    idle: {\n      imageSrc: './img/samuraiMack/Idle.png',\n      framesMax: 8\n    }\n    // ... Add other sprite definitions here\n  },\n\n  attackBox: {\n    offset: {\n      x: 100,\n      y: 50\n    },\n    width: 160,\n    height: 50\n  }\n};\nconst initialEnemyState = {\n  position: {\n    x: 400,\n    y: 100\n  },\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  color: 'blue',\n  offset: {\n    x: -50,\n    y: 0\n  },\n  // imageSrc: './img/kenji/Idle.png',\n  imageSrc: kenjiIdle,\n  framesMax: 4,\n  scale: 2.5,\n  offset: {\n    x: 215,\n    y: 167\n  },\n  sprites: {\n    idle: {\n      // imageSrc: './img/kenji/Idle.png',\n      imageSrc: kenjiIdle,\n      framesMax: 4\n    }\n    // ... Add other sprite definitions here\n  },\n\n  attackBox: {\n    offset: {\n      x: -170,\n      y: 50\n    },\n    width: 170,\n    height: 50\n  }\n};\nfunction CanvasDrawing() {\n  _s();\n  // Create a ref for the canvas element\n  const canvasRef = useRef(null);\n  const [player, setPlayer] = useState(initialPlayerState);\n  const [enemy, setEnemy] = useState(initialEnemyState);\n  const [keys, setKeys] = useState({\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    ArrowRight: {\n      pressed: false\n    },\n    ArrowLeft: {\n      pressed: false\n    }\n  });\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const gravity = 0.7;\n\n    // Set canvas dimensions\n    canvas.width = 1024;\n    canvas.height = 576;\n\n    // Use the spriteImage as the background\n    const backgroundImage = new Image();\n    backgroundImage.src = spriteImage;\n\n    // Once the image is loaded, draw it on the canvas\n    backgroundImage.onload = () => {\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n      // Other drawing code here\n      // ctx.fillStyle = 'blue';\n      // ctx.fillRect(0, 0, canvas.width, canvas.height);\n      // Draw the sprite image\n      const playerImage = new Image();\n      // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\n      playerImage.src = kenjiIdle;\n      playerImage.onload = () => {\n        // Draw the player image at the desired position (player.position.x, player.position.y)\n        ctx.drawImage(playerImage, player.position.x, player.position.y);\n      };\n    };\n    const handleKeyDown = event => {\n      // Update the keys state based on the pressed key\n      setKeys(prevKeys => ({\n        ...prevKeys,\n        [event.key]: {\n          pressed: true\n        }\n      }));\n    };\n    const handleKeyUp = event => {\n      // Update the keys state when a key is released\n      setKeys(prevKeys => ({\n        ...prevKeys,\n        [event.key]: {\n          pressed: false\n        }\n      }));\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    // Cleanup (optional)\n    return () => {\n      // You can perform cleanup here if needed\n    };\n  }, []); // Empty dependency array to run only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasDrawing, \"WpntU6eje/fYB/j/xXV9wePoR+g=\");\n_c = CanvasDrawing;\nexport default CanvasDrawing;\nvar _c;\n$RefreshReg$(_c, \"CanvasDrawing\");","map":{"version":3,"names":["React","useRef","useEffect","useState","spriteImage","kenjiIdle","samuraiIdle","jsxDEV","_jsxDEV","initialPlayerState","position","x","y","velocity","offset","imageSrc","sa","framesMax","scale","sprites","idle","attackBox","width","height","initialEnemyState","color","CanvasDrawing","_s","canvasRef","player","setPlayer","enemy","setEnemy","keys","setKeys","a","pressed","d","ArrowRight","ArrowLeft","canvas","current","ctx","getContext","gravity","backgroundImage","Image","src","onload","drawImage","playerImage","handleKeyDown","event","prevKeys","key","handleKeyUp","window","addEventListener","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport './Components.css'; // Import your component-specific CSS file\r\n\r\nimport spriteImage from './Images/background.png';\r\nimport kenjiIdle from './Images/kenji/Idle.png';\r\nimport samuraiIdle from './Images/samuraiMack/Idle.png';\r\n\r\nconst initialPlayerState = {\r\n  position: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  velocity: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  offset: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  // imageSrc: './img/samuraiMack/Idle.png',\r\n  imageSrc: sa,\r\n  framesMax: 8,\r\n  scale: 2.5,\r\n  offset: {\r\n    x: 215,\r\n    y: 157\r\n  },\r\n  sprites: {\r\n    idle: {\r\n      imageSrc: './img/samuraiMack/Idle.png',\r\n      framesMax: 8\r\n    },\r\n    // ... Add other sprite definitions here\r\n  },\r\n  attackBox: {\r\n    offset: {\r\n      x: 100,\r\n      y: 50\r\n    },\r\n    width: 160,\r\n    height: 50\r\n  }\r\n};\r\nconst initialEnemyState = {\r\n  position: {\r\n    x: 400,\r\n    y: 100\r\n  },\r\n  velocity: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  color: 'blue',\r\n  offset: {\r\n    x: -50,\r\n    y: 0\r\n  },\r\n  // imageSrc: './img/kenji/Idle.png',\r\n  imageSrc: kenjiIdle,\r\n  framesMax: 4,\r\n  scale: 2.5,\r\n  offset: {\r\n    x: 215,\r\n    y: 167\r\n  },\r\n  sprites: {\r\n    idle: {\r\n      // imageSrc: './img/kenji/Idle.png',\r\n      imageSrc: kenjiIdle,\r\n      framesMax: 4\r\n    },\r\n    // ... Add other sprite definitions here\r\n  },\r\n  attackBox: {\r\n    offset: {\r\n      x: -170,\r\n      y: 50\r\n    },\r\n    width: 170,\r\n    height: 50\r\n  }\r\n};\r\nfunction CanvasDrawing() {\r\n  // Create a ref for the canvas element\r\n  const canvasRef = useRef(null);\r\n  const [player, setPlayer] = useState(initialPlayerState);\r\n  const [enemy, setEnemy] = useState(initialEnemyState);\r\n  const [keys, setKeys] = useState({\r\n    a: {\r\n      pressed: false\r\n    },\r\n    d: {\r\n      pressed: false\r\n    },\r\n    ArrowRight: {\r\n      pressed: false\r\n    },\r\n    ArrowLeft: {\r\n      pressed: false\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const gravity = 0.7;\r\n\r\n    // Set canvas dimensions\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    // Use the spriteImage as the background\r\n    const backgroundImage = new Image();\r\n    backgroundImage.src = spriteImage;\r\n    \r\n    // Once the image is loaded, draw it on the canvas\r\n    backgroundImage.onload = () => {\r\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n    \r\n\r\n    // Other drawing code here\r\n    // ctx.fillStyle = 'blue';\r\n    // ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// Draw the sprite image\r\nconst playerImage = new Image();\r\n// playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\r\nplayerImage.src = kenjiIdle; \r\nplayerImage.onload = () => {\r\n  // Draw the player image at the desired position (player.position.x, player.position.y)\r\n  ctx.drawImage(playerImage, player.position.x, player.position.y);\r\n};\r\n};\r\n    const handleKeyDown = (event) => {\r\n      // Update the keys state based on the pressed key\r\n      setKeys((prevKeys) => ({\r\n        ...prevKeys,\r\n        [event.key]: {\r\n          pressed: true\r\n        }\r\n      }));\r\n    };\r\n\r\n    const handleKeyUp = (event) => {\r\n      // Update the keys state when a key is released\r\n      setKeys((prevKeys) => ({\r\n        ...prevKeys,\r\n        [event.key]: {\r\n          pressed: false\r\n        }\r\n      }));\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n    \r\n    // Cleanup (optional)\r\n    return () => {\r\n      // You can perform cleanup here if needed\r\n    };\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanvasDrawing;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}