{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\Canvas.js\";\n// import { useRef, useEffect } from 'react';\n\n// export function Canvas(props) {\n//   const canvasRef = useRef(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n\n//     context.fillStyle = 'red';\n//     context.fillRect(0, 0, props.width, props.height);\n\n//     const clickHandler = () => {\n//       context.fillStyle = 'blue';\n//       context.fillRect(0, 0, props.width, props.height);\n//     };\n\n//     canvas.addEventListener('click', clickHandler);\n\n//     return () => {\n//       canvas.removeEventListener('click', clickHandler);\n//     };\n//   }, []);\n\n//   return <canvas ref={canvasRef} width={props.width} height={props.height} />;\n// }\n// export default Canvas;\n\n// import { useRef, useEffect } from 'react';\n\n// export function Canvas(props) {\n//   const canvasRef = useRef(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n\n//     context.fillStyle = 'red';\n//     context.fillRect(0, 0, props.width, props.height);\n\n//     const clickHandler = () => {\n//       context.fillStyle = 'blue';\n//       context.fillRect(0, 0, props.width, props.height);\n//     };\n\n//     canvas.addEventListener('click', clickHandler);\n\n//     return () => {\n//       canvas.removeEventListener('click', clickHandler);\n//     };\n//   }, []);\n\n//   return <canvas ref={canvasRef} width={props.width} height={props.height} />;\n// }\n\n// export default Canvas;\n\n// const canvas = document.querySelector('canvas');\n// const c = canvas.getContext('2d')\n\n// canvas.width = 1024\n// canvas.height = 576\n\n// c.fillRect(0, 0, canvas.width, canvas.height)\n\n// const gravity = 0.7\n\n// class Sprite {\n//     constructor({position, velocity, color = 'red',offset }) {\n//         this.position = position\n//         this.velocity = velocity\n//         this.width = 50\n//         this.height = 150\n//         this.lastKey\n//         this.attackBox = {\n//             position: {\n//                 x: this.position.x,\n//                 y: this.position.y\n//             },\n//             offset,\n//                 width: 100,\n//                 height:50  \n\n//         }\n//         this.color = color\n//         this.isAttacking\n//     }\n//     draw() {\n//         c.fillStyle = this.color\n//         c.fillRect(this.position.x, this.position.y, this.width, this.height)\n\n// // attack box\n// if (this.isAttacking ) {\n// c.fillStyle = 'green'\n\n// c.fillRect(this.attackBox.position.x , \n//     this.attackBox.position.y, \n//     this.attackBox.width, \n//     this.attackBox.height\n//     )\n// }\n//     }\n//     update() {\n//         this.draw()\n//         this.attackBox.position.x =this.position.x +this.attackBox.offset.x\n//         this.attackBox.position.y =this.position.y\n\n//         this.position.x +=this.velocity.x\n//         this.position.y +=this.velocity.y\n\n//         this.position.y = this.position.y +=this.velocity.y\n\n//         if (this.position.y + this.height +this.velocity.y >=canvas.height) {\n//             this.velocity.y = 0\n//         } else\n//         this.velocity.y +=gravity\n//     }\n\n//     attack() \n//     {\n//         this.isAttacking = true\n//         setTimeout(() => {\n//             this.isAttacking = false\n\n//         },100)\n//     }\n// }\n\n// const player = new Sprite({\n//     position: {\n//     x:0,\n//     y:0\n// },\n// velocity:{\n//     x: 0,\n//     y:0\n// },\n// offset: {\n//     x: -50,\n//     y: 0\n// }})\n\n// const enemy = new Sprite({\n//     position: {\n//     x:400,\n//     y:100\n// },\n// velocity:{\n//     x: 0,\n//     y:0\n// },\n// color:'blue',\n// offset: {\n//     x: -50,\n//     y: 0\n// }\n// })\n\n// console.log(player)\n\n// const keys = {\n//     a: {\n//         pressed: false\n//     },\n//     d: {\n//         pressed: false\n//     },\n//     ArrowRight:  {\n//         pressed: false\n//     },\n//     ArrowLeft: {\n//         pressed:false\n//     }\n\n// }\n\n// function rectangularCollision({\n//     rectangle1, rectangle2\n// }){\n//     return (\n//         rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && \n//         rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width &&\n//         rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y &&\n//         rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\n//     )\n// }\n// function animate()  {\n//     window.requestAnimationFrame(animate)\n//     c.fillStyle = 'black'\n//     c.fillRect(0, 0, canvas.width, canvas.height)\n//     player.update()\n//     enemy.update()\n\n//     player.velocity.x = 0\n//     enemy.velocity.x = 0\n\n// // player movement\n//     if (keys.a.pressed && player.lastKey === 'a')  {\n//         player.velocity.x = -5\n//     } else if (keys.d.pressed && player.lastKey === 'd') {\n//         player.velocity.x = 5\n//     }\n\n//     //enemy movement\n//     if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft')  {\n//         enemy.velocity.x = -5\n//     } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n//         enemy.velocity.x = 5\n//     }\n//     //detect for collison\n//     if (rectangularCollision({\n//         rectangle1: player,\n//         rectangle2: enemy\n//     }) &&\n//         player.isAttacking) {\n//             player.isAttacking = false\n//         console.log('go')\n//     }\n//     if (rectangularCollision({\n//         rectangle1: enemy,\n//         rectangle2: player\n//     }) &&\n//         enemy.isAttacking) {\n//             enemy.isAttacking = false\n//         console.log('enemy attack successful')\n//     }\n\n// }\n\n// animate()\n\n// window.addEventListener('keydown', (event) => {\n//     switch(event.key) {\n//     case 'd':\n//         keys.d.pressed = true  \n//         player.lastKey = 'd'     \n//          break\n//     case 'a':\n//             keys.a.pressed = true   \n//             player.lastKey = 'a'    \n//              break\n\n//     case 'w':\n//                 player.velocity.y = -10  \n//                  break\n//     case ' ':\n//         player.attack()\n//         break\n\n//     case 'ArrowRight':\n//                     keys.ArrowRight.pressed = true  \n//                     lastKey = 'd'   \n//                     enemy.lastKey = 'ArrowRight'  \n//                      break\n//     case 'ArrowLeft':\n//                         keys.ArrowLeft.pressed = true   \n//                         lastKey = 'a' \n//                         enemy.lastKey = 'ArrowLeft'   \n//                          break\n\n//     case 'ArrowUp':\n//                             enemy.velocity.y = -10  \n//                              break\n//     case 'ArrowDown':\n//         enemy.isAttacking = true\n//                              break\n//     }\n\n// })\n\n// window.addEventListener('keyup', (event) => {\n//     switch(event.key) {\n//     case 'd':\n//         keys.d.pressed = false\n//                 break\n//         case 'a':\n//             keys.a.pressed = false\n//                     break\n\n//     }\n//     //enemy keys\n//     switch(event.key) {\n//         case 'ArrowRight':\n//             keys.ArrowRight.pressed = false\n//                     break\n//             case 'ArrowLeft':\n//                 keys.ArrowLeft.pressed = false\n//                         break\n// }\n// }\n// )\n\nimport Classes from './Classes.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst canvas = document.querySelector('canvas');\nconst c = canvas.getContext('2d');\ncanvas.width = 1024;\ncanvas.height = 576;\nc.fillRect(0, 0, canvas.width, canvas.height);\nconst gravity = 0.7;\nconst background = new Sprite({\n  position: {\n    x: 0,\n    y: 0\n  },\n  imageSrc: './img/background.png'\n});\nconst shop = new Sprite({\n  position: {\n    x: 650,\n    y: 128\n  },\n  imageSrc: './img/shop.png',\n  scale: 2.75,\n  framesMax: 6\n});\nconst player = new Fighter({\n  position: {\n    x: 0,\n    y: 0\n  },\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  offset: {\n    x: 0,\n    y: 0\n  },\n  imageSrc: './img/samuraiMack/Idle.png',\n  framesMax: 8,\n  scale: 2.5,\n  offset: {\n    x: 215,\n    y: 157\n  },\n  sprites: {\n    idle: {\n      imageSrc: './img/samuraiMack/Idle.png',\n      framesMax: 8\n    },\n    run: {\n      imageSrc: './img/samuraiMack/Run.png',\n      framesMax: 8\n    },\n    jump: {\n      imageSrc: './img/samuraiMack/Jump.png',\n      framesMax: 2\n    },\n    fall: {\n      imageSrc: './img/samuraiMack/Fall.png',\n      framesMax: 2\n    },\n    attack1: {\n      imageSrc: './img/samuraiMack/Attack1.png',\n      framesMax: 6\n    },\n    takeHit: {\n      imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\n      framesMax: 4\n    },\n    death: {\n      imageSrc: './img/samuraiMack/Death.png',\n      framesMax: 6\n    }\n  },\n  attackBox: {\n    offset: {\n      x: 100,\n      y: 50\n    },\n    width: 160,\n    height: 50\n  }\n});\nconst enemy = new Fighter({\n  position: {\n    x: 400,\n    y: 100\n  },\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  color: 'blue',\n  offset: {\n    x: -50,\n    y: 0\n  },\n  imageSrc: './img/kenji/Idle.png',\n  framesMax: 4,\n  scale: 2.5,\n  offset: {\n    x: 215,\n    y: 167\n  },\n  sprites: {\n    idle: {\n      imageSrc: './img/kenji/Idle.png',\n      framesMax: 4\n    },\n    run: {\n      imageSrc: './img/kenji/Run.png',\n      framesMax: 8\n    },\n    jump: {\n      imageSrc: './img/kenji/Jump.png',\n      framesMax: 2\n    },\n    fall: {\n      imageSrc: './img/kenji/Fall.png',\n      framesMax: 2\n    },\n    attack1: {\n      imageSrc: './img/kenji/Attack1.png',\n      framesMax: 4\n    },\n    takeHit: {\n      imageSrc: './img/kenji/Take hit.png',\n      framesMax: 3\n    },\n    death: {\n      imageSrc: './img/kenji/Death.png',\n      framesMax: 7\n    }\n  },\n  attackBox: {\n    offset: {\n      x: -170,\n      y: 50\n    },\n    width: 170,\n    height: 50\n  }\n});\nconsole.log(player);\nconst keys = {\n  a: {\n    pressed: false\n  },\n  d: {\n    pressed: false\n  },\n  ArrowRight: {\n    pressed: false\n  },\n  ArrowLeft: {\n    pressed: false\n  }\n};\ndecreaseTimer();\nfunction animate() {\n  window.requestAnimationFrame(animate);\n  c.fillStyle = 'black';\n  c.fillRect(0, 0, canvas.width, canvas.height);\n  background.update();\n  shop.update();\n  c.fillStyle = 'rgba(255, 255, 255, 0.15)';\n  c.fillRect(0, 0, canvas.width, canvas.height);\n  player.update();\n  enemy.update();\n  player.velocity.x = 0;\n  enemy.velocity.x = 0;\n\n  // player movement\n\n  if (keys.a.pressed && player.lastKey === 'a') {\n    player.velocity.x = -5;\n    player.switchSprite('run');\n  } else if (keys.d.pressed && player.lastKey === 'd') {\n    player.velocity.x = 5;\n    player.switchSprite('run');\n  } else {\n    player.switchSprite('idle');\n  }\n\n  // jumping\n  if (player.velocity.y < 0) {\n    player.switchSprite('jump');\n  } else if (player.velocity.y > 0) {\n    player.switchSprite('fall');\n  }\n\n  // Enemy movement\n  if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n    enemy.velocity.x = -5;\n    enemy.switchSprite('run');\n  } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n    enemy.velocity.x = 5;\n    enemy.switchSprite('run');\n  } else {\n    enemy.switchSprite('idle');\n  }\n\n  // jumping\n  if (enemy.velocity.y < 0) {\n    enemy.switchSprite('jump');\n  } else if (enemy.velocity.y > 0) {\n    enemy.switchSprite('fall');\n  }\n\n  // detect for collision & enemy gets hit\n  if (rectangularCollision({\n    rectangle1: player,\n    rectangle2: enemy\n  }) && player.isAttacking && player.framesCurrent === 4) {\n    enemy.takeHit();\n    player.isAttacking = false;\n    gsap.to('#enemyHealth', {\n      width: enemy.health + '%'\n    });\n  }\n\n  // if player misses\n  if (player.isAttacking && player.framesCurrent === 4) {\n    player.isAttacking = false;\n  }\n\n  // this is where our player gets hit\n  if (rectangularCollision({\n    rectangle1: enemy,\n    rectangle2: player\n  }) && enemy.isAttacking && enemy.framesCurrent === 2) {\n    player.takeHit();\n    enemy.isAttacking = false;\n    gsap.to('#playerHealth', {\n      width: player.health + '%'\n    });\n  }\n\n  // if player misses\n  if (enemy.isAttacking && enemy.framesCurrent === 2) {\n    enemy.isAttacking = false;\n  }\n\n  // end game based on health\n  if (enemy.health <= 0 || player.health <= 0) {\n    determineWinner({\n      player,\n      enemy,\n      timerId\n    });\n  }\n}\nanimate();\nwindow.addEventListener('keydown', event => {\n  if (!player.dead) {\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = true;\n        player.lastKey = 'd';\n        break;\n      case 'a':\n        keys.a.pressed = true;\n        player.lastKey = 'a';\n        break;\n      case 'w':\n        player.velocity.y = -20;\n        break;\n      case ' ':\n        player.attack();\n        break;\n    }\n  }\n  if (!enemy.dead) {\n    switch (event.key) {\n      case 'ArrowRight':\n        keys.ArrowRight.pressed = true;\n        enemy.lastKey = 'ArrowRight';\n        break;\n      case 'ArrowLeft':\n        keys.ArrowLeft.pressed = true;\n        enemy.lastKey = 'ArrowLeft';\n        break;\n      case 'ArrowUp':\n        enemy.velocity.y = -20;\n        break;\n      case 'ArrowDown':\n        enemy.attack();\n        break;\n    }\n  }\n});\nwindow.addEventListener('keyup', event => {\n  switch (event.key) {\n    case 'd':\n      keys.d.pressed = false;\n      break;\n    case 'a':\n      keys.a.pressed = false;\n      break;\n  }\n\n  // enemy keys\n  switch (event.key) {\n    case 'ArrowRight':\n      keys.ArrowRight.pressed = false;\n      break;\n    case 'ArrowLeft':\n      keys.ArrowLeft.pressed = false;\n      break;\n  }\n  /*#__PURE__*/_jsxDEV(Classes, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 636,\n    columnNumber: 3\n  }, this);\n});","map":{"version":3,"names":["Classes","jsxDEV","_jsxDEV","canvas","document","querySelector","c","getContext","width","height","fillRect","gravity","background","Sprite","position","x","y","imageSrc","shop","scale","framesMax","player","Fighter","velocity","offset","sprites","idle","run","jump","fall","attack1","takeHit","death","attackBox","enemy","color","console","log","keys","a","pressed","d","ArrowRight","ArrowLeft","decreaseTimer","animate","window","requestAnimationFrame","fillStyle","update","lastKey","switchSprite","rectangularCollision","rectangle1","rectangle2","isAttacking","framesCurrent","gsap","to","health","determineWinner","timerId","addEventListener","event","dead","key","attack","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Canvas.js"],"sourcesContent":["// import { useRef, useEffect } from 'react';\r\n\r\n// export function Canvas(props) {\r\n//   const canvasRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const context = canvas.getContext('2d');\r\n\r\n//     context.fillStyle = 'red';\r\n//     context.fillRect(0, 0, props.width, props.height);\r\n\r\n//     const clickHandler = () => {\r\n//       context.fillStyle = 'blue';\r\n//       context.fillRect(0, 0, props.width, props.height);\r\n//     };\r\n\r\n//     canvas.addEventListener('click', clickHandler);\r\n\r\n//     return () => {\r\n//       canvas.removeEventListener('click', clickHandler);\r\n//     };\r\n//   }, []);\r\n\r\n//   return <canvas ref={canvasRef} width={props.width} height={props.height} />;\r\n// }\r\n// export default Canvas;\r\n\r\n// import { useRef, useEffect } from 'react';\r\n\r\n// export function Canvas(props) {\r\n//   const canvasRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const context = canvas.getContext('2d');\r\n\r\n//     context.fillStyle = 'red';\r\n//     context.fillRect(0, 0, props.width, props.height);\r\n\r\n//     const clickHandler = () => {\r\n//       context.fillStyle = 'blue';\r\n//       context.fillRect(0, 0, props.width, props.height);\r\n//     };\r\n\r\n//     canvas.addEventListener('click', clickHandler);\r\n\r\n//     return () => {\r\n//       canvas.removeEventListener('click', clickHandler);\r\n//     };\r\n//   }, []);\r\n\r\n//   return <canvas ref={canvasRef} width={props.width} height={props.height} />;\r\n// }\r\n\r\n// export default Canvas;\r\n\r\n\r\n\r\n// const canvas = document.querySelector('canvas');\r\n// const c = canvas.getContext('2d')\r\n\r\n// canvas.width = 1024\r\n// canvas.height = 576\r\n\r\n// c.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n// const gravity = 0.7\r\n\r\n// class Sprite {\r\n//     constructor({position, velocity, color = 'red',offset }) {\r\n//         this.position = position\r\n//         this.velocity = velocity\r\n//         this.width = 50\r\n//         this.height = 150\r\n//         this.lastKey\r\n//         this.attackBox = {\r\n//             position: {\r\n//                 x: this.position.x,\r\n//                 y: this.position.y\r\n//             },\r\n//             offset,\r\n//                 width: 100,\r\n//                 height:50  \r\n        \r\n        \r\n           \r\n//         }\r\n//         this.color = color\r\n//         this.isAttacking\r\n//     }\r\n//     draw() {\r\n//         c.fillStyle = this.color\r\n//         c.fillRect(this.position.x, this.position.y, this.width, this.height)\r\n\r\n// // attack box\r\n// if (this.isAttacking ) {\r\n// c.fillStyle = 'green'\r\n\r\n// c.fillRect(this.attackBox.position.x , \r\n//     this.attackBox.position.y, \r\n//     this.attackBox.width, \r\n//     this.attackBox.height\r\n//     )\r\n// }\r\n//     }\r\n//     update() {\r\n//         this.draw()\r\n//         this.attackBox.position.x =this.position.x +this.attackBox.offset.x\r\n//         this.attackBox.position.y =this.position.y\r\n\r\n//         this.position.x +=this.velocity.x\r\n//         this.position.y +=this.velocity.y\r\n        \r\n//         this.position.y = this.position.y +=this.velocity.y\r\n\r\n//         if (this.position.y + this.height +this.velocity.y >=canvas.height) {\r\n//             this.velocity.y = 0\r\n//         } else\r\n//         this.velocity.y +=gravity\r\n//     }\r\n\r\n//     attack() \r\n//     {\r\n//         this.isAttacking = true\r\n//         setTimeout(() => {\r\n//             this.isAttacking = false\r\n\r\n//         },100)\r\n//     }\r\n// }\r\n\r\n\r\n// const player = new Sprite({\r\n//     position: {\r\n//     x:0,\r\n//     y:0\r\n// },\r\n// velocity:{\r\n//     x: 0,\r\n//     y:0\r\n// },\r\n// offset: {\r\n//     x: -50,\r\n//     y: 0\r\n// }})\r\n\r\n\r\n\r\n// const enemy = new Sprite({\r\n//     position: {\r\n//     x:400,\r\n//     y:100\r\n// },\r\n// velocity:{\r\n//     x: 0,\r\n//     y:0\r\n// },\r\n// color:'blue',\r\n// offset: {\r\n//     x: -50,\r\n//     y: 0\r\n// }\r\n// })\r\n\r\n\r\n// console.log(player)\r\n\r\n// const keys = {\r\n//     a: {\r\n//         pressed: false\r\n//     },\r\n//     d: {\r\n//         pressed: false\r\n//     },\r\n//     ArrowRight:  {\r\n//         pressed: false\r\n//     },\r\n//     ArrowLeft: {\r\n//         pressed:false\r\n//     }\r\n    \r\n// }\r\n\r\n\r\n// function rectangularCollision({\r\n//     rectangle1, rectangle2\r\n// }){\r\n//     return (\r\n//         rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && \r\n//         rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width &&\r\n//         rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y &&\r\n//         rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height\r\n//     )\r\n// }\r\n// function animate()  {\r\n//     window.requestAnimationFrame(animate)\r\n//     c.fillStyle = 'black'\r\n//     c.fillRect(0, 0, canvas.width, canvas.height)\r\n//     player.update()\r\n//     enemy.update()\r\n\r\n//     player.velocity.x = 0\r\n//     enemy.velocity.x = 0\r\n\r\n// // player movement\r\n//     if (keys.a.pressed && player.lastKey === 'a')  {\r\n//         player.velocity.x = -5\r\n//     } else if (keys.d.pressed && player.lastKey === 'd') {\r\n//         player.velocity.x = 5\r\n//     }\r\n\r\n//     //enemy movement\r\n//     if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft')  {\r\n//         enemy.velocity.x = -5\r\n//     } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n//         enemy.velocity.x = 5\r\n//     }\r\n//     //detect for collison\r\n//     if (rectangularCollision({\r\n//         rectangle1: player,\r\n//         rectangle2: enemy\r\n//     }) &&\r\n//         player.isAttacking) {\r\n//             player.isAttacking = false\r\n//         console.log('go')\r\n//     }\r\n//     if (rectangularCollision({\r\n//         rectangle1: enemy,\r\n//         rectangle2: player\r\n//     }) &&\r\n//         enemy.isAttacking) {\r\n//             enemy.isAttacking = false\r\n//         console.log('enemy attack successful')\r\n//     }\r\n\r\n// }\r\n\r\n// animate()\r\n\r\n// window.addEventListener('keydown', (event) => {\r\n//     switch(event.key) {\r\n//     case 'd':\r\n//         keys.d.pressed = true  \r\n//         player.lastKey = 'd'     \r\n//          break\r\n//     case 'a':\r\n//             keys.a.pressed = true   \r\n//             player.lastKey = 'a'    \r\n//              break\r\n\r\n//     case 'w':\r\n//                 player.velocity.y = -10  \r\n//                  break\r\n//     case ' ':\r\n//         player.attack()\r\n//         break\r\n\r\n//     case 'ArrowRight':\r\n//                     keys.ArrowRight.pressed = true  \r\n//                     lastKey = 'd'   \r\n//                     enemy.lastKey = 'ArrowRight'  \r\n//                      break\r\n//     case 'ArrowLeft':\r\n//                         keys.ArrowLeft.pressed = true   \r\n//                         lastKey = 'a' \r\n//                         enemy.lastKey = 'ArrowLeft'   \r\n//                          break\r\n            \r\n//     case 'ArrowUp':\r\n//                             enemy.velocity.y = -10  \r\n//                              break\r\n//     case 'ArrowDown':\r\n//         enemy.isAttacking = true\r\n//                              break\r\n//     }\r\n    \r\n// })\r\n\r\n\r\n// window.addEventListener('keyup', (event) => {\r\n//     switch(event.key) {\r\n//     case 'd':\r\n//         keys.d.pressed = false\r\n//                 break\r\n//         case 'a':\r\n//             keys.a.pressed = false\r\n//                     break\r\n        \r\n//     }\r\n//     //enemy keys\r\n//     switch(event.key) {\r\n//         case 'ArrowRight':\r\n//             keys.ArrowRight.pressed = false\r\n//                     break\r\n//             case 'ArrowLeft':\r\n//                 keys.ArrowLeft.pressed = false\r\n//                         break\r\n// }\r\n// }\r\n// )\r\n\r\n\r\nimport Classes from './Classes.jsx';\r\nconst canvas = document.querySelector('canvas')\r\nconst c = canvas.getContext('2d')\r\n\r\ncanvas.width = 1024\r\ncanvas.height = 576\r\n\r\nc.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\nconst gravity = 0.7\r\n\r\nconst background = new Sprite({\r\n  position: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  imageSrc: './img/background.png'\r\n})\r\n\r\nconst shop = new Sprite({\r\n  position: {\r\n    x: 650,\r\n    y: 128\r\n  },\r\n  imageSrc: './img/shop.png',\r\n  scale: 2.75,\r\n  framesMax: 6\r\n})\r\n\r\nconst player = new Fighter({\r\n  position: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  velocity: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  offset: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  imageSrc: './img/samuraiMack/Idle.png',\r\n  framesMax: 8,\r\n  scale: 2.5,\r\n  offset: {\r\n    x: 215,\r\n    y: 157\r\n  },\r\n  sprites: {\r\n    idle: {\r\n      imageSrc: './img/samuraiMack/Idle.png',\r\n      framesMax: 8\r\n    },\r\n    run: {\r\n      imageSrc: './img/samuraiMack/Run.png',\r\n      framesMax: 8\r\n    },\r\n    jump: {\r\n      imageSrc: './img/samuraiMack/Jump.png',\r\n      framesMax: 2\r\n    },\r\n    fall: {\r\n      imageSrc: './img/samuraiMack/Fall.png',\r\n      framesMax: 2\r\n    },\r\n    attack1: {\r\n      imageSrc: './img/samuraiMack/Attack1.png',\r\n      framesMax: 6\r\n    },\r\n    takeHit: {\r\n      imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\r\n      framesMax: 4\r\n    },\r\n    death: {\r\n      imageSrc: './img/samuraiMack/Death.png',\r\n      framesMax: 6\r\n    }\r\n  },\r\n  attackBox: {\r\n    offset: {\r\n      x: 100,\r\n      y: 50\r\n    },\r\n    width: 160,\r\n    height: 50\r\n  }\r\n})\r\n\r\nconst enemy = new Fighter({\r\n  position: {\r\n    x: 400,\r\n    y: 100\r\n  },\r\n  velocity: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  color: 'blue',\r\n  offset: {\r\n    x: -50,\r\n    y: 0\r\n  },\r\n  imageSrc: './img/kenji/Idle.png',\r\n  framesMax: 4,\r\n  scale: 2.5,\r\n  offset: {\r\n    x: 215,\r\n    y: 167\r\n  },\r\n  sprites: {\r\n    idle: {\r\n      imageSrc: './img/kenji/Idle.png',\r\n      framesMax: 4\r\n    },\r\n    run: {\r\n      imageSrc: './img/kenji/Run.png',\r\n      framesMax: 8\r\n    },\r\n    jump: {\r\n      imageSrc: './img/kenji/Jump.png',\r\n      framesMax: 2\r\n    },\r\n    fall: {\r\n      imageSrc: './img/kenji/Fall.png',\r\n      framesMax: 2\r\n    },\r\n    attack1: {\r\n      imageSrc: './img/kenji/Attack1.png',\r\n      framesMax: 4\r\n    },\r\n    takeHit: {\r\n      imageSrc: './img/kenji/Take hit.png',\r\n      framesMax: 3\r\n    },\r\n    death: {\r\n      imageSrc: './img/kenji/Death.png',\r\n      framesMax: 7\r\n    }\r\n  },\r\n  attackBox: {\r\n    offset: {\r\n      x: -170,\r\n      y: 50\r\n    },\r\n    width: 170,\r\n    height: 50\r\n  }\r\n})\r\n\r\nconsole.log(player)\r\n\r\nconst keys = {\r\n  a: {\r\n    pressed: false\r\n  },\r\n  d: {\r\n    pressed: false\r\n  },\r\n  ArrowRight: {\r\n    pressed: false\r\n  },\r\n  ArrowLeft: {\r\n    pressed: false\r\n  }\r\n}\r\n\r\ndecreaseTimer()\r\n\r\nfunction animate() {\r\n  window.requestAnimationFrame(animate)\r\n  c.fillStyle = 'black'\r\n  c.fillRect(0, 0, canvas.width, canvas.height)\r\n  background.update()\r\n  shop.update()\r\n  c.fillStyle = 'rgba(255, 255, 255, 0.15)'\r\n  c.fillRect(0, 0, canvas.width, canvas.height)\r\n  player.update()\r\n  enemy.update()\r\n\r\n  player.velocity.x = 0\r\n  enemy.velocity.x = 0\r\n\r\n  // player movement\r\n\r\n  if (keys.a.pressed && player.lastKey === 'a') {\r\n    player.velocity.x = -5\r\n    player.switchSprite('run')\r\n  } else if (keys.d.pressed && player.lastKey === 'd') {\r\n    player.velocity.x = 5\r\n    player.switchSprite('run')\r\n  } else {\r\n    player.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (player.velocity.y < 0) {\r\n    player.switchSprite('jump')\r\n  } else if (player.velocity.y > 0) {\r\n    player.switchSprite('fall')\r\n  }\r\n\r\n  // Enemy movement\r\n  if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\r\n    enemy.velocity.x = -5\r\n    enemy.switchSprite('run')\r\n  } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n    enemy.velocity.x = 5\r\n    enemy.switchSprite('run')\r\n  } else {\r\n    enemy.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (enemy.velocity.y < 0) {\r\n    enemy.switchSprite('jump')\r\n  } else if (enemy.velocity.y > 0) {\r\n    enemy.switchSprite('fall')\r\n  }\r\n\r\n  // detect for collision & enemy gets hit\r\n  if (\r\n    rectangularCollision({\r\n      rectangle1: player,\r\n      rectangle2: enemy\r\n    }) &&\r\n    player.isAttacking &&\r\n    player.framesCurrent === 4\r\n  ) {\r\n    enemy.takeHit()\r\n    player.isAttacking = false\r\n\r\n    gsap.to('#enemyHealth', {\r\n      width: enemy.health + '%'\r\n    })\r\n  }\r\n\r\n  // if player misses\r\n  if (player.isAttacking && player.framesCurrent === 4) {\r\n    player.isAttacking = false\r\n  }\r\n\r\n  // this is where our player gets hit\r\n  if (\r\n    rectangularCollision({\r\n      rectangle1: enemy,\r\n      rectangle2: player\r\n    }) &&\r\n    enemy.isAttacking &&\r\n    enemy.framesCurrent === 2\r\n  ) {\r\n    player.takeHit()\r\n    enemy.isAttacking = false\r\n\r\n    gsap.to('#playerHealth', {\r\n      width: player.health + '%'\r\n    })\r\n  }\r\n\r\n  // if player misses\r\n  if (enemy.isAttacking && enemy.framesCurrent === 2) {\r\n    enemy.isAttacking = false\r\n  }\r\n\r\n  // end game based on health\r\n  if (enemy.health <= 0 || player.health <= 0) {\r\n    determineWinner({ player, enemy, timerId })\r\n  }\r\n}\r\n\r\nanimate()\r\n\r\nwindow.addEventListener('keydown', (event) => {\r\n  if (!player.dead) {\r\n    switch (event.key) {\r\n      case 'd':\r\n        keys.d.pressed = true\r\n        player.lastKey = 'd'\r\n        break\r\n      case 'a':\r\n        keys.a.pressed = true\r\n        player.lastKey = 'a'\r\n        break\r\n      case 'w':\r\n        player.velocity.y = -20\r\n        break\r\n      case ' ':\r\n        player.attack()\r\n        break\r\n    }\r\n  }\r\n\r\n  if (!enemy.dead) {\r\n    switch (event.key) {\r\n      case 'ArrowRight':\r\n        keys.ArrowRight.pressed = true\r\n        enemy.lastKey = 'ArrowRight'\r\n        break\r\n      case 'ArrowLeft':\r\n        keys.ArrowLeft.pressed = true\r\n        enemy.lastKey = 'ArrowLeft'\r\n        break\r\n      case 'ArrowUp':\r\n        enemy.velocity.y = -20\r\n        break\r\n      case 'ArrowDown':\r\n        enemy.attack()\r\n\r\n        break\r\n    }\r\n  }\r\n})\r\n\r\nwindow.addEventListener('keyup', (event) => {\r\n  switch (event.key) {\r\n    case 'd':\r\n      keys.d.pressed = false\r\n      break\r\n    case 'a':\r\n      keys.a.pressed = false\r\n      break\r\n  }\r\n\r\n  // enemy keys\r\n  switch (event.key) {\r\n    case 'ArrowRight':\r\n      keys.ArrowRight.pressed = false\r\n      break\r\n    case 'ArrowLeft':\r\n      keys.ArrowLeft.pressed = false\r\n      break\r\n  }\r\n  <Classes />\r\n})"],"mappings":";AAAA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}