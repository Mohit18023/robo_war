{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './Components.css';\nimport spriteImage from './Images/background.png';\nimport { AnimationFrame } from './AnimationFrame.js';\nimport kenjiImage from './Idle3 .png';\nimport samuraiImage from './fighter1.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPlayerState = {\n  player: {\n    position: {\n      x: 100,\n      y: 400\n    },\n    velocity: {\n      x: 10,\n      y: 0\n    },\n    scale: 2.5,\n    health: 100,\n    isAttacking: false,\n    playerAttackImage: 'playerAttackImage.png'\n  },\n  enemy: {\n    position: {\n      x: 100,\n      y: 400\n    },\n    velocity: {\n      x: 10,\n      y: 0\n    },\n    scale: 2.5,\n    health: 100,\n    isAttacking: false,\n    playerAttackImage: 'enemyAttackImage.png'\n  }\n};\nconst kenjiFrameWidth = 284;\nconst kenjiFrameHeight = 600;\nconst kenjiTotalFrames = 1;\nconst kenjiAnimationSpeed = 5;\nconst samuraiFrameWidth = 284;\nconst samuraiFrameHeight = 600;\nconst samuraiTotalFrames = 1;\nconst samuraiAnimationSpeed = 10;\nfunction CanvasDrawing() {\n  _s();\n  const canvasRef = useRef(null);\n  const [players, setPlayers] = useState(initialPlayerState);\n  const [currentFrame, setCurrentFrame] = useState(0);\n  const attack = (attacker, target) => {\n    if (!attacker.isAttacking && !target.dead) {\n      attacker.isAttacking = true;\n      // Draw the attack image at the attacker's position\n      const attackImage = new Image();\n      attackImage.src = attacker === players.player ? attacker.playerAttackImage : attacker.enemyAttackImage;\n      attackImage.onload = function () {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(attackImage, attacker.position.x, attacker.position.y);\n\n        // Example: Deal damage to the target\n        target.health -= 10;\n\n        // Reset the attacking state after a delay (you can adjust the delay)\n        setTimeout(() => {\n          attacker.isAttacking = false;\n        }, 1000); // 1000 milliseconds (1 second)\n      };\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 576;\n    const backgroundImage = new Image();\n    backgroundImage.src = spriteImage;\n    const image = new Image();\n    image.src = kenjiImage;\n    image.onload = function () {\n      ctx.drawImage(image, 50, 50);\n    };\n    const fighter = new Image();\n    fighter.src = samuraiImage;\n    fighter.onload = function () {\n      ctx.drawImage(fighter, 50, 50);\n    };\n    const kenjiAnimationFrame = new AnimationFrame({\n      image: image,\n      frameWidth: kenjiFrameWidth,\n      frameHeight: kenjiFrameHeight,\n      totalFrames: kenjiTotalFrames,\n      animationSpeed: kenjiAnimationSpeed\n    });\n    const samuraiAnimationFrame = new AnimationFrame({\n      image: fighter,\n      frameWidth: samuraiFrameWidth,\n      frameHeight: samuraiFrameHeight,\n      totalFrames: samuraiTotalFrames,\n      animationSpeed: samuraiAnimationSpeed\n    });\n    const keys = {\n      a: false,\n      d: false,\n      w: false,\n      space: false,\n      ArrowLeft: false,\n      ArrowRight: false,\n      ArrowUp: false,\n      ArrowDown: false\n    };\n    const handleKeyDown = event => {\n      if (!players.player.dead) {\n        switch (event.key) {\n          case 'a':\n            keys.a = true;\n            break;\n          case 'd':\n            keys.d = true;\n            break;\n          case 'w':\n            players.player.velocity.y = -20;\n            break;\n          case ' ':\n            // players.player.attack();\n            handleAttack(players.player, players.enemy);\n            break;\n        }\n      }\n      if (!players.enemy.dead) {\n        switch (event.key) {\n          case 'ArrowLeft':\n            keys.ArrowLeft = true;\n            break;\n          case 'ArrowRight':\n            keys.ArrowRight = true;\n            break;\n          case 'ArrowUp':\n            players.enemy.velocity.y = -20;\n            break;\n          case 'ArrowDown':\n            // players.enemy.attack();\n            handleAttack(players.enemy, players.player);\n            break;\n        }\n      }\n    };\n    const handleKeyUp = event => {\n      switch (event.key) {\n        case 'a':\n          keys.a = false;\n          break;\n        case 'd':\n          keys.d = false;\n          break;\n      }\n\n      // enemy keys\n      switch (event.key) {\n        case 'ArrowLeft':\n          keys.ArrowLeft = false;\n          break;\n        case 'ArrowRight':\n          keys.ArrowRight = false;\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    const handleAttack = (attacker, target) => {\n      if (!attacker.isAttacking && !target.dead) {\n        attacker.isAttacking = true;\n        // Draw the attack image at the attacker's position\n        const attackImage = new Image();\n        attackImage.src = attacker === players.player ? attacker.playerAttackImage : attacker.enemyAttackImage;\n        attackImage.onload = function () {\n          ctx.drawImage(attackImage, attacker.position.x, attacker.position.y);\n\n          // Example: Deal damage to the target\n          target.health -= 10;\n\n          // Reset the attacking state after a delay (you can adjust the delay)\n          setTimeout(() => {\n            attacker.isAttacking = false;\n          }, 1000); // 1000 milliseconds (1 second)\n        };\n      }\n    };\n\n    const animate = () => {\n      window.requestAnimationFrame(animate);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n      if (keys.a) {\n        players.player.position.x -= players.player.velocity.x;\n      } else if (keys.d) {\n        players.player.position.x += players.player.velocity.x;\n      } else if (keys.w) {\n        // Handle jump for player\n        // Add your jump logic here\n      }\n      if (keys.ArrowLeft) {\n        players.enemy.position.x -= players.enemy.velocity.x;\n      } else if (keys.ArrowRight) {\n        players.enemy.position.x += players.enemy.velocity.x;\n      } else if (keys.ArrowUp) {\n        // Handle jump for enemy\n        // Add your jump logic here\n      }\n\n      // Draw attack images\n      if (players.player.isAttacking) {\n        const playerAttackImage = new Image();\n        playerAttackImage.src = players.player.playerAttackImage;\n        playerAttackImage.onload = function () {\n          ctx.drawImage(playerAttackImage, players.player.position.x, players.player.position.y);\n        };\n      }\n      if (players.enemy.isAttacking) {\n        const enemyAttackImage = new Image();\n        enemyAttackImage.src = players.enemy.enemyAttackImage;\n        enemyAttackImage.onload = function () {\n          ctx.drawImage(enemyAttackImage, players.enemy.position.x, players.enemy.position.y);\n        };\n      }\n      kenjiAnimationFrame.draw(ctx, players.player.position.x, players.player.position.y);\n      samuraiAnimationFrame.draw(ctx, players.enemy.position.x + 400, players.enemy.position.y);\n\n      // Attack logic\n      attack(players.player, players.enemy);\n      attack(players.enemy, players.player);\n      setCurrentFrame(prevFrame => prevFrame + 1);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasDrawing, \"yg0sQjJEHICtvvbQ6pEOCVgNJMQ=\");\n_c = CanvasDrawing;\nexport default CanvasDrawing;\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import './Components.css';\n\n// import spriteImage from './Images/background.png';\n// import { AnimationFrame } from './AnimationFrame.js';\n// import kenjiImage from './Idle3 .png';\n// import samuraiImage from './fighter1.png';\n\n// const gravity = 0.7;\n// const initialPlayerState = {\n//   player: {\n//     position: {\n//       x: 100,\n//       y: 400\n//     },\n//     velocity: {\n//       x: 10,\n//       y: 0\n//     },\n//     scale: 2.5,\n//     health: 100 // Add health for player\n//   },\n//   enemy: {\n//     position: {\n//       x: 250,\n//       y: 400\n//     },\n//     velocity: {\n//       x: 10,\n//       y: 0\n//     },\n//     scale: 2.5,\n//     health: 100 // Add health for enemy\n//   }\n// };\n\n// const kenjiFrameWidth = 284;\n// const kenjiFrameHeight = 600;\n// const kenjiTotalFrames = 1;\n// const kenjiAnimationSpeed = 10;\n\n// const samuraiFrameWidth = 284;\n// const samuraiFrameHeight = 600;\n// const samuraiTotalFrames = 1;\n// const samuraiAnimationSpeed = 10;\n\n// function CanvasDrawing() {\n//   const canvasRef = useRef(null);\n//   const [players, setPlayers] = useState(initialPlayerState);\n//   const [currentFrame, setCurrentFrame] = useState(0);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = 1024;\n//     canvas.height = 576;\n\n//     const backgroundImage = new Image();\n//     backgroundImage.src = spriteImage;\n\n//     const image = new Image();\n//     image.src = kenjiImage;\n\n//     image.onload = function () {\n//       ctx.drawImage(image, 50, 50);\n//     };\n\n//     const fighter = new Image();\n//     fighter.src = samuraiImage;\n\n//     fighter.onload = function () {\n//       ctx.drawImage(fighter, 50, 50);\n//     };\n\n//     const kenjiAnimationFrame = new AnimationFrame({\n//       image: image,\n//       frameWidth: kenjiFrameWidth,\n//       frameHeight: kenjiFrameHeight,\n//       totalFrames: kenjiTotalFrames,\n//       animationSpeed: kenjiAnimationSpeed,\n//     });\n\n//     const samuraiAnimationFrame = new AnimationFrame({\n//       image: fighter,\n//       frameWidth: samuraiFrameWidth,\n//       frameHeight: samuraiFrameHeight,\n//       totalFrames: samuraiTotalFrames,\n//       animationSpeed: samuraiAnimationSpeed,\n//     });\n\n//     const keys = {\n//       player : {\n//       a: false,\n//       d: false,\n//       w: false,\n//       space: false,\n//       },\n//       enemy : {\n//       ArrowRight : false,\n//       ArrowLeft : false,\n//       ArrowUp :false,\n//       ArrowDown : false,\n//       },\n//     };\n\n//     const handleKeyDown = (event) => {\n//       if (!players.player.dead) {\n//         switch (event.key) {\n//           case 'a':\n//             keys.player.a = true;\n//             break;\n//           case 'd':\n//             keys.player.d = true;\n//             break;\n//           case 'w':\n//             keys.player.w = -20;\n//             break;\n//           case ' ':\n//             keys.player.space = true;\n//             break;\n//         }\n//       }\n\n//       if (!players.enemy.dead) {\n//         switch (event.key) {\n//           case 'ArrowLeft':\n//             keys.enemy.ArrowLeft = true;\n//             break;\n//           case 'ArrowRight':\n//             keys.enemy.ArrowRight = true;\n//             break;\n//           case 'ArrowUp':\n//             keys.enemy.ArrowUp = true;\n//             break;\n//           case 'ArrowDown':\n//             keys.enemy.ArrowDown = true;\n//             break;\n//         }\n//       }\n//     };\n\n//     const handleKeyUp = (event) => {\n//       if (!players.player.dead) {\n//       switch (event.key) {\n//         case 'a':\n//           keys.player.a = false;\n//           break;\n//         case 'd':\n//           keys.player.d = false;\n//           break;\n//         case 'w':\n//           keys.player.w = false;\n//           break;\n//         case ' ':\n//           keys.player.space = false;\n//           break;\n//       }\n//     }\n\n//     if (!players.enemy.dead) {\n//       switch (event.key) {\n//         case 'ArrowLeft':\n//           keys.enemy.ArrowLeft = false;\n//           break;\n//         case 'ArrowRight':\n//           keys.enemy.ArrowRight = false;\n//           break;\n//         case 'ArrowUp':\n//           keys.enemy.ArrowUp = false;\n//           break;\n//         case 'ArrowDown':\n//           keys.enemy.ArrowDown = false;\n//           break;\n//       }\n//     }\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n//     window.addEventListener('keyup', handleKeyUp);\n\n//     const animate = () => {\n//       window.requestAnimationFrame(animate);\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n//       if (keys.player.a) {\n//         players.player.position.x -= players.player.velocity.x;\n//       } else if (keys.player.d) {\n//         players.player.position.x += players.player.velocity.x;\n//       } else if (keys.player.w) {\n//         // Handle jump for player\n//         // Add your jump logic here\n//       } else if (keys.player.space) {\n//         // Handle attack for player\n//         // Add your attack logic here\n//         players.player.attack();\n//       }\n\n//       if (keys.enemy.ArrowLeft) {\n//         players.enemy.position.x -= players.enemy.velocity.x;\n//       } else if (keys.enemy.ArrowRight) {\n//         players.enemy.position.x += players.enemy.velocity.x;\n//       } else if (keys.enemy.ArrowUp) {\n//         // Handle jump for enemy\n//         // Add your jump logic here\n//       } else if (keys.enemy.ArrowDown) {\n//         // Handle attack for enemy\n//         // Add your attack logic here\n//         players.enemy.attack();\n//       }\n\n//       kenjiAnimationFrame.draw(ctx, players.player.position.x, players.player.position.y);\n//       samuraiAnimationFrame.draw(ctx, players.enemy.position.x + 400, players.enemy.position.y);\n\n//       setCurrentFrame((prevFrame) => prevFrame + 1);\n//     };\n\n//     animate();\n\n//     return () => {\n//       window.removeEventListener('keydown', handleKeyDown);\n//       window.removeEventListener('keyup', handleKeyUp);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <canvas ref={canvasRef}></canvas>\n//     </div>\n//   );\n// }\n\n// export default CanvasDrawing;\n\n// // import React, { useRef, useEffect, useState } from 'react';\n// // import './Components.css';\n\n// // import spriteImage from './Images/background.png';\n// // import { AnimationFrame } from './AnimationFrame.js';\n// // import kenjiImage from './Idle3 .png';\n// // import samuraiImage from './fighter1.png';\n\n// // const gravity = 0.7;\n// // const initialPlayer1State = {\n// //   position: {\n// //     x: 100,\n// //     y: 400\n// //   },\n// //   velocity: {\n// //     x: 10,\n// //     y: 0\n// //   },\n// //   scale: 2.5,\n// //   health: 100 \n// // };\n\n// // const initialPlayer2State = {\n// //   position: {\n// //     x: 250,\n// //     y: 400\n// //   },\n// //   velocity: {\n// //     x: 10,\n// //     y: 0\n// //   },\n// //   scale: 2.5,\n// //   health: 100\n// // };\n\n// // const kenjiFrameWidth = 284;\n// // const kenjiFrameHeight = 600;\n// // const kenjiTotalFrames = 1;\n// // const kenjiAnimationSpeed = 10;\n\n// // const samuraiFrameWidth = 284;\n// // const samuraiFrameHeight = 600;\n// // const samuraiTotalFrames = 1;\n// // const samuraiAnimationSpeed = 10;\n\n// // function CanvasDrawing() {\n// //   const canvasRef = useRef(null);\n// //   const [player1, setPlayer1] = useState(initialPlayer1State);\n// //   const [player2, setPlayer2] = useState(initialPlayer2State);\n// //   const [currentFrame, setCurrentFrame] = useState(0);\n\n// //   useEffect(() => {\n// //     const canvas = canvasRef.current;\n// //     const ctx = canvas.getContext('2d');\n\n// //     canvas.width = 1024;\n// //     canvas.height = 576;\n\n// //     const backgroundImage = new Image();\n// //     backgroundImage.src = spriteImage;\n\n// //     const image = new Image();\n// //     image.src = kenjiImage;\n\n// //     image.onload = function () {\n// //       ctx.drawImage(image, 50, 50);\n// //     };\n\n// //     const fighter = new Image();\n// //     fighter.src = samuraiImage;\n\n// //     fighter.onload = function () {\n// //       ctx.drawImage(fighter, 50, 50);\n// //     };\n\n// //     const kenjiAnimationFrame = new AnimationFrame({\n// //       image: image,\n// //       frameWidth: kenjiFrameWidth,\n// //       frameHeight: kenjiFrameHeight,\n// //       totalFrames: kenjiTotalFrames,\n// //       animationSpeed: kenjiAnimationSpeed,\n// //     });\n\n// //     const samuraiAnimationFrame = new AnimationFrame({\n// //       image: fighter,\n// //       frameWidth: samuraiFrameWidth,\n// //       frameHeight: samuraiFrameHeight,\n// //       totalFrames: samuraiTotalFrames,\n// //       animationSpeed: samuraiAnimationSpeed,\n// //     });\n\n// //     const keys = {\n// //       a: false,\n// //       d: false,\n// //       w: false,\n// //       space: false,\n// //       ArrowLeft: false,\n// //       ArrowRight: false,\n// //       ArrowUp: false,\n// //       ArrowDown: false,\n// //     };\n\n// //     const handleKeyDown = (event) => {\n// //       if (event.key === 'a') {\n// //         keys.a = true;\n// //       } else if (event.key === 'd') {\n// //         keys.d = true;\n// //       } else if (event.key === 'w') {\n// //         keys.w = true;\n// //       } else if (event.key === ' ') {\n// //         keys.space = true;\n// //       } else if (event.key === 'ArrowLeft') {\n// //         keys.ArrowLeft = true;\n// //       } else if (event.key === 'ArrowRight') {\n// //         keys.ArrowRight = true;\n// //       } else if (event.key === 'ArrowUp') {\n// //         keys.ArrowUp = true;\n// //       } else if (event.key === 'ArrowDown') {\n// //         keys.ArrowDown = true;\n// //       }\n// //     };\n\n// //     const handleKeyUp = (event) => {\n// //       if (event.key === 'a') {\n// //         keys.a = false;\n// //       } else if (event.key === 'd') {\n// //         keys.d = false;\n// //       } else if (event.key === 'w') {\n// //         keys.w = false;\n// //       } else if (event.key === ' ') {\n// //         keys.space = false;\n// //       } else if (event.key === 'ArrowLeft') {\n// //         keys.ArrowLeft = false;\n// //       } else if (event.key === 'ArrowRight') {\n// //         keys.ArrowRight = false;\n// //       } else if (event.key === 'ArrowUp') {\n// //         keys.ArrowUp = false;\n// //       } else if (event.key === 'ArrowDown') {\n// //         keys.ArrowDown = false;\n// //       }\n// //     };\n\n// //     window.addEventListener('keydown', handleKeyDown);\n// //     window.addEventListener('keyup', handleKeyUp);\n\n// //     const animate = () => {\n// //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n// //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n// //       if (keys.a) {\n// //         player1.position.x -= player1.velocity.x;\n// //       } else if (keys.d) {\n// //         player1.position.x += player1.velocity.x;\n// //       } else if (keys.w) {\n// //         // Handle jump for player 1\n// //         // Add your jump logic here\n// //       } else if (keys.space) {\n// //         // Handle attack for player 1\n// //         // Add your attack logic here\n// //       }\n\n// //       if (keys.ArrowLeft) {\n// //         player2.position.x -= player2.velocity.x;\n// //       } else if (keys.ArrowRight) {\n// //         player2.position.x += player2.velocity.x;\n// //       } else if (keys.ArrowUp) {\n// //         // Handle jump for player 2\n// //         // Add your jump logic here\n// //       } else if (keys.ArrowDown) {\n// //         // Handle attack for player 2\n// //         // Add your attack logic here\n// //       }\n\n// //       kenjiAnimationFrame.draw(ctx, player1.position.x, player1.position.y);\n// //       samuraiAnimationFrame.draw(ctx, player2.position.x + 400, player2.position.y);\n\n// //       setCurrentFrame((prevFrame) => prevFrame + 1);\n\n// //       requestAnimationFrame(animate);\n// //     };\n\n// //     animate();\n\n// //     return () => {\n// //       window.removeEventListener('keydown', handleKeyDown);\n// //       window.removeEventListener('keyup', handleKeyUp);\n// //     };\n// //   }, []);\n\n// //   return (\n// //     <div>\n// //       <canvas ref={canvasRef}></canvas>\n// //     </div>\n// //   );\n// // }\n\n// // export default CanvasDrawing;\nvar _c;\n$RefreshReg$(_c, \"CanvasDrawing\");","map":{"version":3,"names":["React","useRef","useEffect","useState","spriteImage","AnimationFrame","kenjiImage","samuraiImage","jsxDEV","_jsxDEV","initialPlayerState","player","position","x","y","velocity","scale","health","isAttacking","playerAttackImage","enemy","kenjiFrameWidth","kenjiFrameHeight","kenjiTotalFrames","kenjiAnimationSpeed","samuraiFrameWidth","samuraiFrameHeight","samuraiTotalFrames","samuraiAnimationSpeed","CanvasDrawing","_s","canvasRef","players","setPlayers","currentFrame","setCurrentFrame","attack","attacker","target","dead","attackImage","Image","src","enemyAttackImage","onload","canvas","current","ctx","getContext","drawImage","setTimeout","width","height","backgroundImage","image","fighter","kenjiAnimationFrame","frameWidth","frameHeight","totalFrames","animationSpeed","samuraiAnimationFrame","keys","a","d","w","space","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","handleKeyDown","event","key","handleAttack","handleKeyUp","window","addEventListener","animate","requestAnimationFrame","clearRect","draw","prevFrame","removeEventListener","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport './Components.css';\r\n\r\nimport spriteImage from './Images/background.png';\r\nimport { AnimationFrame } from './AnimationFrame.js';\r\nimport kenjiImage from './Idle3 .png';\r\nimport samuraiImage from './fighter1.png';\r\n\r\n\r\nconst initialPlayerState = {\r\n  player: {\r\n    position: {\r\n      x: 100,\r\n      y: 400\r\n    },\r\n    velocity: {\r\n      x: 10,\r\n      y: 0\r\n    },\r\n    scale: 2.5,\r\n    health: 100,\r\n    isAttacking: false,\r\n    playerAttackImage: 'playerAttackImage.png', \r\n  },\r\n  enemy: {\r\n    position: {\r\n      x: 100,\r\n      y: 400\r\n    },\r\n    velocity: {\r\n      x: 10,\r\n      y: 0\r\n    },\r\n    scale: 2.5,\r\n    health: 100,\r\n    isAttacking: false,\r\n    playerAttackImage: 'enemyAttackImage.png',\r\n  }\r\n};\r\n\r\nconst kenjiFrameWidth = 284;\r\nconst kenjiFrameHeight = 600;\r\nconst kenjiTotalFrames = 1;\r\nconst kenjiAnimationSpeed = 5;\r\n\r\nconst samuraiFrameWidth = 284;\r\nconst samuraiFrameHeight = 600;\r\nconst samuraiTotalFrames = 1;\r\nconst samuraiAnimationSpeed = 10;\r\n\r\nfunction CanvasDrawing() {\r\n  const canvasRef = useRef(null);\r\n  const [players, setPlayers] = useState(initialPlayerState);\r\n  const [currentFrame, setCurrentFrame] = useState(0);\r\n\r\n  const attack = (attacker, target) => {\r\n    if (!attacker.isAttacking && !target.dead) {\r\n      attacker.isAttacking = true;\r\n      // Draw the attack image at the attacker's position\r\n      const attackImage = new Image();\r\n      attackImage.src = attacker === players.player ? attacker.playerAttackImage : attacker.enemyAttackImage;\r\n      attackImage.onload = function () {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(attackImage, attacker.position.x, attacker.position.y);\r\n        \r\n        // Example: Deal damage to the target\r\n        target.health -= 10;\r\n\r\n        // Reset the attacking state after a delay (you can adjust the delay)\r\n        setTimeout(() => {\r\n          attacker.isAttacking = false;\r\n        }, 1000); // 1000 milliseconds (1 second)\r\n      };\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    const backgroundImage = new Image();\r\n    backgroundImage.src = spriteImage;\r\n\r\n    const image = new Image();\r\n    image.src = kenjiImage;\r\n\r\n    image.onload = function () {\r\n      ctx.drawImage(image, 50, 50);\r\n    };\r\n\r\n    const fighter = new Image();\r\n    fighter.src = samuraiImage;\r\n\r\n    fighter.onload = function () {\r\n      ctx.drawImage(fighter, 50, 50);\r\n    };\r\n\r\n    const kenjiAnimationFrame = new AnimationFrame({\r\n      image: image,\r\n      frameWidth: kenjiFrameWidth,\r\n      frameHeight: kenjiFrameHeight,\r\n      totalFrames: kenjiTotalFrames,\r\n      animationSpeed: kenjiAnimationSpeed,\r\n    });\r\n\r\n    const samuraiAnimationFrame = new AnimationFrame({\r\n      image: fighter,\r\n      frameWidth: samuraiFrameWidth,\r\n      frameHeight: samuraiFrameHeight,\r\n      totalFrames: samuraiTotalFrames,\r\n      animationSpeed: samuraiAnimationSpeed,\r\n    });\r\n\r\n    const keys = {\r\n      a: false,\r\n      d: false,\r\n      w: false,\r\n      space: false,\r\n      ArrowLeft: false,\r\n      ArrowRight: false,\r\n      ArrowUp: false,\r\n      ArrowDown: false,\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n      if (!players.player.dead) {\r\n        switch (event.key) {\r\n          case 'a':\r\n            keys.a = true;\r\n            break;\r\n          case 'd':\r\n            keys.d = true;\r\n            break;\r\n          case 'w':\r\n            players.player.velocity.y = -20;\r\n            break;\r\n          case ' ':\r\n            // players.player.attack();\r\n            handleAttack(players.player, players.enemy);\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (!players.enemy.dead) {\r\n        switch (event.key) {\r\n          case 'ArrowLeft':\r\n            keys.ArrowLeft = true;\r\n            break;\r\n          case 'ArrowRight':\r\n            keys.ArrowRight = true;\r\n            break;\r\n          case 'ArrowUp':\r\n            players.enemy.velocity.y = -20;\r\n            break;\r\n          case 'ArrowDown':\r\n            // players.enemy.attack();\r\n            handleAttack(players.enemy, players.player);\r\n            break;\r\n        }\r\n      }\r\n    };\r\n\r\n    const handleKeyUp = (event) => {\r\n      switch (event.key) {\r\n        case 'a':\r\n          keys.a = false;\r\n          break;\r\n        case 'd':\r\n          keys.d = false;\r\n          break;\r\n      }\r\n\r\n      // enemy keys\r\n      switch (event.key) {\r\n        case 'ArrowLeft':\r\n          keys.ArrowLeft = false;\r\n          break;\r\n        case 'ArrowRight':\r\n          keys.ArrowRight = false;\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n    \r\n    const handleAttack = (attacker, target) => {\r\n      if (!attacker.isAttacking && !target.dead) {\r\n        attacker.isAttacking = true;\r\n         // Draw the attack image at the attacker's position\r\n      const attackImage = new Image();\r\n      attackImage.src = attacker === players.player ? attacker.playerAttackImage : attacker.enemyAttackImage;\r\n      attackImage.onload = function () {\r\n        ctx.drawImage(attackImage, attacker.position.x, attacker.position.y);\r\n\r\n        // Example: Deal damage to the target\r\n        target.health -= 10;\r\n\r\n        // Reset the attacking state after a delay (you can adjust the delay)\r\n        setTimeout(() => {\r\n          attacker.isAttacking = false;\r\n        }, 1000); // 1000 milliseconds (1 second)\r\n      };\r\n      }\r\n    };\r\n    \r\n    const animate = () => {\r\n      window.requestAnimationFrame(animate);\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n      if (keys.a) {\r\n        players.player.position.x -= players.player.velocity.x;\r\n      } else if (keys.d) {\r\n        players.player.position.x += players.player.velocity.x;\r\n      } else if (keys.w) {\r\n        // Handle jump for player\r\n        // Add your jump logic here\r\n      }\r\n\r\n      if (keys.ArrowLeft) {\r\n        players.enemy.position.x -= players.enemy.velocity.x;\r\n      } else if (keys.ArrowRight) {\r\n        players.enemy.position.x += players.enemy.velocity.x;\r\n      } else if (keys.ArrowUp) {\r\n        // Handle jump for enemy\r\n        // Add your jump logic here\r\n      }\r\n\r\n        // Draw attack images\r\n    if (players.player.isAttacking) {\r\n      const playerAttackImage = new Image();\r\n      playerAttackImage.src = players.player.playerAttackImage;\r\n      playerAttackImage.onload = function () {\r\n        ctx.drawImage(playerAttackImage, players.player.position.x, players.player.position.y);\r\n      };\r\n    }\r\n\r\n    if (players.enemy.isAttacking) {\r\n      const enemyAttackImage = new Image();\r\n      enemyAttackImage.src = players.enemy.enemyAttackImage;\r\n      enemyAttackImage.onload = function () {\r\n        ctx.drawImage(enemyAttackImage, players.enemy.position.x, players.enemy.position.y);\r\n      };\r\n    }\r\n\r\n      kenjiAnimationFrame.draw(ctx, players.player.position.x, players.player.position.y);\r\n      samuraiAnimationFrame.draw(ctx, players.enemy.position.x + 400, players.enemy.position.y);\r\n\r\n      // Attack logic\r\n      attack(players.player, players.enemy);\r\n      attack(players.enemy, players.player);\r\n\r\n      setCurrentFrame((prevFrame) => prevFrame + 1);\r\n    };\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      window.removeEventListener('keyup', handleKeyUp);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanvasDrawing;\r\n\r\n\r\n\r\n// import React, { useRef, useEffect, useState } from 'react';\r\n// import './Components.css';\r\n\r\n// import spriteImage from './Images/background.png';\r\n// import { AnimationFrame } from './AnimationFrame.js';\r\n// import kenjiImage from './Idle3 .png';\r\n// import samuraiImage from './fighter1.png';\r\n\r\n// const gravity = 0.7;\r\n// const initialPlayerState = {\r\n//   player: {\r\n//     position: {\r\n//       x: 100,\r\n//       y: 400\r\n//     },\r\n//     velocity: {\r\n//       x: 10,\r\n//       y: 0\r\n//     },\r\n//     scale: 2.5,\r\n//     health: 100 // Add health for player\r\n//   },\r\n//   enemy: {\r\n//     position: {\r\n//       x: 250,\r\n//       y: 400\r\n//     },\r\n//     velocity: {\r\n//       x: 10,\r\n//       y: 0\r\n//     },\r\n//     scale: 2.5,\r\n//     health: 100 // Add health for enemy\r\n//   }\r\n// };\r\n\r\n// const kenjiFrameWidth = 284;\r\n// const kenjiFrameHeight = 600;\r\n// const kenjiTotalFrames = 1;\r\n// const kenjiAnimationSpeed = 10;\r\n\r\n// const samuraiFrameWidth = 284;\r\n// const samuraiFrameHeight = 600;\r\n// const samuraiTotalFrames = 1;\r\n// const samuraiAnimationSpeed = 10;\r\n\r\n// function CanvasDrawing() {\r\n//   const canvasRef = useRef(null);\r\n//   const [players, setPlayers] = useState(initialPlayerState);\r\n//   const [currentFrame, setCurrentFrame] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext('2d');\r\n\r\n//     canvas.width = 1024;\r\n//     canvas.height = 576;\r\n\r\n//     const backgroundImage = new Image();\r\n//     backgroundImage.src = spriteImage;\r\n\r\n//     const image = new Image();\r\n//     image.src = kenjiImage;\r\n\r\n//     image.onload = function () {\r\n//       ctx.drawImage(image, 50, 50);\r\n//     };\r\n\r\n//     const fighter = new Image();\r\n//     fighter.src = samuraiImage;\r\n\r\n//     fighter.onload = function () {\r\n//       ctx.drawImage(fighter, 50, 50);\r\n//     };\r\n\r\n//     const kenjiAnimationFrame = new AnimationFrame({\r\n//       image: image,\r\n//       frameWidth: kenjiFrameWidth,\r\n//       frameHeight: kenjiFrameHeight,\r\n//       totalFrames: kenjiTotalFrames,\r\n//       animationSpeed: kenjiAnimationSpeed,\r\n//     });\r\n\r\n//     const samuraiAnimationFrame = new AnimationFrame({\r\n//       image: fighter,\r\n//       frameWidth: samuraiFrameWidth,\r\n//       frameHeight: samuraiFrameHeight,\r\n//       totalFrames: samuraiTotalFrames,\r\n//       animationSpeed: samuraiAnimationSpeed,\r\n//     });\r\n\r\n//     const keys = {\r\n//       player : {\r\n//       a: false,\r\n//       d: false,\r\n//       w: false,\r\n//       space: false,\r\n//       },\r\n//       enemy : {\r\n//       ArrowRight : false,\r\n//       ArrowLeft : false,\r\n//       ArrowUp :false,\r\n//       ArrowDown : false,\r\n//       },\r\n//     };\r\n\r\n//     const handleKeyDown = (event) => {\r\n//       if (!players.player.dead) {\r\n//         switch (event.key) {\r\n//           case 'a':\r\n//             keys.player.a = true;\r\n//             break;\r\n//           case 'd':\r\n//             keys.player.d = true;\r\n//             break;\r\n//           case 'w':\r\n//             keys.player.w = -20;\r\n//             break;\r\n//           case ' ':\r\n//             keys.player.space = true;\r\n//             break;\r\n//         }\r\n//       }\r\n\r\n//       if (!players.enemy.dead) {\r\n//         switch (event.key) {\r\n//           case 'ArrowLeft':\r\n//             keys.enemy.ArrowLeft = true;\r\n//             break;\r\n//           case 'ArrowRight':\r\n//             keys.enemy.ArrowRight = true;\r\n//             break;\r\n//           case 'ArrowUp':\r\n//             keys.enemy.ArrowUp = true;\r\n//             break;\r\n//           case 'ArrowDown':\r\n//             keys.enemy.ArrowDown = true;\r\n//             break;\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     const handleKeyUp = (event) => {\r\n//       if (!players.player.dead) {\r\n//       switch (event.key) {\r\n//         case 'a':\r\n//           keys.player.a = false;\r\n//           break;\r\n//         case 'd':\r\n//           keys.player.d = false;\r\n//           break;\r\n//         case 'w':\r\n//           keys.player.w = false;\r\n//           break;\r\n//         case ' ':\r\n//           keys.player.space = false;\r\n//           break;\r\n//       }\r\n//     }\r\n\r\n//     if (!players.enemy.dead) {\r\n//       switch (event.key) {\r\n//         case 'ArrowLeft':\r\n//           keys.enemy.ArrowLeft = false;\r\n//           break;\r\n//         case 'ArrowRight':\r\n//           keys.enemy.ArrowRight = false;\r\n//           break;\r\n//         case 'ArrowUp':\r\n//           keys.enemy.ArrowUp = false;\r\n//           break;\r\n//         case 'ArrowDown':\r\n//           keys.enemy.ArrowDown = false;\r\n//           break;\r\n//       }\r\n//     }\r\n//     };\r\n\r\n//     window.addEventListener('keydown', handleKeyDown);\r\n//     window.addEventListener('keyup', handleKeyUp);\r\n\r\n//     const animate = () => {\r\n//       window.requestAnimationFrame(animate);\r\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n//       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n//       if (keys.player.a) {\r\n//         players.player.position.x -= players.player.velocity.x;\r\n//       } else if (keys.player.d) {\r\n//         players.player.position.x += players.player.velocity.x;\r\n//       } else if (keys.player.w) {\r\n//         // Handle jump for player\r\n//         // Add your jump logic here\r\n//       } else if (keys.player.space) {\r\n//         // Handle attack for player\r\n//         // Add your attack logic here\r\n//         players.player.attack();\r\n//       }\r\n\r\n//       if (keys.enemy.ArrowLeft) {\r\n//         players.enemy.position.x -= players.enemy.velocity.x;\r\n//       } else if (keys.enemy.ArrowRight) {\r\n//         players.enemy.position.x += players.enemy.velocity.x;\r\n//       } else if (keys.enemy.ArrowUp) {\r\n//         // Handle jump for enemy\r\n//         // Add your jump logic here\r\n//       } else if (keys.enemy.ArrowDown) {\r\n//         // Handle attack for enemy\r\n//         // Add your attack logic here\r\n//         players.enemy.attack();\r\n//       }\r\n\r\n//       kenjiAnimationFrame.draw(ctx, players.player.position.x, players.player.position.y);\r\n//       samuraiAnimationFrame.draw(ctx, players.enemy.position.x + 400, players.enemy.position.y);\r\n\r\n//       setCurrentFrame((prevFrame) => prevFrame + 1);\r\n//     };\r\n\r\n//     animate();\r\n\r\n//     return () => {\r\n//       window.removeEventListener('keydown', handleKeyDown);\r\n//       window.removeEventListener('keyup', handleKeyUp);\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <canvas ref={canvasRef}></canvas>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CanvasDrawing;\r\n\r\n\r\n\r\n\r\n// // import React, { useRef, useEffect, useState } from 'react';\r\n// // import './Components.css';\r\n\r\n// // import spriteImage from './Images/background.png';\r\n// // import { AnimationFrame } from './AnimationFrame.js';\r\n// // import kenjiImage from './Idle3 .png';\r\n// // import samuraiImage from './fighter1.png';\r\n\r\n// // const gravity = 0.7;\r\n// // const initialPlayer1State = {\r\n// //   position: {\r\n// //     x: 100,\r\n// //     y: 400\r\n// //   },\r\n// //   velocity: {\r\n// //     x: 10,\r\n// //     y: 0\r\n// //   },\r\n// //   scale: 2.5,\r\n// //   health: 100 \r\n// // };\r\n\r\n// // const initialPlayer2State = {\r\n// //   position: {\r\n// //     x: 250,\r\n// //     y: 400\r\n// //   },\r\n// //   velocity: {\r\n// //     x: 10,\r\n// //     y: 0\r\n// //   },\r\n// //   scale: 2.5,\r\n// //   health: 100\r\n// // };\r\n\r\n// // const kenjiFrameWidth = 284;\r\n// // const kenjiFrameHeight = 600;\r\n// // const kenjiTotalFrames = 1;\r\n// // const kenjiAnimationSpeed = 10;\r\n\r\n// // const samuraiFrameWidth = 284;\r\n// // const samuraiFrameHeight = 600;\r\n// // const samuraiTotalFrames = 1;\r\n// // const samuraiAnimationSpeed = 10;\r\n\r\n// // function CanvasDrawing() {\r\n// //   const canvasRef = useRef(null);\r\n// //   const [player1, setPlayer1] = useState(initialPlayer1State);\r\n// //   const [player2, setPlayer2] = useState(initialPlayer2State);\r\n// //   const [currentFrame, setCurrentFrame] = useState(0);\r\n\r\n// //   useEffect(() => {\r\n// //     const canvas = canvasRef.current;\r\n// //     const ctx = canvas.getContext('2d');\r\n\r\n// //     canvas.width = 1024;\r\n// //     canvas.height = 576;\r\n\r\n// //     const backgroundImage = new Image();\r\n// //     backgroundImage.src = spriteImage;\r\n\r\n// //     const image = new Image();\r\n// //     image.src = kenjiImage;\r\n\r\n// //     image.onload = function () {\r\n// //       ctx.drawImage(image, 50, 50);\r\n// //     };\r\n\r\n// //     const fighter = new Image();\r\n// //     fighter.src = samuraiImage;\r\n\r\n// //     fighter.onload = function () {\r\n// //       ctx.drawImage(fighter, 50, 50);\r\n// //     };\r\n\r\n// //     const kenjiAnimationFrame = new AnimationFrame({\r\n// //       image: image,\r\n// //       frameWidth: kenjiFrameWidth,\r\n// //       frameHeight: kenjiFrameHeight,\r\n// //       totalFrames: kenjiTotalFrames,\r\n// //       animationSpeed: kenjiAnimationSpeed,\r\n// //     });\r\n\r\n// //     const samuraiAnimationFrame = new AnimationFrame({\r\n// //       image: fighter,\r\n// //       frameWidth: samuraiFrameWidth,\r\n// //       frameHeight: samuraiFrameHeight,\r\n// //       totalFrames: samuraiTotalFrames,\r\n// //       animationSpeed: samuraiAnimationSpeed,\r\n// //     });\r\n\r\n// //     const keys = {\r\n// //       a: false,\r\n// //       d: false,\r\n// //       w: false,\r\n// //       space: false,\r\n// //       ArrowLeft: false,\r\n// //       ArrowRight: false,\r\n// //       ArrowUp: false,\r\n// //       ArrowDown: false,\r\n// //     };\r\n\r\n// //     const handleKeyDown = (event) => {\r\n// //       if (event.key === 'a') {\r\n// //         keys.a = true;\r\n// //       } else if (event.key === 'd') {\r\n// //         keys.d = true;\r\n// //       } else if (event.key === 'w') {\r\n// //         keys.w = true;\r\n// //       } else if (event.key === ' ') {\r\n// //         keys.space = true;\r\n// //       } else if (event.key === 'ArrowLeft') {\r\n// //         keys.ArrowLeft = true;\r\n// //       } else if (event.key === 'ArrowRight') {\r\n// //         keys.ArrowRight = true;\r\n// //       } else if (event.key === 'ArrowUp') {\r\n// //         keys.ArrowUp = true;\r\n// //       } else if (event.key === 'ArrowDown') {\r\n// //         keys.ArrowDown = true;\r\n// //       }\r\n// //     };\r\n\r\n// //     const handleKeyUp = (event) => {\r\n// //       if (event.key === 'a') {\r\n// //         keys.a = false;\r\n// //       } else if (event.key === 'd') {\r\n// //         keys.d = false;\r\n// //       } else if (event.key === 'w') {\r\n// //         keys.w = false;\r\n// //       } else if (event.key === ' ') {\r\n// //         keys.space = false;\r\n// //       } else if (event.key === 'ArrowLeft') {\r\n// //         keys.ArrowLeft = false;\r\n// //       } else if (event.key === 'ArrowRight') {\r\n// //         keys.ArrowRight = false;\r\n// //       } else if (event.key === 'ArrowUp') {\r\n// //         keys.ArrowUp = false;\r\n// //       } else if (event.key === 'ArrowDown') {\r\n// //         keys.ArrowDown = false;\r\n// //       }\r\n// //     };\r\n\r\n// //     window.addEventListener('keydown', handleKeyDown);\r\n// //     window.addEventListener('keyup', handleKeyUp);\r\n\r\n// //     const animate = () => {\r\n// //       ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n// //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n// //       if (keys.a) {\r\n// //         player1.position.x -= player1.velocity.x;\r\n// //       } else if (keys.d) {\r\n// //         player1.position.x += player1.velocity.x;\r\n// //       } else if (keys.w) {\r\n// //         // Handle jump for player 1\r\n// //         // Add your jump logic here\r\n// //       } else if (keys.space) {\r\n// //         // Handle attack for player 1\r\n// //         // Add your attack logic here\r\n// //       }\r\n\r\n// //       if (keys.ArrowLeft) {\r\n// //         player2.position.x -= player2.velocity.x;\r\n// //       } else if (keys.ArrowRight) {\r\n// //         player2.position.x += player2.velocity.x;\r\n// //       } else if (keys.ArrowUp) {\r\n// //         // Handle jump for player 2\r\n// //         // Add your jump logic here\r\n// //       } else if (keys.ArrowDown) {\r\n// //         // Handle attack for player 2\r\n// //         // Add your attack logic here\r\n// //       }\r\n\r\n// //       kenjiAnimationFrame.draw(ctx, player1.position.x, player1.position.y);\r\n// //       samuraiAnimationFrame.draw(ctx, player2.position.x + 400, player2.position.y);\r\n\r\n// //       setCurrentFrame((prevFrame) => prevFrame + 1);\r\n\r\n// //       requestAnimationFrame(animate);\r\n// //     };\r\n\r\n// //     animate();\r\n\r\n// //     return () => {\r\n// //       window.removeEventListener('keydown', handleKeyDown);\r\n// //       window.removeEventListener('keyup', handleKeyUp);\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <canvas ref={canvasRef}></canvas>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default CanvasDrawing;\r\n"],"mappings":"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AAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAAC3D,EAAA,CA/NQD,aAAa;AAAA6D,EAAA,GAAb7D,aAAa;AAiOtB,eAAeA,aAAa;;AAI5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}