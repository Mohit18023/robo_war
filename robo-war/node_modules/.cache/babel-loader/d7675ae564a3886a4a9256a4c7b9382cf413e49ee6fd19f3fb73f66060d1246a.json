{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\Game.jsx\",\n  _s = $RefreshSig$();\n// src/components/Game.js\nimport React, { useState, useEffect } from 'react';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const [robotPosition, setRobotPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    // Handle robot movements here based on user input\n    // You'll need to add event listeners for arrow key presses\n    const handleKeyPress = event => {\n      switch (event.key) {\n        case 'ArrowUp':\n          setRobotPosition(prevPosition => ({\n            ...prevPosition,\n            y: prevPosition.y - 10\n          }));\n          break;\n        case 'ArrowDown':\n          setRobotPosition(prevPosition => ({\n            ...prevPosition,\n            y: prevPosition.y + 10\n          }));\n          break;\n        case 'ArrowLeft':\n          setRobotPosition(prevPosition => ({\n            ...prevPosition,\n            x: prevPosition.x - 10\n          }));\n          break;\n        case 'ArrowRight':\n          setRobotPosition(prevPosition => ({\n            ...prevPosition,\n            x: prevPosition.x + 10\n          }));\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"robot\",\n      style: {\n        left: `${robotPosition.x}px`,\n        top: `${robotPosition.y}px`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"NVN0SHBy6X08prVI722j8a/j0HQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Game","_s","robotPosition","setRobotPosition","x","y","handleKeyPress","event","key","prevPosition","window","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","left","top","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Game.jsx"],"sourcesContent":["// src/components/Game.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Game.css';\r\nfunction Game() {\r\n  const [robotPosition, setRobotPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    // Handle robot movements here based on user input\r\n    // You'll need to add event listeners for arrow key presses\r\n        const handleKeyPress = (event) => {\r\n          switch (event.key) {\r\n            case 'ArrowUp':\r\n              setRobotPosition((prevPosition) => ({ ...prevPosition, y: prevPosition.y - 10 }));\r\n              break;\r\n            case 'ArrowDown':\r\n              setRobotPosition((prevPosition) => ({ ...prevPosition, y: prevPosition.y + 10 }));\r\n              break;\r\n            case 'ArrowLeft':\r\n              setRobotPosition((prevPosition) => ({ ...prevPosition, x: prevPosition.x - 10 }));\r\n              break;\r\n            case 'ArrowRight':\r\n              setRobotPosition((prevPosition) => ({ ...prevPosition, x: prevPosition.x + 10 }));\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        };\r\n      \r\n        window.addEventListener('keydown', handleKeyPress);\r\n      \r\n        return () => {\r\n          window.removeEventListener('keydown', handleKeyPress);\r\n        };\r\n      }, []);\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        {/* Render the game board */}\r\n      </div>\r\n      <div\r\n        className=\"robot\"\r\n        style={{ left: `${robotPosition.x}px`, top: `${robotPosition.y}px` }}\r\n      >\r\n        {/* Render the robot */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpB,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC;IAAEQ,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAElER,SAAS,CAAC,MAAM;IACd;IACA;IACI,MAAMS,cAAc,GAAIC,KAAK,IAAK;MAChC,QAAQA,KAAK,CAACC,GAAG;QACf,KAAK,SAAS;UACZL,gBAAgB,CAAEM,YAAY,KAAM;YAAE,GAAGA,YAAY;YAAEJ,CAAC,EAAEI,YAAY,CAACJ,CAAC,GAAG;UAAG,CAAC,CAAC,CAAC;UACjF;QACF,KAAK,WAAW;UACdF,gBAAgB,CAAEM,YAAY,KAAM;YAAE,GAAGA,YAAY;YAAEJ,CAAC,EAAEI,YAAY,CAACJ,CAAC,GAAG;UAAG,CAAC,CAAC,CAAC;UACjF;QACF,KAAK,WAAW;UACdF,gBAAgB,CAAEM,YAAY,KAAM;YAAE,GAAGA,YAAY;YAAEL,CAAC,EAAEK,YAAY,CAACL,CAAC,GAAG;UAAG,CAAC,CAAC,CAAC;UACjF;QACF,KAAK,YAAY;UACfD,gBAAgB,CAAEM,YAAY,KAAM;YAAE,GAAGA,YAAY;YAAEL,CAAC,EAAEK,YAAY,CAACL,CAAC,GAAG;UAAG,CAAC,CAAC,CAAC;UACjF;QACF;UACE;MACJ;IACF,CAAC;IAEDM,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEL,cAAc,CAAC;IAElD,OAAO,MAAM;MACXI,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEN,cAAc,CAAC;IACvD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEV,oBACEP,OAAA;IAAKc,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBf,OAAA;MAAKc,SAAS,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEtB,CAAC,eACNnB,OAAA;MACEc,SAAS,EAAC,OAAO;MACjBM,KAAK,EAAE;QAAEC,IAAI,EAAG,GAAElB,aAAa,CAACE,CAAE,IAAG;QAAEiB,GAAG,EAAG,GAAEnB,aAAa,CAACG,CAAE;MAAI;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGlE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjB,EAAA,CA7CQD,IAAI;AAAAsB,EAAA,GAAJtB,IAAI;AA+Cb,eAAeA,IAAI;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}