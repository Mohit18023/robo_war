{"ast":null,"code":"// import React, { useRef, useEffect, useState } from \"react\";\n\n// function GamePage() {\n//   const canvasRef = useRef(null);\n//   const canvasWidth = window.innerWidth;\n//   const canvasHeight = window.innerHeight;\n\n//   const playerSize = {\n//     width: 100,\n//     height: 100,\n//   };\n\n//   const playerSpeed = 2;\n\n//   const [player1Position, setPlayer1Position] = useState({ x: 0, y: 500 });\n//   const [player2Position, setPlayer2Position] = useState({ x: 600, y: 500 });\n\n//   const [player1Direction, setPlayer1Direction] = useState({ x: 0, y: 0 });\n//   const [player2Direction, setPlayer2Direction] = useState({ x: 0, y: 0 });\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext(\"2d\");\n\n//     const handleKeyDown = (event) => {\n//       switch (event.key) {\n//         case \"ArrowLeft\":\n//           setPlayer2Direction((prevDirection) => ({\n//             ...prevDirection,\n//             x: -playerSpeed,\n//           }));\n//           break;\n//         case \"ArrowRight\":\n//           setPlayer2Direction((prevDirection) => ({\n//             ...prevDirection,\n//             x: playerSpeed,\n//           }));\n//           break;\n//         case \"ArrowUp\":\n//           setPlayer2Direction((prevDirection) => ({\n//             ...prevDirection,\n//             y: -playerSpeed,\n//           }));\n//           break;\n//         case \"ArrowDown\":\n//           setPlayer2Direction((prevDirection) => ({\n//             ...prevDirection,\n//             y: playerSpeed,\n//           }));\n//           break;\n//         case \"a\":\n//           setPlayer1Direction((prevDirection) => ({\n//             ...prevDirection,\n//             x: -playerSpeed,\n//           }));\n//           break;\n//         case \"d\":\n//           setPlayer1Direction((prevDirection) => ({\n//             ...prevDirection,\n//             x: playerSpeed,\n//           }));\n//           break;\n//         case \"w\":\n//           setPlayer1Direction((prevDirection) => ({\n//             ...prevDirection,\n//             y: -playerSpeed,\n//           }));\n//           break;\n//         case \"s\":\n//           setPlayer1Direction((prevDirection) => ({\n//             ...prevDirection,\n//             y: playerSpeed,\n//           }));\n//           break;\n//         default:\n//           break;\n//       }\n//     };\n\n//     const handleKeyUp = (event) => {\n//       switch (event.key) {\n//         case \"ArrowLeft\":\n//         case \"ArrowRight\":\n//         case \"ArrowUp\":\n//         case \"ArrowDown\":\n//           setPlayer2Direction({ x: 0, y: 0 });\n//           break;\n//         case \"a\":\n//         case \"d\":\n//         case \"w\":\n//         case \"s\":\n//           setPlayer1Direction({ x: 0, y: 0 });\n//           break;\n//         default:\n//           break;\n//       }\n//     };\n\n//     const updateGame = () => {\n//       context.clearRect(0, 0, canvas.width, canvas.height);\n//       context.fillStyle = \"black\";\n//       context.fillRect(0, 0, canvasWidth, canvasHeight);\n\n//       setPlayer1Position((prevPosition) => ({\n//         x: prevPosition.x + player1Direction.x,\n//         y: prevPosition.y + player1Direction.y,\n//       }));\n\n//       setPlayer2Position((prevPosition) => ({\n//         x: prevPosition.x + player2Direction.x,\n//         y: prevPosition.y + player2Direction.y,\n//       }));\n\n//       context.fillStyle = \"red\";\n//       context.fillRect(\n//         player1Position.x,\n//         player1Position.y,\n//         playerSize.width,\n//         playerSize.height\n//       );\n\n//       context.fillStyle = \"blue\";\n//       context.fillRect(\n//         player2Position.x,\n//         player2Position.y,\n//         playerSize.width,\n//         playerSize.height\n//       );\n\n//       requestAnimationFrame(updateGame);\n//     };\n\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     window.addEventListener(\"keyup\", handleKeyUp);\n\n//     updateGame();\n\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyDown);\n//       window.removeEventListener(\"keyup\", handleKeyUp);\n//     };\n//   }, [player1Position, player2Position, player1Direction, player2Direction]);\n\n//   return (\n//     <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight}></canvas>\n//   );\n// }\n\n// export default GamePage;","map":{"version":3,"names":[],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/pages/gamePage.jsx"],"sourcesContent":["// import React, { useRef, useEffect, useState } from \"react\";\r\n\r\n// function GamePage() {\r\n//   const canvasRef = useRef(null);\r\n//   const canvasWidth = window.innerWidth;\r\n//   const canvasHeight = window.innerHeight;\r\n\r\n//   const playerSize = {\r\n//     width: 100,\r\n//     height: 100,\r\n//   };\r\n\r\n//   const playerSpeed = 2;\r\n\r\n//   const [player1Position, setPlayer1Position] = useState({ x: 0, y: 500 });\r\n//   const [player2Position, setPlayer2Position] = useState({ x: 600, y: 500 });\r\n\r\n//   const [player1Direction, setPlayer1Direction] = useState({ x: 0, y: 0 });\r\n//   const [player2Direction, setPlayer2Direction] = useState({ x: 0, y: 0 });\r\n\r\n//   useEffect(() => {\r\n//     const canvas = canvasRef.current;\r\n//     const context = canvas.getContext(\"2d\");\r\n\r\n//     const handleKeyDown = (event) => {\r\n//       switch (event.key) {\r\n//         case \"ArrowLeft\":\r\n//           setPlayer2Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             x: -playerSpeed,\r\n//           }));\r\n//           break;\r\n//         case \"ArrowRight\":\r\n//           setPlayer2Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             x: playerSpeed,\r\n//           }));\r\n//           break;\r\n//         case \"ArrowUp\":\r\n//           setPlayer2Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             y: -playerSpeed,\r\n//           }));\r\n//           break;\r\n//         case \"ArrowDown\":\r\n//           setPlayer2Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             y: playerSpeed,\r\n//           }));\r\n//           break;\r\n//         case \"a\":\r\n//           setPlayer1Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             x: -playerSpeed,\r\n//           }));\r\n//           break;\r\n//         case \"d\":\r\n//           setPlayer1Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             x: playerSpeed,\r\n//           }));\r\n//           break;\r\n//         case \"w\":\r\n//           setPlayer1Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             y: -playerSpeed,\r\n//           }));\r\n//           break;\r\n//         case \"s\":\r\n//           setPlayer1Direction((prevDirection) => ({\r\n//             ...prevDirection,\r\n//             y: playerSpeed,\r\n//           }));\r\n//           break;\r\n//         default:\r\n//           break;\r\n//       }\r\n//     };\r\n\r\n//     const handleKeyUp = (event) => {\r\n//       switch (event.key) {\r\n//         case \"ArrowLeft\":\r\n//         case \"ArrowRight\":\r\n//         case \"ArrowUp\":\r\n//         case \"ArrowDown\":\r\n//           setPlayer2Direction({ x: 0, y: 0 });\r\n//           break;\r\n//         case \"a\":\r\n//         case \"d\":\r\n//         case \"w\":\r\n//         case \"s\":\r\n//           setPlayer1Direction({ x: 0, y: 0 });\r\n//           break;\r\n//         default:\r\n//           break;\r\n//       }\r\n//     };\r\n\r\n//     const updateGame = () => {\r\n//       context.clearRect(0, 0, canvas.width, canvas.height);\r\n//       context.fillStyle = \"black\";\r\n//       context.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n//       setPlayer1Position((prevPosition) => ({\r\n//         x: prevPosition.x + player1Direction.x,\r\n//         y: prevPosition.y + player1Direction.y,\r\n//       }));\r\n\r\n//       setPlayer2Position((prevPosition) => ({\r\n//         x: prevPosition.x + player2Direction.x,\r\n//         y: prevPosition.y + player2Direction.y,\r\n//       }));\r\n\r\n//       context.fillStyle = \"red\";\r\n//       context.fillRect(\r\n//         player1Position.x,\r\n//         player1Position.y,\r\n//         playerSize.width,\r\n//         playerSize.height\r\n//       );\r\n\r\n//       context.fillStyle = \"blue\";\r\n//       context.fillRect(\r\n//         player2Position.x,\r\n//         player2Position.y,\r\n//         playerSize.width,\r\n//         playerSize.height\r\n//       );\r\n\r\n//       requestAnimationFrame(updateGame);\r\n//     };\r\n\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     window.addEventListener(\"keyup\", handleKeyUp);\r\n\r\n//     updateGame();\r\n\r\n//     return () => {\r\n//       window.removeEventListener(\"keydown\", handleKeyDown);\r\n//       window.removeEventListener(\"keyup\", handleKeyUp);\r\n//     };\r\n//   }, [player1Position, player2Position, player1Direction, player2Direction]);\r\n\r\n//   return (\r\n//     <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight}></canvas>\r\n//   );\r\n// }\r\n\r\n// export default GamePage;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}