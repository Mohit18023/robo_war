{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasGame.js\";\n// src/CanvasGame.js\n\nimport React, { Component, createRef } from 'react';\nimport './CanvasGame.css';\nimport { Sprite, Fighter } from './classes';\n\n// Import GSAP\nimport gsap from 'gsap'; // Add this import\n\n// Import or define your rectangularCollision and determineWinner functions\nimport { rectangularCollision, determineWinner } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CanvasGame extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/createRef();\n    this.player = null;\n    this.enemy = null;\n    this.timerId = null; // Initialize timerId\n\n    // Define keys object to track key presses\n    this.keys = {\n      a: false,\n      d: false,\n      ArrowRight: false,\n      ArrowLeft: false\n    };\n\n    // Bind event handlers to this context\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n  }\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 576;\n    c.fillRect(0, 0, canvas.width, canvas.height);\n    const gravity = 0.7;\n    const background = new Sprite({\n      position: {\n        x: 0,\n        y: 0\n      },\n      imageSrc: './img/background.png',\n      context: c\n    });\n    const shop = new Sprite({\n      position: {\n        x: 600,\n        y: 128\n      },\n      imageSrc: './img/shop.png',\n      scale: 2.75,\n      framesMax: 6\n    });\n    this.player = new Fighter({\n      position: {\n        x: 0,\n        y: 0\n      },\n      velocity: {\n        x: 0,\n        y: 0\n      },\n      offset: {\n        x: 0,\n        y: 0\n      },\n      imageSrc: './img/samuraiMack/Idle.png',\n      framesMax: 8,\n      scale: 2.5,\n      offset: {\n        x: 215,\n        y: 157\n      },\n      sprites: {\n        // Define your sprite configurations here\n        idle: {\n          imageSrc: './img/samuraiMack/Idle.png',\n          framesMax: 8\n        },\n        run: {\n          imageSrc: './img/samuraiMack/Run.png',\n          framesMax: 8\n        },\n        jump: {\n          imageSrc: './img/samuraiMack/Jump.png',\n          framesMax: 2\n        },\n        fall: {\n          imageSrc: './img/samuraiMack/Fall.png',\n          framesMax: 2\n        },\n        attack1: {\n          imageSrc: 'C:\\Users\\Meenal Jain\\Desktop\\fighting-game\\GameFrames\\Attack1.png',\n          framesMax: 6\n        },\n        takeHit: {\n          imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\n          framesMax: 4\n        },\n        death: {\n          imageSrc: './img/samuraiMack/Death.png',\n          framesMax: 6\n        }\n      },\n      attackBox: {\n        offset: {\n          x: 100,\n          y: 50\n        },\n        width: 160,\n        height: 50\n      }\n    });\n    this.enemy = new Fighter({\n      position: {\n        x: 400,\n        y: 100\n      },\n      velocity: {\n        x: 0,\n        y: 0\n      },\n      color: 'blue',\n      offset: {\n        x: -50,\n        y: 0\n      },\n      imageSrc: './img/kenji/Idle.png',\n      framesMax: 4,\n      scale: 2.5,\n      offset: {\n        x: 215,\n        y: 167\n      },\n      sprites: {\n        // Define your sprite configurations here\n        idle: {\n          imageSrc: './img/kenji/Idle.png',\n          framesMax: 4\n        },\n        run: {\n          imageSrc: './img/kenji/Run.png',\n          framesMax: 8\n        },\n        jump: {\n          imageSrc: './img/kenji/Jump.png',\n          framesMax: 2\n        },\n        fall: {\n          imageSrc: './img/kenji/Fall.png',\n          framesMax: 2\n        },\n        attack1: {\n          imageSrc: './img/kenji/Attack1.png',\n          framesMax: 4\n        },\n        takeHit: {\n          imageSrc: './img/kenji/Take hit.png',\n          framesMax: 3\n        },\n        death: {\n          imageSrc: './img/kenji/Death.png',\n          framesMax: 7\n        }\n      },\n      attackBox: {\n        offset: {\n          x: -170,\n          y: 50\n        },\n        width: 170,\n        height: 50\n      }\n    });\n    console.log(this.player);\n    const keys = {\n      a: {\n        pressed: false\n      },\n      d: {\n        pressed: false\n      },\n      ArrowRight: {\n        pressed: false\n      },\n      ArrowLeft: {\n        pressed: false\n      }\n    };\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n    // Implement the rest of your canvas game logic here\n\n    function animate() {\n      window.requestAnimationFrame(animate);\n      c.fillStyle = 'black';\n      c.fillRect(0, 0, canvas.width, canvas.height);\n      background.update();\n      shop.update();\n      c.fillStyle = 'rgba(255, 255, 255, 0.15)';\n      c.fillRect(0, 0, canvas.width, canvas.height);\n      player.update();\n      enemy.update();\n      player.velocity.x = 0;\n      enemy.velocity.x = 0;\n      // Implement the rest of your animation and game logic here\n\n      // player movement\n\n      if (keys.a.pressed && player.lastKey === 'a') {\n        player.velocity.x = -5;\n        player.switchSprite('run');\n      } else if (keys.d.pressed && player.lastKey === 'd') {\n        player.velocity.x = 5;\n        player.switchSprite('run');\n      } else {\n        player.switchSprite('idle');\n      }\n\n      // jumping\n      if (player.velocity.y < 0) {\n        player.switchSprite('jump');\n      } else if (player.velocity.y > 0) {\n        player.switchSprite('fall');\n      }\n\n      // Enemy movement\n      if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n        enemy.velocity.x = -5;\n        enemy.switchSprite('run');\n      } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n        enemy.velocity.x = 5;\n        enemy.switchSprite('run');\n      } else {\n        enemy.switchSprite('idle');\n      }\n\n      // jumping\n      if (enemy.velocity.y < 0) {\n        enemy.switchSprite('jump');\n      } else if (enemy.velocity.y > 0) {\n        enemy.switchSprite('fall');\n      }\n\n      // detect for collision & enemy gets hit\n      if (rectangularCollision({\n        rectangle1: player,\n        rectangle2: enemy\n      }) && player.isAttacking && player.framesCurrent === 4) {\n        enemy.takeHit();\n        player.isAttacking = false;\n        this.gsap.to('#enemyHealth', {\n          width: enemy.health + '%'\n        });\n      }\n\n      // if player misses\n      if (player.isAttacking && player.framesCurrent === 4) {\n        player.isAttacking = false;\n      }\n\n      // this is where our player gets hit\n      if (rectangularCollision({\n        rectangle1: enemy,\n        rectangle2: player\n      }) && enemy.isAttacking && enemy.framesCurrent === 2) {\n        player.takeHit();\n        enemy.isAttacking = false;\n        this.gsap.to('#playerHealth', {\n          width: player.health + '%'\n        });\n      }\n\n      // if player misses\n      if (enemy.isAttacking && enemy.framesCurrent === 2) {\n        enemy.isAttacking = false;\n      }\n\n      // end game based on health\n      if (this.enemy.health <= 0 || this.player.health <= 0) {\n        // determineWinner({ player, enemy, timerId })\n        determineWinner({\n          player: this.player,\n          enemy: this.enemy,\n          timerId\n        });\n      }\n      // Gravity function\n      if (player.position.y + player.height + player.velocity.y >= canvas.height - 96) {\n        player.velocity.y = 0;\n        player.position.y = 330;\n      } else player.velocity.y += gravity;\n    }\n    animate();\n\n    // Add event listeners for keyboard input\n\n    // window.addEventListener('keydown', (event) => {\n    //   if (!player.dead) {\n    //     switch (event.key) {\n    //       // Handle player input keys\n    //       case 'd':\n    //     keys.d.pressed = true\n    //     player.lastKey = 'd'\n    //     break\n    //   case 'a':\n    //     keys.a.pressed = true\n    //     player.lastKey = 'a'\n    //     break\n    //   case 'w':\n    //     player.velocity.y = -20\n    //     break\n    //   case ' ':\n    //     player.attack()\n    //     break\n    //     }\n    //   }\n\n    //   if (!enemy.dead) {\n    //     switch (event.key) {\n    //       // Handle enemy input keys\n    //       case 'ArrowRight':\n    //         keys.ArrowRight.pressed = true\n    //         enemy.lastKey = 'ArrowRight'\n    //         break\n    //       case 'ArrowLeft':\n    //         keys.ArrowLeft.pressed = true\n    //         enemy.lastKey = 'ArrowLeft'\n    //         break\n    //       case 'ArrowUp':\n    //         enemy.velocity.y = -20\n    //         break\n    //       case 'ArrowDown':\n    //         enemy.attack()\n\n    //         break\n    //     }\n    //   }\n    // });\n\n    // window.addEventListener('keyup', (event) => {\n    //   // Handle key releases\n    //   switch (event.key) {\n    //     case 'd':\n    //       keys.d.pressed = false\n    //       break\n    //     case 'a':\n    //       keys.a.pressed = false\n    //       break\n    //   }\n\n    //   // enemy keys\n    //   switch (event.key) {\n    //     case 'ArrowRight':\n    //       keys.ArrowRight.pressed = false\n    //       break\n    //     case 'ArrowLeft':\n    //       keys.ArrowLeft.pressed = false\n    //       break\n    //   }\n    // });\n\n    // Implement the rest of your game functionality, timer, and other functions here\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        width: 1024,\n        height: 576\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default CanvasGame;","map":{"version":3,"names":["React","Component","createRef","Sprite","Fighter","gsap","rectangularCollision","determineWinner","jsxDEV","_jsxDEV","CanvasGame","constructor","props","canvasRef","player","enemy","timerId","keys","a","d","ArrowRight","ArrowLeft","handleKeyDown","bind","handleKeyUp","componentDidMount","canvas","current","c","getContext","width","height","fillRect","gravity","background","position","x","y","imageSrc","context","shop","scale","framesMax","velocity","offset","sprites","idle","run","jump","fall","attack1","takeHit","death","attackBox","color","console","log","pressed","window","addEventListener","animate","requestAnimationFrame","fillStyle","update","lastKey","switchSprite","rectangle1","rectangle2","isAttacking","framesCurrent","to","health","render","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasGame.js"],"sourcesContent":["// src/CanvasGame.js\r\n\r\nimport React, { Component, createRef } from 'react';\r\nimport './CanvasGame.css';\r\nimport { Sprite, Fighter } from './classes';\r\n\r\n// Import GSAP\r\nimport gsap from 'gsap'; // Add this import\r\n\r\n// Import or define your rectangularCollision and determineWinner functions\r\nimport { rectangularCollision, determineWinner } from './utils';\r\n\r\nclass CanvasGame extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.canvasRef = createRef();\r\n      this.player = null;\r\n      this.enemy = null;\r\n      this.timerId = null; // Initialize timerId\r\n  \r\n      // Define keys object to track key presses\r\n      this.keys = {\r\n        a: false,\r\n        d: false,\r\n        ArrowRight: false,\r\n        ArrowLeft: false,\r\n      };\r\n\r\n    \r\n    // Bind event handlers to this context\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.handleKeyUp = this.handleKeyUp.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvasRef.current;\r\n    const c = canvas.getContext('2d');\r\n    \r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    c.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const gravity = 0.7;\r\n\r\n    const background = new Sprite({\r\n      position: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      imageSrc: './img/background.png',\r\n      context: c\r\n    });\r\n\r\n    const shop = new Sprite({\r\n      position: {\r\n        x: 600,\r\n        y: 128\r\n      },\r\n      imageSrc: './img/shop.png',\r\n      scale: 2.75,\r\n      framesMax: 6\r\n    });\r\n\r\n    this.player = new Fighter({\r\n      position: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      velocity: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      offset: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      imageSrc: './img/samuraiMack/Idle.png',\r\n      framesMax: 8,\r\n      scale: 2.5,\r\n      offset: {\r\n        x: 215,\r\n        y: 157\r\n      },\r\n      sprites: {\r\n        // Define your sprite configurations here\r\n        idle: {\r\n            imageSrc: './img/samuraiMack/Idle.png',\r\n            framesMax: 8\r\n          },\r\n          run: {\r\n            imageSrc: './img/samuraiMack/Run.png',\r\n            framesMax: 8\r\n          },\r\n          jump: {\r\n            imageSrc: './img/samuraiMack/Jump.png',\r\n            framesMax: 2\r\n          },\r\n          fall: {\r\n            imageSrc: './img/samuraiMack/Fall.png',\r\n            framesMax: 2\r\n          },\r\n          attack1: {\r\n            imageSrc: 'C:\\Users\\Meenal Jain\\Desktop\\fighting-game\\GameFrames\\Attack1.png',\r\n            framesMax: 6\r\n          },\r\n          takeHit: {\r\n            imageSrc: './img/samuraiMack/Take Hit - white silhouette.png',\r\n            framesMax: 4\r\n          },\r\n          death: {\r\n            imageSrc: './img/samuraiMack/Death.png',\r\n            framesMax: 6\r\n          }\r\n      },\r\n      attackBox: {\r\n        offset: {\r\n          x: 100,\r\n          y: 50\r\n        },\r\n        width: 160,\r\n        height: 50\r\n      }\r\n    });\r\n\r\n    this.enemy = new Fighter({\r\n      position: {\r\n        x: 400,\r\n        y: 100\r\n      },\r\n      velocity: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      color: 'blue',\r\n      offset: {\r\n        x: -50,\r\n        y: 0\r\n      },\r\n      imageSrc: './img/kenji/Idle.png',\r\n      framesMax: 4,\r\n      scale: 2.5,\r\n      offset: {\r\n        x: 215,\r\n        y: 167\r\n      },\r\n      sprites: {\r\n        // Define your sprite configurations here\r\n        idle: {\r\n            imageSrc: './img/kenji/Idle.png',\r\n            framesMax: 4\r\n          },\r\n          run: {\r\n            imageSrc: './img/kenji/Run.png',\r\n            framesMax: 8\r\n          },\r\n          jump: {\r\n            imageSrc: './img/kenji/Jump.png',\r\n            framesMax: 2\r\n          },\r\n          fall: {\r\n            imageSrc: './img/kenji/Fall.png',\r\n            framesMax: 2\r\n          },\r\n          attack1: {\r\n            imageSrc: './img/kenji/Attack1.png',\r\n            framesMax: 4\r\n          },\r\n          takeHit: {\r\n            imageSrc: './img/kenji/Take hit.png',\r\n            framesMax: 3\r\n          },\r\n          death: {\r\n            imageSrc: './img/kenji/Death.png',\r\n            framesMax: 7\r\n          }\r\n      },\r\n      attackBox: {\r\n        offset: {\r\n          x: -170,\r\n          y: 50\r\n        },\r\n        width: 170,\r\n        height: 50\r\n      }\r\n    });\r\n\r\n    console.log(this.player);\r\n\r\n    const keys = {\r\n      a: {\r\n        pressed: false\r\n      },\r\n      d: {\r\n        pressed: false\r\n      },\r\n      ArrowRight: {\r\n        pressed: false\r\n      },\r\n      ArrowLeft: {\r\n        pressed: false\r\n      }\r\n    };\r\n     \r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n    window.addEventListener('keyup', this.handleKeyUp);\r\n    // Implement the rest of your canvas game logic here\r\n\r\n    function animate() {\r\n      window.requestAnimationFrame(animate);\r\n      c.fillStyle = 'black';\r\n      c.fillRect(0, 0, canvas.width, canvas.height);\r\n      background.update();\r\n      shop.update();\r\n      c.fillStyle = 'rgba(255, 255, 255, 0.15)';\r\n      c.fillRect(0, 0, canvas.width, canvas.height);\r\n      player.update();\r\n      enemy.update();\r\n\r\n      player.velocity.x = 0\r\n      enemy.velocity.x = 0\r\n      // Implement the rest of your animation and game logic here\r\n\r\n        // player movement\r\n\r\n  if (keys.a.pressed && player.lastKey === 'a') {\r\n    player.velocity.x = -5\r\n    player.switchSprite('run')\r\n  } else if (keys.d.pressed && player.lastKey === 'd') {\r\n    player.velocity.x = 5\r\n    player.switchSprite('run')\r\n  } else {\r\n    player.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (player.velocity.y < 0) {\r\n    player.switchSprite('jump')\r\n  } else if (player.velocity.y > 0) {\r\n    player.switchSprite('fall')\r\n  }\r\n\r\n  // Enemy movement\r\n  if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\r\n    enemy.velocity.x = -5\r\n    enemy.switchSprite('run')\r\n  } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n    enemy.velocity.x = 5\r\n    enemy.switchSprite('run')\r\n  } else {\r\n    enemy.switchSprite('idle')\r\n  }\r\n\r\n  // jumping\r\n  if (enemy.velocity.y < 0) {\r\n    enemy.switchSprite('jump')\r\n  } else if (enemy.velocity.y > 0) {\r\n    enemy.switchSprite('fall')\r\n  }\r\n\r\n  // detect for collision & enemy gets hit\r\n  if (\r\n  rectangularCollision({\r\n    rectangle1: player,\r\n    rectangle2: enemy\r\n  }) &&\r\n  player.isAttacking &&\r\n  player.framesCurrent === 4\r\n) {\r\n  enemy.takeHit()\r\n  player.isAttacking = false\r\n\r\n  this.gsap.to('#enemyHealth', {\r\n    width: enemy.health + '%'\r\n  })\r\n}\r\n\r\n  // if player misses\r\n  if (player.isAttacking && player.framesCurrent === 4) {\r\n    player.isAttacking = false\r\n  }\r\n\r\n  // this is where our player gets hit\r\n  if (\r\n    rectangularCollision({\r\n      rectangle1: enemy,\r\n      rectangle2: player\r\n    }) &&\r\n    enemy.isAttacking &&\r\n    enemy.framesCurrent === 2\r\n  ) {\r\n    player.takeHit()\r\n    enemy.isAttacking = false\r\n\r\n    this.gsap.to('#playerHealth', {\r\n      width: player.health + '%'\r\n    })\r\n  }\r\n\r\n  // if player misses\r\n  if (enemy.isAttacking && enemy.framesCurrent === 2) {\r\n    enemy.isAttacking = false\r\n  }\r\n\r\n  // end game based on health\r\n  if (this.enemy.health <= 0 || this.player.health <= 0) {\r\n    // determineWinner({ player, enemy, timerId })\r\n    determineWinner({ player: this.player, enemy: this.enemy, timerId });\r\n  }\r\n   // Gravity function\r\n    if (player.position.y + player.height + player.velocity.y >= canvas.height - 96) {\r\n        player.velocity.y = 0;\r\n        player.position.y = 330;\r\n      } else player.velocity.y += gravity;\r\n    }\r\n  \r\n    animate();\r\n\r\n    // Add event listeners for keyboard input\r\n\r\n    // window.addEventListener('keydown', (event) => {\r\n    //   if (!player.dead) {\r\n    //     switch (event.key) {\r\n    //       // Handle player input keys\r\n    //       case 'd':\r\n    //     keys.d.pressed = true\r\n    //     player.lastKey = 'd'\r\n    //     break\r\n    //   case 'a':\r\n    //     keys.a.pressed = true\r\n    //     player.lastKey = 'a'\r\n    //     break\r\n    //   case 'w':\r\n    //     player.velocity.y = -20\r\n    //     break\r\n    //   case ' ':\r\n    //     player.attack()\r\n    //     break\r\n    //     }\r\n    //   }\r\n\r\n    //   if (!enemy.dead) {\r\n    //     switch (event.key) {\r\n    //       // Handle enemy input keys\r\n    //       case 'ArrowRight':\r\n    //         keys.ArrowRight.pressed = true\r\n    //         enemy.lastKey = 'ArrowRight'\r\n    //         break\r\n    //       case 'ArrowLeft':\r\n    //         keys.ArrowLeft.pressed = true\r\n    //         enemy.lastKey = 'ArrowLeft'\r\n    //         break\r\n    //       case 'ArrowUp':\r\n    //         enemy.velocity.y = -20\r\n    //         break\r\n    //       case 'ArrowDown':\r\n    //         enemy.attack()\r\n    \r\n    //         break\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n    // window.addEventListener('keyup', (event) => {\r\n    //   // Handle key releases\r\n    //   switch (event.key) {\r\n    //     case 'd':\r\n    //       keys.d.pressed = false\r\n    //       break\r\n    //     case 'a':\r\n    //       keys.a.pressed = false\r\n    //       break\r\n    //   }\r\n    \r\n    //   // enemy keys\r\n    //   switch (event.key) {\r\n    //     case 'ArrowRight':\r\n    //       keys.ArrowRight.pressed = false\r\n    //       break\r\n    //     case 'ArrowLeft':\r\n    //       keys.ArrowLeft.pressed = false\r\n    //       break\r\n    //   }\r\n    // });\r\n\r\n    // Implement the rest of your game functionality, timer, and other functions here\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"canvas-container\">\r\n        <canvas ref={this.canvasRef} width={1024} height={576}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}