{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\Signup.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// import {\n//   Button,\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   InputGroup,\n//   InputRightElement,\n//   VStack,\n//   useToast,\n// } from \"@chakra-ui/react\";\n// import { Flex, Spacer } from '@chakra-ui/react'\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { Box , Container, Center} from '@chakra-ui/react';\n// import clicksound from './Sounds/Click-SoundEffect.mp3'\n\n// const Signup = () => {\n//   const [username, setName] = useState();\n//   const [email, setEmail] = useState();\n//   const [confirmpassword, setConfirmpassword] = useState();\n//   const [password, setPassword] = useState();\n//   const [show, setShow] = useState(false);\n//   const [showconfirm, setShowconfirm] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const toast = useToast();\n\n//   const ding=(e)=>{\n//     const sound=new Audio(clicksound);\n//    sound.play();\n//   }\n\n//   const submitHandler = async () => {\n//     setLoading(true);\n//     if (!username || !email || !password || !confirmpassword) {\n//       toast({\n//         title: \"Please fill all the required fields\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: \"true\",\n//         position: \"bottom\",\n//       });\n\n//       setLoading(false);\n//       return;\n//     }\n//     if (password !== confirmpassword) {\n//       toast({\n//         title: \"Passwords Doesn't match\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//       return;\n//     }\n//     // try {\n//     //   const config = {\n//     //     headers: {\n//     //       \"Content-type\": \"application/json\",\n//     //     },\n//     //   };\n\n//     //   const { data } = await axios.post(\n//     //     '/roboWar',\n//     //     { username, email, password },\n//     //     config\n//     //   );\n//     const handleClick=(e)=>{\n//           e.preventDefault();\n//           axios.post('/roboWar',user)\n//         },\n\n//       toast({\n//         title: \"Registration successful\",\n//         duration: 5000,\n//         status: \"success\",\n//         isClosable: true,\n//         position: \"top\",\n//       });\n\n//       localStorage.setItem(\"userInfo\", JSON.stringify(data));\n//       setLoading(false);\n//     } \n//       catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: error.response.data.message,\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//     }\n//   };\n\n//   // export default function Signup(){\n//   //   const [user,setuser]=useState({\n//   //     username :\"\",\n//   //     email:\"\",\n//   //     createpassword :\"\",\n//   //     confirmpassword:\"\"\n//   //   })\n//   //   const handleClick=(e)=>{\n//   //     e.preventDefault();\n//   //     axios.post('/roboWar',user)\n//   //   }  \n\n//     return(\n//         <>\n//         <Container>\n//           <Flex color='white' align = \"centre\" >\n//             <Box w='5750px'>\n//             <VStack spacing=\"5px\" color=\"white\">\n\n//               <FormControl id=\"first-name\" isRequired>\n//                 <FormLabel>Username</FormLabel>\n//                 <Input\n//                 onClick={ding}\n//                 placeholder=\"Enter your name\"\n//                 bg={username ? \"gray.50\" : \"white\"}\n//                 color=\"black\"\n//                 _hover={{ borderColor: \"black\" }}\n//                 borderColor=\"black\"\n//                 onChange={(event) => {\n//                   setName(event.target.value);\n//           }}\n//           value={username}\n//         />\n//       </FormControl>\n\n//       <FormControl id=\"email\" isRequired>\n//         <FormLabel>Email</FormLabel>\n//         <Input\n//         onClick={ding}\n//           placeholder=\"Enter your email\"\n//           bg={email ? \"gray.50\" : \"white\"}\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setEmail(event.target.value);\n//           }}\n//           value={email}\n//         />\n//       </FormControl>\n//       <FormControl id=\"password\" isRequired>\n//         <FormLabel>Password</FormLabel>\n//         <Input\n//            onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={password ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setPassword(event.target.value);\n//           }}\n//           value={password}\n//         />\n//          </FormControl>\n\n//          <FormControl id=\"confirm-password\" isRequired>\n//           <FormLabel>Confirm Password</FormLabel>\n//           <InputGroup>\n//           <Input\n//           onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setConfirmpassword(event.target.value);\n//           }}\n//           value={confirmpassword}\n//         />\n//         </InputGroup>\n//       </FormControl>\n\n//       <Button\n//         colorScheme=\"teal\"\n//         size='lg'\n//         margin={'5'}\n//         color='white'\n//         fontWeight='bold'\n//         borderRadius='md'\n//         bgGradient='linear(to-r, teal.500, green.500)'\n//         _hover={{\n//         bgGradient: 'linear(to-r, red.500, yellow.500)',\n//         }}\n//         style={{ marginTop: 15 }}\n//         onClick={submitHandler}\n//         isLoading={loading}\n//       >\n//         Sign Up\n//       </Button>\n//     </VStack> \n\n// </Box>\n\n//   </Flex>\n//   </Container>\n//   </>\n//         )\n//     };\n\n// export default Signup;\n\n// import axios from 'axios';\n// import React, { useState } from 'react';\n// import { Box, Button, ButtonGroup, Stack } from '@chakra-ui/react'\n// import { Flex } from '@chakra-ui/react'\n// import { Container } from '@chakra-ui/react'\n// import {\n//   FormControl,\n//   FormLabel,\n//   FormErrorMessage,\n//   FormHelperText,\n//   Input,\n// } from '@chakra-ui/react'\n\n// export default function Signup() {\n//   const [user, setuser] = useState({\n//     username: \"\",\n//     email: \"\",\n//     createpassword: \"\",\n//     confirmpassword: \"\"\n//   })\n\n//   const handleClick = (e) => {\n//     e.preventDefault();\n\n//     const headers = {\n//       'Body':'user',\n//       'Content-Type': 'application/json',\n//       'Authorization': 'Bearer YourAccessToken',\n//     };\n\n//     axios.post('/roboWar',{ headers })\n//       .then(response => {\n//         console.log('Response:', response.data);\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   }\n\n//   return (\n//     <>\n//       <Container>\n//         <Flex color='white' align=\"centre\">\n//           <Box w='650px'>\n//           <FormControl >\n//         <FormLabel> Username</FormLabel>\n//         <Input placeholder='Username' value={user.username} onChange={(event)=>setuser({...user,username:event.target.value})}/>\n//              <FormLabel>Email</FormLabel>\n//             <Input placeholder='Email' value={user.email} onChange={(event)=>setuser({...user,email:event.target.value})}/>\n//             <FormLabel>Create Password</FormLabel>\n//             <Input placeholder='Must include special symbols like @,# ' value={user.createpassword} onChange={(event)=>setuser({...user,createpassword:event.target.value})}/>\n\n//            <FormLabel>Confirm Password</FormLabel>\n//            <Input placeholder='Confirm Password' value={user.confirmpassword} onChange={(event)=>setuser({...user,confirmpassword:event.target.value})}/>\n\n//          </FormControl>\n//           </Box>\n//         </Flex>\n//       </Container>\n\n//       <Button colorScheme='teal' size='lg' margin={'5'} onClick={handleClick}>Signup</Button>\n//     </>\n//   )\n// }\n\n// import axios from 'axios';\n// import React, { useState } from 'react';\n// import { Box, Button, Stack } from '@chakra-ui/react';\n// import { Flex } from '@chakra-ui/react';\n// import { Container } from '@chakra-ui/react';\n// import {\n//   FormControl,\n//   FormLabel,\n//   Input,\n// } from '@chakra-ui/react';\n\n// export default function Signup() {\n//   const [user, setUser] = useState({\n//     username: \"\",\n//     email: \"\",\n//     createpassword: \"\",\n//     confirmpassword: \"\"\n//   });\n\n//   const handleClick = async (e) => {\n//     e.preventDefault();\n\n//     // Check if passwords match before making the API call\n//     if (user.createpassword !== user.confirmpassword) {\n//       alert(\"Passwords do not match\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://localhost:5000/api/user/signup', user);\n//       // Handle success (e.g., show a success message or redirect)\n//       console.log(\"Signup successful\", response.data);\n//     } catch (error) {\n//       // Handle errors (e.g., show an error message)\n//       console.error(\"Signup failed\", error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Container>\n//         <Flex color='lightyellow' align=\"center\">\n//           <Box w='650px'>\n//             <FormControl>\n//               <FormLabel>Username</FormLabel>\n//               <Input\n//               // bg='white'\n//                 placeholder='Username'\n//                 // bg=\"white\"\n//                 // color=\"black\"\n//                 // _hover={{ borderColor: \"black\" }}\n//                 // borderColor=\"black\"\n//                 bg=\"5C469C\"\n//                 color=\"black\"\n\n//                 value={user.username}\n//                 onChange={(event) => setUser({ ...user, username: event.target.value })}\n//               />\n//               <FormLabel>Email</FormLabel>\n//               <Input\n//               // bg='white'\n//                 placeholder='Email'\n//                 value={user.email}\n//                 onChange={(event) => setUser({ ...user, email: event.target.value })}\n//               />\n//               <FormLabel>Create Password</FormLabel>\n//               <Input\n//               // bg='white'\n//                 type=\"password\"\n//                 placeholder='Must include special symbols like @,#'\n//                 value={user.createpassword}\n//                 onChange={(event) => setUser({ ...user, createpassword: event.target.value })}\n//               />\n//               <FormLabel>Confirm Password</FormLabel>\n//               <Input\n//                 type=\"password\"\n//                 placeholder='Confirm Password'\n//                 // bg='white'\n//                 // _hover={{borderColor:\"black\"}}\n//                 value={user.confirmpassword}\n//                 onChange={(event) => setUser({ ...user, confirmpassword: event.target.value })}\n//               />\n//             </FormControl>\n//           </Box>\n//         </Flex>\n//       </Container>\n\n//       <Button\n//         colorScheme='teal'\n//         size='lg'\n//         margin={'5'}\n//         onClick={handleClick}\n//       >\n//         Signup\n//       </Button>\n//     </>\n//   );\n//   }\n\n// import {\n//   Button,\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   InputGroup,\n//   InputRightElement,\n//   VStack,\n//   useToast,\n// } from \"@chakra-ui/react\";\n// import { Flex, Spacer } from '@chakra-ui/react'\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { Box , Container, Center} from '@chakra-ui/react';\n// import clicksound from './Sounds/Click-SoundEffect.mp3'\n\n// const Signup = () => {\n//   const [username, setName] = useState();\n//   const [email, setEmail] = useState();\n//   const [confirmpassword, setConfirmpassword] = useState();\n//   const [password, setPassword] = useState();\n//   const [show, setShow] = useState(false);\n//   const [showconfirm, setShowconfirm] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const toast = useToast();\n\n//   const ding=(e)=>{\n//     const sound=new Audio(clicksound);\n//    sound.play();\n//   }\n\n//   const submitHandler = async () => {\n//     setLoading(true);\n//     if (!username || !email || !password || !confirmpassword) {\n//       toast({\n//         title: \"Please fill all the required fields\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: \"true\",\n//         position: \"bottom\",\n//       });\n\n//       setLoading(false);\n//       return;\n//     }\n//     if (password !== confirmpassword) {\n//       toast({\n//         title: \"Passwords Doesn't match\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//       return;\n//     }\n//     try {\n//       const config = {\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//         },\n//       };\n\n//       const { data } = await axios.post(\n//         '/roboWar',\n//         { username, email, password },\n//         config\n//       );\n\n//       toast({\n//         title: \"Registration successful\",\n//         duration: 5000,\n//         status: \"success\",\n//         isClosable: true,\n//         position: \"top\",\n//       });\n\n//       localStorage.setItem(\"userInfo\", JSON.stringify(data));\n//       setLoading(false);\n//     } \n//       catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: error.response.data.message,\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//     }\n//   };\n\n//   return (\n//     <>\n//     <Container>\n//         <Flex color='yellow'>\n//         <Box w='5750px'>\n\n//     <VStack spacing=\"5px\" color=\"white\">\n//       <FormControl id=\"first-name\" isRequired>\n//         <FormLabel>Username</FormLabel>\n//         <Input\n//         onClick={ding}\n//           placeholder=\"Enter your name\"\n//           bg={username ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setName(event.target.value);\n//           }}\n//           value={username}\n//         />\n//       </FormControl>\n\n//       <FormControl id=\"email\" isRequired>\n//         <FormLabel>Email</FormLabel>\n//         <Input\n//         onClick={ding}\n//           placeholder=\"Enter your email\"\n//           bg={email ? \"gray.50\" : \"white\"}\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setEmail(event.target.value);\n//           }}\n//           value={email}\n//         />\n//       </FormControl>\n\n//       <FormControl id=\"password\" isRequired>\n//         <FormLabel>Password</FormLabel>\n//            <Input\n//            onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={password ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setPassword(event.target.value);\n//           }}\n//           value={password}\n//         />\n//          </FormControl>\n\n//       <FormControl id=\"confirm-password\" isRequired>\n//         <FormLabel>Confirm Password</FormLabel>\n//         <InputGroup>\n//           <Input\n//           onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setConfirmpassword(event.target.value);\n//           }}\n//           value={confirmpassword}\n//         />\n//         </InputGroup>\n//       </FormControl>\n\n//      <Button\n//         colorScheme=\"teal\"\n//         size='lg'\n//         margin={'5'}\n//         color='white'\n//         fontWeight='bold'\n//         borderRadius='md'\n//         bgGradient='linear(to-r, teal.500, green.500)'\n//         _hover={{\n//         bgGradient: 'linear(to-r, red.500, yellow.500)',\n//         }}\n//         style={{ marginTop: 15 }}\n//         onClick={submitHandler}\n//         isLoading={loading}\n//       >\n//         Sign Up\n//       </Button>\n//     </VStack>\n\n//     </Box>\n//       </Flex>\n//       </Container>\n\n//       </>\n//   );\n// };\n\n// export default Signup;\n\nconst Signup = () => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const ding = () => {\n    const sound = new Audio(clicksound);\n    sound.play();\n  };\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!username || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please fill all the required fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      setLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords don't match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\"\n      });\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await axios.post('/roboWar', {\n        username,\n        email,\n        password\n      });\n      toast({\n        title: \"Registration successful\",\n        duration: 5000,\n        status: \"success\",\n        isClosable: true,\n        position: \"top\"\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(response.data));\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\"\n      });\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        color: \"white\",\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          w: \"5750px\",\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: \"5px\",\n            color: \"white\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              size: \"lg\",\n              margin: \"5\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              borderRadius: \"md\",\n              bgGradient: \"linear(to-r, teal.500, green.500)\",\n              _hover: {\n                bgGradient: \"linear(to-r, red.500, yellow.500)\"\n              },\n              style: {\n                marginTop: 15\n              },\n              onClick: () => {\n                ding(); // Play sound effect\n                submitHandler(); // Handle form submission\n              },\n\n              isLoading: loading,\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Signup, \"wQCAXFMWlAWsB39/yTzo1yLHLRI=\", true);\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["Signup","_s","username","setUsername","useState","email","setEmail","password","setPassword","confirmpassword","setConfirmpassword","loading","setLoading","toast","useToast","ding","sound","Audio","clicksound","play","submitHandler","title","status","duration","isClosable","position","response","axios","post","localStorage","setItem","JSON","stringify","data","error","description","message","_jsxDEV","_Fragment","children","Container","Flex","color","align","Box","w","VStack","spacing","Button","colorScheme","size","margin","fontWeight","borderRadius","bgGradient","_hover","style","marginTop","onClick","isLoading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Signup.jsx"],"sourcesContent":["// import {\r\n//   Button,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Input,\r\n//   InputGroup,\r\n//   InputRightElement,\r\n//   VStack,\r\n//   useToast,\r\n// } from \"@chakra-ui/react\";\r\n// import { Flex, Spacer } from '@chakra-ui/react'\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Box , Container, Center} from '@chakra-ui/react';\r\n// import clicksound from './Sounds/Click-SoundEffect.mp3'\r\n\r\n\r\n// const Signup = () => {\r\n//   const [username, setName] = useState();\r\n//   const [email, setEmail] = useState();\r\n//   const [confirmpassword, setConfirmpassword] = useState();\r\n//   const [password, setPassword] = useState();\r\n//   const [show, setShow] = useState(false);\r\n//   const [showconfirm, setShowconfirm] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const toast = useToast();\r\n\r\n//   const ding=(e)=>{\r\n//     const sound=new Audio(clicksound);\r\n//    sound.play();\r\n//   }\r\n  \r\n\r\n//   const submitHandler = async () => {\r\n//     setLoading(true);\r\n//     if (!username || !email || !password || !confirmpassword) {\r\n//       toast({\r\n//         title: \"Please fill all the required fields\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: \"true\",\r\n//         position: \"bottom\",\r\n//       });\r\n\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     if (password !== confirmpassword) {\r\n//       toast({\r\n//         title: \"Passwords Doesn't match\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//       return;\r\n//     }\r\n//     // try {\r\n//     //   const config = {\r\n//     //     headers: {\r\n//     //       \"Content-type\": \"application/json\",\r\n//     //     },\r\n//     //   };\r\n\r\n//     //   const { data } = await axios.post(\r\n//     //     '/roboWar',\r\n//     //     { username, email, password },\r\n//     //     config\r\n//     //   );\r\n//     const handleClick=(e)=>{\r\n//           e.preventDefault();\r\n//           axios.post('/roboWar',user)\r\n//         },\r\n      \r\n\r\n//       toast({\r\n//         title: \"Registration successful\",\r\n//         duration: 5000,\r\n//         status: \"success\",\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n    \r\n\r\n//       localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n//       setLoading(false);\r\n//     } \r\n//       catch (error) {\r\n//       toast({\r\n//         title: \"Error Occured!\",\r\n//         description: error.response.data.message,\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // export default function Signup(){\r\n//   //   const [user,setuser]=useState({\r\n//   //     username :\"\",\r\n//   //     email:\"\",\r\n//   //     createpassword :\"\",\r\n//   //     confirmpassword:\"\"\r\n//   //   })\r\n//   //   const handleClick=(e)=>{\r\n//   //     e.preventDefault();\r\n//   //     axios.post('/roboWar',user)\r\n//   //   }  \r\n\r\n//     return(\r\n//         <>\r\n//         <Container>\r\n//           <Flex color='white' align = \"centre\" >\r\n//             <Box w='5750px'>\r\n//             <VStack spacing=\"5px\" color=\"white\">\r\n              \r\n//               <FormControl id=\"first-name\" isRequired>\r\n//                 <FormLabel>Username</FormLabel>\r\n//                 <Input\r\n//                 onClick={ding}\r\n//                 placeholder=\"Enter your name\"\r\n//                 bg={username ? \"gray.50\" : \"white\"}\r\n//                 color=\"black\"\r\n//                 _hover={{ borderColor: \"black\" }}\r\n//                 borderColor=\"black\"\r\n//                 onChange={(event) => {\r\n//                   setName(event.target.value);\r\n//           }}\r\n//           value={username}\r\n//         />\r\n//       </FormControl>\r\n\r\n//       <FormControl id=\"email\" isRequired>\r\n//         <FormLabel>Email</FormLabel>\r\n//         <Input\r\n//         onClick={ding}\r\n//           placeholder=\"Enter your email\"\r\n//           bg={email ? \"gray.50\" : \"white\"}\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setEmail(event.target.value);\r\n//           }}\r\n//           value={email}\r\n//         />\r\n//       </FormControl>\r\n//       <FormControl id=\"password\" isRequired>\r\n//         <FormLabel>Password</FormLabel>\r\n//         <Input\r\n//            onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={password ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setPassword(event.target.value);\r\n//           }}\r\n//           value={password}\r\n//         />\r\n//          </FormControl>\r\n         \r\n//          <FormControl id=\"confirm-password\" isRequired>\r\n//           <FormLabel>Confirm Password</FormLabel>\r\n//           <InputGroup>\r\n//           <Input\r\n//           onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setConfirmpassword(event.target.value);\r\n//           }}\r\n//           value={confirmpassword}\r\n//         />\r\n//         </InputGroup>\r\n//       </FormControl>\r\n      \r\n//       <Button\r\n//         colorScheme=\"teal\"\r\n//         size='lg'\r\n//         margin={'5'}\r\n//         color='white'\r\n//         fontWeight='bold'\r\n//         borderRadius='md'\r\n//         bgGradient='linear(to-r, teal.500, green.500)'\r\n//         _hover={{\r\n//         bgGradient: 'linear(to-r, red.500, yellow.500)',\r\n//         }}\r\n//         style={{ marginTop: 15 }}\r\n//         onClick={submitHandler}\r\n//         isLoading={loading}\r\n//       >\r\n//         Sign Up\r\n//       </Button>\r\n//     </VStack> \r\n          \r\n\r\n// </Box>\r\n  \r\n  \r\n  \r\n//   </Flex>\r\n//   </Container>\r\n//   </>\r\n//         )\r\n//     };\r\n    \r\n// export default Signup;\r\n\r\n// import axios from 'axios';\r\n// import React, { useState } from 'react';\r\n// import { Box, Button, ButtonGroup, Stack } from '@chakra-ui/react'\r\n// import { Flex } from '@chakra-ui/react'\r\n// import { Container } from '@chakra-ui/react'\r\n// import {\r\n//   FormControl,\r\n//   FormLabel,\r\n//   FormErrorMessage,\r\n//   FormHelperText,\r\n//   Input,\r\n// } from '@chakra-ui/react'\r\n\r\n// export default function Signup() {\r\n//   const [user, setuser] = useState({\r\n//     username: \"\",\r\n//     email: \"\",\r\n//     createpassword: \"\",\r\n//     confirmpassword: \"\"\r\n//   })\r\n\r\n//   const handleClick = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const headers = {\r\n//       'Body':'user',\r\n//       'Content-Type': 'application/json',\r\n//       'Authorization': 'Bearer YourAccessToken',\r\n//     };\r\n\r\n//     axios.post('/roboWar',{ headers })\r\n//       .then(response => {\r\n//         console.log('Response:', response.data);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('Error:', error);\r\n//       });\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <Container>\r\n//         <Flex color='white' align=\"centre\">\r\n//           <Box w='650px'>\r\n//           <FormControl >\r\n//         <FormLabel> Username</FormLabel>\r\n//         <Input placeholder='Username' value={user.username} onChange={(event)=>setuser({...user,username:event.target.value})}/>\r\n//              <FormLabel>Email</FormLabel>\r\n//             <Input placeholder='Email' value={user.email} onChange={(event)=>setuser({...user,email:event.target.value})}/>\r\n//             <FormLabel>Create Password</FormLabel>\r\n//             <Input placeholder='Must include special symbols like @,# ' value={user.createpassword} onChange={(event)=>setuser({...user,createpassword:event.target.value})}/>\r\n            \r\n            \r\n            \r\n//            <FormLabel>Confirm Password</FormLabel>\r\n//            <Input placeholder='Confirm Password' value={user.confirmpassword} onChange={(event)=>setuser({...user,confirmpassword:event.target.value})}/>\r\n            \r\n\r\n            \r\n            \r\n\r\n            \r\n//          </FormControl>\r\n//           </Box>\r\n//         </Flex>\r\n//       </Container>\r\n\r\n//       <Button colorScheme='teal' size='lg' margin={'5'} onClick={handleClick}>Signup</Button>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n\r\n// import axios from 'axios';\r\n// import React, { useState } from 'react';\r\n// import { Box, Button, Stack } from '@chakra-ui/react';\r\n// import { Flex } from '@chakra-ui/react';\r\n// import { Container } from '@chakra-ui/react';\r\n// import {\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Input,\r\n// } from '@chakra-ui/react';\r\n\r\n// export default function Signup() {\r\n//   const [user, setUser] = useState({\r\n//     username: \"\",\r\n//     email: \"\",\r\n//     createpassword: \"\",\r\n//     confirmpassword: \"\"\r\n//   });\r\n\r\n//   const handleClick = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Check if passwords match before making the API call\r\n//     if (user.createpassword !== user.confirmpassword) {\r\n//       alert(\"Passwords do not match\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await axios.post('https://localhost:5000/api/user/signup', user);\r\n//       // Handle success (e.g., show a success message or redirect)\r\n//       console.log(\"Signup successful\", response.data);\r\n//     } catch (error) {\r\n//       // Handle errors (e.g., show an error message)\r\n//       console.error(\"Signup failed\", error);\r\n//     }\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <>\r\n//       <Container>\r\n//         <Flex color='lightyellow' align=\"center\">\r\n//           <Box w='650px'>\r\n//             <FormControl>\r\n//               <FormLabel>Username</FormLabel>\r\n//               <Input\r\n//               // bg='white'\r\n//                 placeholder='Username'\r\n//                 // bg=\"white\"\r\n//                 // color=\"black\"\r\n//                 // _hover={{ borderColor: \"black\" }}\r\n//                 // borderColor=\"black\"\r\n//                 bg=\"5C469C\"\r\n//                 color=\"black\"\r\n               \r\n//                 value={user.username}\r\n//                 onChange={(event) => setUser({ ...user, username: event.target.value })}\r\n//               />\r\n//               <FormLabel>Email</FormLabel>\r\n//               <Input\r\n//               // bg='white'\r\n//                 placeholder='Email'\r\n//                 value={user.email}\r\n//                 onChange={(event) => setUser({ ...user, email: event.target.value })}\r\n//               />\r\n//               <FormLabel>Create Password</FormLabel>\r\n//               <Input\r\n//               // bg='white'\r\n//                 type=\"password\"\r\n//                 placeholder='Must include special symbols like @,#'\r\n//                 value={user.createpassword}\r\n//                 onChange={(event) => setUser({ ...user, createpassword: event.target.value })}\r\n//               />\r\n//               <FormLabel>Confirm Password</FormLabel>\r\n//               <Input\r\n//                 type=\"password\"\r\n//                 placeholder='Confirm Password'\r\n//                 // bg='white'\r\n//                 // _hover={{borderColor:\"black\"}}\r\n//                 value={user.confirmpassword}\r\n//                 onChange={(event) => setUser({ ...user, confirmpassword: event.target.value })}\r\n//               />\r\n//             </FormControl>\r\n//           </Box>\r\n//         </Flex>\r\n//       </Container>\r\n\r\n//       <Button\r\n//         colorScheme='teal'\r\n//         size='lg'\r\n//         margin={'5'}\r\n//         onClick={handleClick}\r\n//       >\r\n//         Signup\r\n//       </Button>\r\n//     </>\r\n//   );\r\n//   }\r\n\r\n// import {\r\n//   Button,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Input,\r\n//   InputGroup,\r\n//   InputRightElement,\r\n//   VStack,\r\n//   useToast,\r\n// } from \"@chakra-ui/react\";\r\n// import { Flex, Spacer } from '@chakra-ui/react'\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Box , Container, Center} from '@chakra-ui/react';\r\n// import clicksound from './Sounds/Click-SoundEffect.mp3'\r\n\r\n\r\n// const Signup = () => {\r\n//   const [username, setName] = useState();\r\n//   const [email, setEmail] = useState();\r\n//   const [confirmpassword, setConfirmpassword] = useState();\r\n//   const [password, setPassword] = useState();\r\n//   const [show, setShow] = useState(false);\r\n//   const [showconfirm, setShowconfirm] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const toast = useToast();\r\n\r\n//   const ding=(e)=>{\r\n//     const sound=new Audio(clicksound);\r\n//    sound.play();\r\n//   }\r\n  \r\n\r\n//   const submitHandler = async () => {\r\n//     setLoading(true);\r\n//     if (!username || !email || !password || !confirmpassword) {\r\n//       toast({\r\n//         title: \"Please fill all the required fields\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: \"true\",\r\n//         position: \"bottom\",\r\n//       });\r\n\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     if (password !== confirmpassword) {\r\n//       toast({\r\n//         title: \"Passwords Doesn't match\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//       return;\r\n//     }\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           \"Content-type\": \"application/json\",\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.post(\r\n//         '/roboWar',\r\n//         { username, email, password },\r\n//         config\r\n//       );\r\n\r\n//       toast({\r\n//         title: \"Registration successful\",\r\n//         duration: 5000,\r\n//         status: \"success\",\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n    \r\n\r\n//       localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n//       setLoading(false);\r\n//     } \r\n//       catch (error) {\r\n//       toast({\r\n//         title: \"Error Occured!\",\r\n//         description: error.response.data.message,\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//     <Container>\r\n//         <Flex color='yellow'>\r\n//         <Box w='5750px'>\r\n   \r\n    \r\n//     <VStack spacing=\"5px\" color=\"white\">\r\n//       <FormControl id=\"first-name\" isRequired>\r\n//         <FormLabel>Username</FormLabel>\r\n//         <Input\r\n//         onClick={ding}\r\n//           placeholder=\"Enter your name\"\r\n//           bg={username ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setName(event.target.value);\r\n//           }}\r\n//           value={username}\r\n//         />\r\n//       </FormControl>\r\n\r\n//       <FormControl id=\"email\" isRequired>\r\n//         <FormLabel>Email</FormLabel>\r\n//         <Input\r\n//         onClick={ding}\r\n//           placeholder=\"Enter your email\"\r\n//           bg={email ? \"gray.50\" : \"white\"}\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setEmail(event.target.value);\r\n//           }}\r\n//           value={email}\r\n//         />\r\n//       </FormControl>\r\n\r\n//       <FormControl id=\"password\" isRequired>\r\n//         <FormLabel>Password</FormLabel>\r\n//            <Input\r\n//            onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={password ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setPassword(event.target.value);\r\n//           }}\r\n//           value={password}\r\n//         />\r\n//          </FormControl>\r\n         \r\n\r\n//       <FormControl id=\"confirm-password\" isRequired>\r\n//         <FormLabel>Confirm Password</FormLabel>\r\n//         <InputGroup>\r\n//           <Input\r\n//           onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setConfirmpassword(event.target.value);\r\n//           }}\r\n//           value={confirmpassword}\r\n//         />\r\n//         </InputGroup>\r\n//       </FormControl>\r\n\r\n//      <Button\r\n//         colorScheme=\"teal\"\r\n//         size='lg'\r\n//         margin={'5'}\r\n//         color='white'\r\n//         fontWeight='bold'\r\n//         borderRadius='md'\r\n//         bgGradient='linear(to-r, teal.500, green.500)'\r\n//         _hover={{\r\n//         bgGradient: 'linear(to-r, red.500, yellow.500)',\r\n//         }}\r\n//         style={{ marginTop: 15 }}\r\n//         onClick={submitHandler}\r\n//         isLoading={loading}\r\n//       >\r\n//         Sign Up\r\n//       </Button>\r\n//     </VStack>\r\n\r\n//     </Box>\r\n//       </Flex>\r\n//       </Container>\r\n\r\n//       </>\r\n//   );\r\n// };\r\n\r\n// export default Signup;\r\n\r\n\r\n\r\nconst Signup = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const ding = () => {\r\n    const sound = new Audio(clicksound);\r\n    sound.play();\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n\r\n    if (!username || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please fill all the required fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords don't match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('/roboWar', {\r\n        username,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      toast({\r\n        title: \"Registration successful\",\r\n        duration: 5000,\r\n        status: \"success\",\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(response.data));\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Flex color=\"white\" align=\"center\">\r\n          <Box w=\"5750px\">\r\n            <VStack spacing=\"5px\" color=\"white\">\r\n              {/* ... Your form controls */}\r\n              <Button\r\n                colorScheme=\"teal\"\r\n                size=\"lg\"\r\n                margin=\"5\"\r\n                color=\"white\"\r\n                fontWeight=\"bold\"\r\n                borderRadius=\"md\"\r\n                bgGradient=\"linear(to-r, teal.500, green.500)\"\r\n                _hover={{\r\n                  bgGradient: \"linear(to-r, red.500, yellow.500)\",\r\n                }}\r\n                style={{ marginTop: 15 }}\r\n                onClick={() => {\r\n                  ding(); // Play sound effect\r\n                  submitHandler(); // Handle form submission\r\n                }}\r\n                isLoading={loading}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n            </VStack>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}