{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\n// // // // // // CanvasDrawing.js\n\n// // // // // import React, { useRef, useEffect } from 'react';\n// // // // // import './Components.css'; // Import your component-specific CSS file\n\n// // // // // import spriteImage from './img/background.png';\n\n// // // // // function CanvasDrawing() {\n// // // // //   // Create a ref for the canvas element\n// // // // //   const canvasRef = useRef(null);\n\n// // // // //   useEffect(() => {\n// // // // //     // const canvas = canvasRef.current;\n// // // // //     // const ctx = canvas.getContext('2d');\n\n// // // // //     const canvas = document.querySelector('canvas');\n// // // // //     const ctx = canvas.getContext('2d')\n// // // // //     // Set canvas dimensions\n// // // // //     canvas.width = 1024;\n// // // // //     canvas.height = 576;\n\n// // // // //     // Drawing code here\n// // // // //     // ctx.fillStyle = 'blue';\n// // // // //     ctx.fillRect(0, 0, canvas.width, canvas.height);\n// // // // //     const gravity = 0.7\n\n// // // // //     const Components = () => {\n// // // // //       return (\n// // // // //         <div className=\"SpriteImage\">\n// // // // //           {/* Your component content */}\n// // // // //         </div>\n// // // // //       );\n// // // // //     };\n// // // // //     // Cleanup (optional)\n// // // // //     return () => {\n// // // // //       // You can perform cleanup here if needed\n// // // // //     };\n// // // // //   }, []); // Empty dependency array to run only once\n\n// // // // //   return (\n// // // // //     <div>\n// // // // //       <canvas ref={canvasRef}></canvas>\n// // // // //     </div>\n// // // // //   );\n// // // // // }\n\n// // // // // export default CanvasDrawing;\n\n// // // // import React, { useRef, useEffect, useState } from 'react';\n// // // // import './Components.css'; // Import your component-specific CSS file\n\n// // // // import spriteImage from './img/background.png';\n\n// // // // const initialPlayerState = {\n// // // //   position: {\n// // // //     x: 0,\n// // // //     y: 0\n// // // //   },\n// // // //   velocity: {\n// // // //     x: 0,\n// // // //     y: 0\n// // // //   },\n// // // //   offset: {\n// // // //     x: 0,\n// // // //     y: 0\n// // // //   },\n// // // //   imageSrc: './img/samuraiMack/Idle.png',\n// // // //   framesMax: 8,\n// // // //   scale: 2.5,\n// // // //   offset: {\n// // // //     x: 215,\n// // // //     y: 157\n// // // //   },\n// // // //   sprites: {\n// // // //     idle: {\n// // // //       imageSrc: './img/samuraiMack/Idle.png',\n// // // //       framesMax: 8\n// // // //     },\n// // // //     // ... Add other sprite definitions here\n// // // //   },\n// // // //   attackBox: {\n// // // //     offset: {\n// // // //       x: 100,\n// // // //       y: 50\n// // // //     },\n// // // //     width: 160,\n// // // //     height: 50\n// // // //   }\n// // // // };\n// // // // const initialEnemyState = {\n// // // //   position: {\n// // // //     x: 400,\n// // // //     y: 100\n// // // //   },\n// // // //   velocity: {\n// // // //     x: 0,\n// // // //     y: 0\n// // // //   },\n// // // //   color: 'blue',\n// // // //   offset: {\n// // // //     x: -50,\n// // // //     y: 0\n// // // //   },\n// // // //   imageSrc: './img/kenji/Idle.png',\n// // // //   framesMax: 4,\n// // // //   scale: 2.5,\n// // // //   offset: {\n// // // //     x: 215,\n// // // //     y: 167\n// // // //   },\n// // // //   sprites: {\n// // // //     idle: {\n// // // //       imageSrc: './img/kenji/Idle.png',\n// // // //       framesMax: 4\n// // // //     },\n// // // //     // ... Add other sprite definitions here\n// // // //   },\n// // // //   attackBox: {\n// // // //     offset: {\n// // // //       x: -170,\n// // // //       y: 50\n// // // //     },\n// // // //     width: 170,\n// // // //     height: 50\n// // // //   }\n// // // // };\n// // // // function CanvasDrawing() {\n// // // //   // Create a ref for the canvas element\n// // // //   const canvasRef = useRef(null);\n// // // //   const [player, setPlayer] = useState(initialPlayerState);\n// // // //   const [enemy, setEnemy] = useState(initialEnemyState);\n// // // //   const [keys, setKeys] = useState({\n// // // //     a: {\n// // // //       pressed: false\n// // // //     },\n// // // //     d: {\n// // // //       pressed: false\n// // // //     },\n// // // //     ArrowRight: {\n// // // //       pressed: false\n// // // //     },\n// // // //     ArrowLeft: {\n// // // //       pressed: false\n// // // //     }\n// // // //   });\n// // // //   useEffect(() => {\n// // // //     const canvas = canvasRef.current;\n// // // //     const ctx = canvas.getContext('2d');\n// // // //     const gravity = 0.7;\n\n// // // //     // Set canvas dimensions\n// // // //     canvas.width = 1024;\n// // // //     canvas.height = 576;\n\n// // // //     // Use the spriteImage as the background\n// // // //     const backgroundImage = new Image();\n// // // //     backgroundImage.src = spriteImage;\n\n// // // //     // Once the image is loaded, draw it on the canvas\n// // // //     backgroundImage.onload = () => {\n// // // //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n// // // //     // Other drawing code here\n// // // //     // ctx.fillStyle = 'blue';\n// // // //     // ctx.fillRect(0, 0, canvas.width, canvas.height);\n// // // // // Draw the sprite image\n// // // // const playerImage = new Image();\n// // // // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\n// // // // playerImage.onload = () => {\n// // // //   // Draw the player image at the desired position (player.position.x, player.position.y)\n// // // //   ctx.drawImage(playerImage, player.position.x, player.position.y);\n// // // // };\n// // // // };\n// // // //     const handleKeyDown = (event) => {\n// // // //       // Update the keys state based on the pressed key\n// // // //       setKeys((prevKeys) => ({\n// // // //         ...prevKeys,\n// // // //         [event.key]: {\n// // // //           pressed: true\n// // // //         }\n// // // //       }));\n// // // //     };\n\n// // // //     const handleKeyUp = (event) => {\n// // // //       // Update the keys state when a key is released\n// // // //       setKeys((prevKeys) => ({\n// // // //         ...prevKeys,\n// // // //         [event.key]: {\n// // // //           pressed: false\n// // // //         }\n// // // //       }));\n// // // //     };\n\n// // // //     window.addEventListener('keydown', handleKeyDown);\n// // // //     window.addEventListener('keyup', handleKeyUp);\n\n// // // //     // Cleanup (optional)\n// // // //     return () => {\n// // // //       // You can perform cleanup here if needed\n// // // //     };\n// // // //   }, []); // Empty dependency array to run only once\n\n// // // //   return (\n// // // //     <div>\n// // // //       <canvas ref={canvasRef}></canvas>\n// // // //     </div>\n// // // //   );\n// // // // }\n\n// // // // export default CanvasDrawing;\n\n// // // import React, { useRef, useEffect, useState } from 'react';\n// // // import './Components.css'; // Import your component-specific CSS file\n\n// // // import spriteImage from './Images/background.png';\n// // // import kenjiIdle from './Images/kenji/Idle.png';\n// // // import samuraiIdle from './Images/samuraiMack/Idle.png';\n\n// // // const initialPlayerState = {\n// // //   position: {\n// // //     x: 0,\n// // //     y: 0\n// // //   },\n// // //   velocity: {\n// // //     x: 0,\n// // //     y: 0\n// // //   },\n// // //   offset: {\n// // //     x: 0,\n// // //     y: 0\n// // //   },\n// // //   // imageSrc: './img/samuraiMack/Idle.png',\n// // //   imageSrc: samuraiIdle,\n// // //   framesMax: 8,\n// // //   scale: 2.5,\n// // //   offset: {\n// // //     x: 215,\n// // //     y: 157\n// // //   },\n// // //   sprites: {\n// // //     idle: {\n// // //       // imageSrc: './img/samuraiMack/Idle.png',\n// // //       imageSrc: samuraiIdle,\n// // //       framesMax: 8\n// // //     },\n// // //     // ... Add other sprite definitions here\n// // //   },\n// // //   attackBox: {\n// // //     offset: {\n// // //       x: 100,\n// // //       y: 50\n// // //     },\n// // //     width: 160,\n// // //     height: 50\n// // //   }\n// // // };\n// // // const initialEnemyState = {\n// // //   position: {\n// // //     x: 400,\n// // //     y: 100\n// // //   },\n// // //   velocity: {\n// // //     x: 0,\n// // //     y: 0\n// // //   },\n// // //   color: 'blue',\n// // //   offset: {\n// // //     x: -50,\n// // //     y: 0\n// // //   },\n// // //   // imageSrc: './img/kenji/Idle.png',\n// // //   imageSrc: kenjiIdle,\n// // //   framesMax: 4,\n// // //   scale: 2.5,\n// // //   offset: {\n// // //     x: 215,\n// // //     y: 167\n// // //   },\n// // //   sprites: {\n// // //     idle: {\n// // //       // imageSrc: './img/kenji/Idle.png',\n// // //       imageSrc: kenjiIdle,\n// // //       framesMax: 4\n// // //     },\n// // //     // ... Add other sprite definitions here\n// // //   },\n// // //   attackBox: {\n// // //     offset: {\n// // //       x: -170,\n// // //       y: 50\n// // //     },\n// // //     width: 170,\n// // //     height: 50\n// // //   }\n// // // };\n// // // function CanvasDrawing() {\n// // //   // Create a ref for the canvas element\n// // //   const canvasRef = useRef(null);\n// // //   const [player, setPlayer] = useState(initialPlayerState);\n// // //   const [enemy, setEnemy] = useState(initialEnemyState);\n// // //   const [keys, setKeys] = useState({\n// // //     a: {\n// // //       pressed: false\n// // //     },\n// // //     d: {\n// // //       pressed: false\n// // //     },\n// // //     ArrowRight: {\n// // //       pressed: false\n// // //     },\n// // //     ArrowLeft: {\n// // //       pressed: false\n// // //     }\n// // //   });\n// // //   useEffect(() => {\n// // //     const canvas = canvasRef.current;\n// // //     const ctx = canvas.getContext('2d');\n// // //     const gravity = 0.7;\n\n// // //     // Set canvas dimensions\n// // //     canvas.width = 1024;\n// // //     canvas.height = 576;\n\n// // //     // Use the spriteImage as the background\n// // //     const backgroundImage = new Image();\n// // //     backgroundImage.src = spriteImage;\n\n// // //     // Once the image is loaded, draw it on the canvas\n// // //     backgroundImage.onload = () => {\n// // //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n// // //     // Other drawing code here\n// // //     // ctx.fillStyle = 'blue';\n// // //     // ctx.fillRect(0, 0, canvas.width, canvas.height);\n// // // // Draw the sprite image\n// // // const playerImage = new Image();\n// // // // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\n// // // playerImage.src = kenjiIdle; \n// // // playerImage.onload = () => {\n// // //   // Draw the player image at the desired position (player.position.x, player.position.y)\n// // //   ctx.drawImage(playerImage, player.position.x, player.position.y);\n// // // };\n// // // };\n// // //     const handleKeyDown = (event) => {\n// // //       // Update the keys state based on the pressed key\n// // //       setKeys((prevKeys) => ({\n// // //         ...prevKeys,\n// // //         [event.key]: {\n// // //           pressed: true\n// // //         }\n// // //       }));\n// // //     };\n\n// // //     const handleKeyUp = (event) => {\n// // //       // Update the keys state when a key is released\n// // //       setKeys((prevKeys) => ({\n// // //         ...prevKeys,\n// // //         [event.key]: {\n// // //           pressed: false\n// // //         }\n// // //       }));\n// // //     };\n\n// // //     window.addEventListener('keydown', handleKeyDown);\n// // //     window.addEventListener('keyup', handleKeyUp);\n\n// // //     // Cleanup (optional)\n// // //     return () => {\n// // //       // You can perform cleanup here if needed\n// // //     };\n// // //   }, []); // Empty dependency array to run only once\n\n// // //   return (\n// // //     <div>\n// // //       <canvas ref={canvasRef}></canvas>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default CanvasDrawing;\n\n// // import React, { useRef, useEffect, useState } from 'react';\n// // import './Components.css';\n\n// // import spriteImage from './Images/background.png'; // Load the single sprite sheet\n// // import { AnimationFrame } from './animationFrame.js'; // You might need a utility for handling animations\n// // import kenjiImage from './Idle.png'; // Load the single sprite sheet\n\n// // const initialPlayerState = {\n// //   position: {\n// //     x: 0,\n// //     y: 0\n// //   },\n// //   velocity: {\n// //     x: 10,\n// //     y: 0\n// //   },\n// //   scale: 2.5,\n// // };\n\n// // // Define frame dimensions and animation parameters\n// // const kenjiFrameWidth = 64; // Width of a single frame in pixels\n// // const kenjiFrameHeight = 64; // Height of a single frame in pixels\n// // const kenjiTotalFrames = 8; // Total number of frames in Kenji's animation\n// // const kenjiAnimationSpeed = 10; // Speed of Kenji's animation (frames per second)\n\n// // const samuraiFrameWidth = 64; // Width of a single frame in pixels\n// // const samuraiFrameHeight = 64; // Height of a single frame in pixels\n// // const samuraiTotalFrames = 8; // Total number of frames in Samurai's animation\n// // const samuraiAnimationSpeed = 10; // Speed of Samurai's animation (frames per second)\n\n// // function CanvasDrawing() {\n// //   const canvasRef = useRef(null);\n// //   const [player, setPlayer] = useState(initialPlayerState);\n// //   const [currentFrame, setCurrentFrame] = useState(0);\n\n// //   useEffect(() => {\n// //     const canvas = canvasRef.current;\n// //     const ctx = canvas.getContext('2d');\n// //     const gravity = 0.7;\n\n// //     // Set canvas dimensions\n// //     canvas.width = 1024;\n// //     canvas.height = 576;\n\n// //     // Use the spriteImage as the background\n// //     const backgroundImage = new Image();\n// //     backgroundImage.src = spriteImage;\n// //     // const canvas = document.getElementById('myCanvas');\n// //     // const ctx = canvas.getContext('2d');\n// //     // const kenjiImage = new Image();\n// //     // kenjiImage.src = './Idle.png';\n\n// //     // Create an animation frame object for each character\n// //     const kenjiAnimationFrame = new AnimationFrame({\n// //       image: kenjiImage,\n// //       frameWidth: kenjiFrameWidth,\n// //       frameHeight: kenjiFrameHeight,\n// //       totalFrames: kenjiTotalFrames,\n// //       animationSpeed: kenjiAnimationSpeed,\n\n// //     });\n// //     kenjiImage.onload = function() {\n// //       ctx.drawImage(kenjiImage, 0,0); // Replace x and y with the coordinates where you want to draw the image.\n// //     };\n\n// //     const samuraiAnimationFrame = new AnimationFrame({\n// //       image: backgroundImage,\n// //       frameWidth: samuraiFrameWidth,\n// //       frameHeight: samuraiFrameHeight,\n// //       totalFrames: samuraiTotalFrames,\n// //       animationSpeed: samuraiAnimationSpeed,\n// //     });\n\n// //     // Define key state for controlling characters\n// //     const keys = {\n// //       ArrowLeft: false,\n// //       ArrowRight: false,\n// //       Space: false,\n// //     };\n\n// //     // Handle keydown event\n// //     const handleKeyDown = (event) => {\n// //       if (event.key === 'ArrowLeft') {\n// //         keys.ArrowLeft = true;\n// //       } else if (event.key === 'ArrowRight') {\n// //         keys.ArrowRight = true;\n// //       } else if (event.key === 'Space') {\n// //         keys.Space = true;\n// //       }\n// //     };\n\n// //     // Handle keyup event\n// //     const handleKeyUp = (event) => {\n// //       if (event.key === 'ArrowLeft') {\n// //         keys.ArrowLeft = false;\n// //       } else if (event.key === 'ArrowRight') {\n// //         keys.ArrowRight = false;\n// //       } else if (event.key === 'Space') {\n// //         keys.Space = false;\n// //       }\n// //     };\n\n// //     // Add event listeners for keydown and keyup\n// //     window.addEventListener('keydown', handleKeyDown);\n// //     window.addEventListener('keyup', handleKeyUp);\n\n// //     // Start the animation loop\n// //     const animate = () => {\n// //       ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n// //       // Draw the background image\n// //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n// //       // Update the player's position based on keyboard input\n// //       if (keys.ArrowLeft) {\n// //         player.position.x -= player.velocity.x;\n// //       } else if (keys.ArrowRight) {\n// //         player.position.x += player.velocity.x;\n// //       }\n\n// //       // Draw Kenji character\n// //       kenjiAnimationFrame.draw(ctx, player.position.x, player.position.y);\n\n// //       // Draw Samurai character\n// //       samuraiAnimationFrame.draw(ctx, player.position.x + 200, player.position.y);\n\n// //       // Update the current frame for each character's animation\n// //       setCurrentFrame((prevFrame) => prevFrame + 1);\n\n// //       requestAnimationFrame(animate);\n// //     };\n\n// //     animate();\n\n// //     // Cleanup (optional)\n// //     return () => {\n// //       // Remove event listeners or do other cleanup if needed\n// //       window.removeEventListener('keydown', handleKeyDown);\n// //       window.removeEventListener('keyup', handleKeyUp);\n// //     };\n// //   }, []); // Empty dependency array to run only once\n\n// //   return (\n// //     <div>\n// //       <canvas ref={canvasRef}></canvas>\n// //     </div>\n// //   );\n// // }\n\n// // export default CanvasDrawing;\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import './Components.css';\n\n// import spriteImage from './Images/background.png'; // Load the single sprite sheet\n// import { AnimationFrame } from './animationFrame.js'; // You might need a utility for handling animations\n// import kenjiImage from './Idle1.png'; // Load the single sprite sheet\n\n// // ...\n\n// function CanvasDrawing() {\n//   // ...\n\n//   useEffect(() => {\n//     // ...\n\n//     // Use the kenjiImage as the character sprite\n//     const image = new Image();\n//     image.src = kenjiImage;\n\n//     // image.onload = function() {\n//       // Now, 'image' is an Image object, and you can use it safely.\n//       // ...\n//       ctx.drawImage(image, 0,0);\n//     };\n\n//     // ...\n//   }, []); // Empty dependency array to run only once\n\n//   // ...\n// }\n\n// export default CanvasDrawing;\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport './Components.css';\nimport spriteImage from './Images/background.png'; // Load the single sprite sheet\nimport { AnimationFrame } from './AnimationFrame.js'; // You might need a utility for handling animations\nimport kenjiImage from './Idle3 .png'; // Load the single sprite sheet\nimport samuraiImage from './fighter1.png'; // Load the single sprite sheet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPlayerState = {\n  position: {\n    x: 200,\n    y: 400\n  },\n  velocity: {\n    x: 10,\n    y: 0\n  },\n  scale: 2.5\n};\n// Define frame dimensions and animation parameters\nconst kenjiFrameWidth = 284; // Width of a single frame in pixels\nconst kenjiFrameHeight = 100; // Height of a single frame in pixels\nconst kenjiTotalFrames = 1; // Total number of frames in Kenji's animation\nconst kenjiAnimationSpeed = 10; // Speed of Kenji's animation (frames per second)\n\nconst samuraiFrameWidth = 184; // Width of a single frame in pixels\nconst samuraiFrameHeight = 100; // Height of a single frame in pixels\nconst samuraiTotalFrames = 1; // Total number of frames in Samurai's animation\nconst samuraiAnimationSpeed = 10; // Speed of Samurai's animation (frames per second)\n\nfunction CanvasDrawing() {\n  _s();\n  const canvasRef = useRef(null);\n  const [player, setPlayer] = useState(initialPlayerState);\n  const [currentFrame, setCurrentFrame] = useState(0);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const gravity = 0.7;\n\n    // Set canvas dimensions\n    canvas.width = 1024;\n    canvas.height = 576;\n\n    // Use the spriteImage as the background\n    const backgroundImage = new Image();\n    backgroundImage.src = spriteImage;\n\n    // Use kenjiImage as the character sprite\n    const image = new Image();\n    image.src = kenjiImage;\n    image.onload = function () {\n      // The 'image' is now fully loaded and can be safely used in your drawing logic.\n      // For example, you can draw it here.\n      ctx.drawImage(image, 50, 50); // Replace x and y with the coordinates where you want to draw the image.\n    };\n    // Use samuraiImage as the character sprite\n    const fighter = new Image();\n    fighter.src = samuraiImage;\n    fighter.onload = function () {\n      // The 'image' is now fully loaded and can be safely used in your drawing logic.\n      // For example, you can draw it here.\n      ctx.drawImage(fighter, 50, 50); // Replace x and y with the coordinates where you want to draw the image.\n    };\n\n    // Create an animation frame object for each character\n    const kenjiAnimationFrame = new AnimationFrame({\n      image: image,\n      frameWidth: kenjiFrameWidth,\n      frameHeight: kenjiFrameHeight,\n      totalFrames: kenjiTotalFrames,\n      animationSpeed: kenjiAnimationSpeed\n    });\n    const samuraiAnimationFrame = new AnimationFrame({\n      image: fighter,\n      frameWidth: samuraiFrameWidth,\n      frameHeight: samuraiFrameHeight,\n      totalFrames: samuraiTotalFrames,\n      animationSpeed: samuraiAnimationSpeed\n    });\n\n    // Define key state for controlling characters\n    const keys = {\n      ArrowLeft: false,\n      ArrowRight: false,\n      Space: false\n    };\n\n    // Handle keydown event\n    const handleKeyDown = event => {\n      if (event.key === 'ArrowLeft') {\n        keys.ArrowLeft = true;\n      } else if (event.key === 'ArrowRight') {\n        keys.ArrowRight = true;\n      } else if (event.key === 'Space') {\n        keys.Space = true;\n      }\n    };\n\n    // Handle keyup event\n    const handleKeyUp = event => {\n      if (event.key === 'ArrowLeft') {\n        keys.ArrowLeft = false;\n      } else if (event.key === 'ArrowRight') {\n        keys.ArrowRight = false;\n      } else if (event.key === 'Space') {\n        keys.Space = false;\n      }\n    };\n\n    // Add event listeners for keydown and keyup\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    // Start the animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw the background image\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n\n      // Update the player's position based on keyboard input\n      if (keys.ArrowLeft) {\n        player.position.x -= player.velocity.x;\n      } else if (keys.ArrowRight) {\n        player.position.x += player.velocity.x;\n      }\n\n      // Draw Kenji character\n      kenjiAnimationFrame.draw(ctx, player.position.x, player.position.y);\n\n      // Draw Samurai character\n      samuraiAnimationFrame.draw(ctx, player.position.x + 400, player.position.y);\n\n      // Update the current frame for each character's animation\n      setCurrentFrame(prevFrame => prevFrame + 1);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Cleanup (optional)\n    return () => {\n      // Remove event listeners or do other cleanup if needed\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []); // Empty dependency array to run only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 742,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasDrawing, \"OaE9ZtnT96uiCQAWtN9X/n7tD0w=\");\n_c = CanvasDrawing;\nexport default CanvasDrawing;\nvar _c;\n$RefreshReg$(_c, \"CanvasDrawing\");","map":{"version":3,"names":["React","useRef","useEffect","useState","spriteImage","AnimationFrame","kenjiImage","samuraiImage","jsxDEV","_jsxDEV","initialPlayerState","position","x","y","velocity","scale","kenjiFrameWidth","kenjiFrameHeight","kenjiTotalFrames","kenjiAnimationSpeed","samuraiFrameWidth","samuraiFrameHeight","samuraiTotalFrames","samuraiAnimationSpeed","CanvasDrawing","_s","canvasRef","player","setPlayer","currentFrame","setCurrentFrame","canvas","current","ctx","getContext","gravity","width","height","backgroundImage","Image","src","image","onload","drawImage","fighter","kenjiAnimationFrame","frameWidth","frameHeight","totalFrames","animationSpeed","samuraiAnimationFrame","keys","ArrowLeft","ArrowRight","Space","handleKeyDown","event","key","handleKeyUp","window","addEventListener","animate","clearRect","draw","prevFrame","requestAnimationFrame","removeEventListener","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/CanvasDrawing.js"],"sourcesContent":["// // // // // // CanvasDrawing.js\r\n\r\n// // // // // import React, { useRef, useEffect } from 'react';\r\n// // // // // import './Components.css'; // Import your component-specific CSS file\r\n\r\n// // // // // import spriteImage from './img/background.png';\r\n\r\n// // // // // function CanvasDrawing() {\r\n// // // // //   // Create a ref for the canvas element\r\n// // // // //   const canvasRef = useRef(null);\r\n\r\n// // // // //   useEffect(() => {\r\n// // // // //     // const canvas = canvasRef.current;\r\n// // // // //     // const ctx = canvas.getContext('2d');\r\n\r\n// // // // //     const canvas = document.querySelector('canvas');\r\n// // // // //     const ctx = canvas.getContext('2d')\r\n// // // // //     // Set canvas dimensions\r\n// // // // //     canvas.width = 1024;\r\n// // // // //     canvas.height = 576;\r\n\r\n// // // // //     // Drawing code here\r\n// // // // //     // ctx.fillStyle = 'blue';\r\n// // // // //     ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// // // // //     const gravity = 0.7\r\n\r\n// // // // //     const Components = () => {\r\n// // // // //       return (\r\n// // // // //         <div className=\"SpriteImage\">\r\n// // // // //           {/* Your component content */}\r\n// // // // //         </div>\r\n// // // // //       );\r\n// // // // //     };\r\n// // // // //     // Cleanup (optional)\r\n// // // // //     return () => {\r\n// // // // //       // You can perform cleanup here if needed\r\n// // // // //     };\r\n// // // // //   }, []); // Empty dependency array to run only once\r\n\r\n// // // // //   return (\r\n// // // // //     <div>\r\n// // // // //       <canvas ref={canvasRef}></canvas>\r\n// // // // //     </div>\r\n// // // // //   );\r\n// // // // // }\r\n\r\n// // // // // export default CanvasDrawing;\r\n\r\n\r\n// // // // import React, { useRef, useEffect, useState } from 'react';\r\n// // // // import './Components.css'; // Import your component-specific CSS file\r\n\r\n// // // // import spriteImage from './img/background.png';\r\n\r\n\r\n// // // // const initialPlayerState = {\r\n// // // //   position: {\r\n// // // //     x: 0,\r\n// // // //     y: 0\r\n// // // //   },\r\n// // // //   velocity: {\r\n// // // //     x: 0,\r\n// // // //     y: 0\r\n// // // //   },\r\n// // // //   offset: {\r\n// // // //     x: 0,\r\n// // // //     y: 0\r\n// // // //   },\r\n// // // //   imageSrc: './img/samuraiMack/Idle.png',\r\n// // // //   framesMax: 8,\r\n// // // //   scale: 2.5,\r\n// // // //   offset: {\r\n// // // //     x: 215,\r\n// // // //     y: 157\r\n// // // //   },\r\n// // // //   sprites: {\r\n// // // //     idle: {\r\n// // // //       imageSrc: './img/samuraiMack/Idle.png',\r\n// // // //       framesMax: 8\r\n// // // //     },\r\n// // // //     // ... Add other sprite definitions here\r\n// // // //   },\r\n// // // //   attackBox: {\r\n// // // //     offset: {\r\n// // // //       x: 100,\r\n// // // //       y: 50\r\n// // // //     },\r\n// // // //     width: 160,\r\n// // // //     height: 50\r\n// // // //   }\r\n// // // // };\r\n// // // // const initialEnemyState = {\r\n// // // //   position: {\r\n// // // //     x: 400,\r\n// // // //     y: 100\r\n// // // //   },\r\n// // // //   velocity: {\r\n// // // //     x: 0,\r\n// // // //     y: 0\r\n// // // //   },\r\n// // // //   color: 'blue',\r\n// // // //   offset: {\r\n// // // //     x: -50,\r\n// // // //     y: 0\r\n// // // //   },\r\n// // // //   imageSrc: './img/kenji/Idle.png',\r\n// // // //   framesMax: 4,\r\n// // // //   scale: 2.5,\r\n// // // //   offset: {\r\n// // // //     x: 215,\r\n// // // //     y: 167\r\n// // // //   },\r\n// // // //   sprites: {\r\n// // // //     idle: {\r\n// // // //       imageSrc: './img/kenji/Idle.png',\r\n// // // //       framesMax: 4\r\n// // // //     },\r\n// // // //     // ... Add other sprite definitions here\r\n// // // //   },\r\n// // // //   attackBox: {\r\n// // // //     offset: {\r\n// // // //       x: -170,\r\n// // // //       y: 50\r\n// // // //     },\r\n// // // //     width: 170,\r\n// // // //     height: 50\r\n// // // //   }\r\n// // // // };\r\n// // // // function CanvasDrawing() {\r\n// // // //   // Create a ref for the canvas element\r\n// // // //   const canvasRef = useRef(null);\r\n// // // //   const [player, setPlayer] = useState(initialPlayerState);\r\n// // // //   const [enemy, setEnemy] = useState(initialEnemyState);\r\n// // // //   const [keys, setKeys] = useState({\r\n// // // //     a: {\r\n// // // //       pressed: false\r\n// // // //     },\r\n// // // //     d: {\r\n// // // //       pressed: false\r\n// // // //     },\r\n// // // //     ArrowRight: {\r\n// // // //       pressed: false\r\n// // // //     },\r\n// // // //     ArrowLeft: {\r\n// // // //       pressed: false\r\n// // // //     }\r\n// // // //   });\r\n// // // //   useEffect(() => {\r\n// // // //     const canvas = canvasRef.current;\r\n// // // //     const ctx = canvas.getContext('2d');\r\n// // // //     const gravity = 0.7;\r\n\r\n// // // //     // Set canvas dimensions\r\n// // // //     canvas.width = 1024;\r\n// // // //     canvas.height = 576;\r\n\r\n// // // //     // Use the spriteImage as the background\r\n// // // //     const backgroundImage = new Image();\r\n// // // //     backgroundImage.src = spriteImage;\r\n    \r\n// // // //     // Once the image is loaded, draw it on the canvas\r\n// // // //     backgroundImage.onload = () => {\r\n// // // //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n    \r\n\r\n// // // //     // Other drawing code here\r\n// // // //     // ctx.fillStyle = 'blue';\r\n// // // //     // ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// // // // // Draw the sprite image\r\n// // // // const playerImage = new Image();\r\n// // // // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\r\n// // // // playerImage.onload = () => {\r\n// // // //   // Draw the player image at the desired position (player.position.x, player.position.y)\r\n// // // //   ctx.drawImage(playerImage, player.position.x, player.position.y);\r\n// // // // };\r\n// // // // };\r\n// // // //     const handleKeyDown = (event) => {\r\n// // // //       // Update the keys state based on the pressed key\r\n// // // //       setKeys((prevKeys) => ({\r\n// // // //         ...prevKeys,\r\n// // // //         [event.key]: {\r\n// // // //           pressed: true\r\n// // // //         }\r\n// // // //       }));\r\n// // // //     };\r\n\r\n// // // //     const handleKeyUp = (event) => {\r\n// // // //       // Update the keys state when a key is released\r\n// // // //       setKeys((prevKeys) => ({\r\n// // // //         ...prevKeys,\r\n// // // //         [event.key]: {\r\n// // // //           pressed: false\r\n// // // //         }\r\n// // // //       }));\r\n// // // //     };\r\n\r\n// // // //     window.addEventListener('keydown', handleKeyDown);\r\n// // // //     window.addEventListener('keyup', handleKeyUp);\r\n    \r\n// // // //     // Cleanup (optional)\r\n// // // //     return () => {\r\n// // // //       // You can perform cleanup here if needed\r\n// // // //     };\r\n// // // //   }, []); // Empty dependency array to run only once\r\n\r\n// // // //   return (\r\n// // // //     <div>\r\n// // // //       <canvas ref={canvasRef}></canvas>\r\n// // // //     </div>\r\n// // // //   );\r\n// // // // }\r\n\r\n// // // // export default CanvasDrawing;\r\n\r\n\r\n\r\n\r\n// // // import React, { useRef, useEffect, useState } from 'react';\r\n// // // import './Components.css'; // Import your component-specific CSS file\r\n\r\n// // // import spriteImage from './Images/background.png';\r\n// // // import kenjiIdle from './Images/kenji/Idle.png';\r\n// // // import samuraiIdle from './Images/samuraiMack/Idle.png';\r\n\r\n// // // const initialPlayerState = {\r\n// // //   position: {\r\n// // //     x: 0,\r\n// // //     y: 0\r\n// // //   },\r\n// // //   velocity: {\r\n// // //     x: 0,\r\n// // //     y: 0\r\n// // //   },\r\n// // //   offset: {\r\n// // //     x: 0,\r\n// // //     y: 0\r\n// // //   },\r\n// // //   // imageSrc: './img/samuraiMack/Idle.png',\r\n// // //   imageSrc: samuraiIdle,\r\n// // //   framesMax: 8,\r\n// // //   scale: 2.5,\r\n// // //   offset: {\r\n// // //     x: 215,\r\n// // //     y: 157\r\n// // //   },\r\n// // //   sprites: {\r\n// // //     idle: {\r\n// // //       // imageSrc: './img/samuraiMack/Idle.png',\r\n// // //       imageSrc: samuraiIdle,\r\n// // //       framesMax: 8\r\n// // //     },\r\n// // //     // ... Add other sprite definitions here\r\n// // //   },\r\n// // //   attackBox: {\r\n// // //     offset: {\r\n// // //       x: 100,\r\n// // //       y: 50\r\n// // //     },\r\n// // //     width: 160,\r\n// // //     height: 50\r\n// // //   }\r\n// // // };\r\n// // // const initialEnemyState = {\r\n// // //   position: {\r\n// // //     x: 400,\r\n// // //     y: 100\r\n// // //   },\r\n// // //   velocity: {\r\n// // //     x: 0,\r\n// // //     y: 0\r\n// // //   },\r\n// // //   color: 'blue',\r\n// // //   offset: {\r\n// // //     x: -50,\r\n// // //     y: 0\r\n// // //   },\r\n// // //   // imageSrc: './img/kenji/Idle.png',\r\n// // //   imageSrc: kenjiIdle,\r\n// // //   framesMax: 4,\r\n// // //   scale: 2.5,\r\n// // //   offset: {\r\n// // //     x: 215,\r\n// // //     y: 167\r\n// // //   },\r\n// // //   sprites: {\r\n// // //     idle: {\r\n// // //       // imageSrc: './img/kenji/Idle.png',\r\n// // //       imageSrc: kenjiIdle,\r\n// // //       framesMax: 4\r\n// // //     },\r\n// // //     // ... Add other sprite definitions here\r\n// // //   },\r\n// // //   attackBox: {\r\n// // //     offset: {\r\n// // //       x: -170,\r\n// // //       y: 50\r\n// // //     },\r\n// // //     width: 170,\r\n// // //     height: 50\r\n// // //   }\r\n// // // };\r\n// // // function CanvasDrawing() {\r\n// // //   // Create a ref for the canvas element\r\n// // //   const canvasRef = useRef(null);\r\n// // //   const [player, setPlayer] = useState(initialPlayerState);\r\n// // //   const [enemy, setEnemy] = useState(initialEnemyState);\r\n// // //   const [keys, setKeys] = useState({\r\n// // //     a: {\r\n// // //       pressed: false\r\n// // //     },\r\n// // //     d: {\r\n// // //       pressed: false\r\n// // //     },\r\n// // //     ArrowRight: {\r\n// // //       pressed: false\r\n// // //     },\r\n// // //     ArrowLeft: {\r\n// // //       pressed: false\r\n// // //     }\r\n// // //   });\r\n// // //   useEffect(() => {\r\n// // //     const canvas = canvasRef.current;\r\n// // //     const ctx = canvas.getContext('2d');\r\n// // //     const gravity = 0.7;\r\n\r\n// // //     // Set canvas dimensions\r\n// // //     canvas.width = 1024;\r\n// // //     canvas.height = 576;\r\n\r\n// // //     // Use the spriteImage as the background\r\n// // //     const backgroundImage = new Image();\r\n// // //     backgroundImage.src = spriteImage;\r\n    \r\n// // //     // Once the image is loaded, draw it on the canvas\r\n// // //     backgroundImage.onload = () => {\r\n// // //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n    \r\n\r\n// // //     // Other drawing code here\r\n// // //     // ctx.fillStyle = 'blue';\r\n// // //     // ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n// // // // Draw the sprite image\r\n// // // const playerImage = new Image();\r\n// // // // playerImage.src = './img/kenji/Idle.png'; // Replace with the correct source\r\n// // // playerImage.src = kenjiIdle; \r\n// // // playerImage.onload = () => {\r\n// // //   // Draw the player image at the desired position (player.position.x, player.position.y)\r\n// // //   ctx.drawImage(playerImage, player.position.x, player.position.y);\r\n// // // };\r\n// // // };\r\n// // //     const handleKeyDown = (event) => {\r\n// // //       // Update the keys state based on the pressed key\r\n// // //       setKeys((prevKeys) => ({\r\n// // //         ...prevKeys,\r\n// // //         [event.key]: {\r\n// // //           pressed: true\r\n// // //         }\r\n// // //       }));\r\n// // //     };\r\n\r\n// // //     const handleKeyUp = (event) => {\r\n// // //       // Update the keys state when a key is released\r\n// // //       setKeys((prevKeys) => ({\r\n// // //         ...prevKeys,\r\n// // //         [event.key]: {\r\n// // //           pressed: false\r\n// // //         }\r\n// // //       }));\r\n// // //     };\r\n\r\n// // //     window.addEventListener('keydown', handleKeyDown);\r\n// // //     window.addEventListener('keyup', handleKeyUp);\r\n    \r\n// // //     // Cleanup (optional)\r\n// // //     return () => {\r\n// // //       // You can perform cleanup here if needed\r\n// // //     };\r\n// // //   }, []); // Empty dependency array to run only once\r\n\r\n// // //   return (\r\n// // //     <div>\r\n// // //       <canvas ref={canvasRef}></canvas>\r\n// // //     </div>\r\n// // //   );\r\n// // // }\r\n\r\n// // // export default CanvasDrawing;\r\n\r\n\r\n\r\n\r\n// // import React, { useRef, useEffect, useState } from 'react';\r\n// // import './Components.css';\r\n\r\n// // import spriteImage from './Images/background.png'; // Load the single sprite sheet\r\n// // import { AnimationFrame } from './animationFrame.js'; // You might need a utility for handling animations\r\n// // import kenjiImage from './Idle.png'; // Load the single sprite sheet\r\n\r\n// // const initialPlayerState = {\r\n// //   position: {\r\n// //     x: 0,\r\n// //     y: 0\r\n// //   },\r\n// //   velocity: {\r\n// //     x: 10,\r\n// //     y: 0\r\n// //   },\r\n// //   scale: 2.5,\r\n// // };\r\n\r\n// // // Define frame dimensions and animation parameters\r\n// // const kenjiFrameWidth = 64; // Width of a single frame in pixels\r\n// // const kenjiFrameHeight = 64; // Height of a single frame in pixels\r\n// // const kenjiTotalFrames = 8; // Total number of frames in Kenji's animation\r\n// // const kenjiAnimationSpeed = 10; // Speed of Kenji's animation (frames per second)\r\n\r\n// // const samuraiFrameWidth = 64; // Width of a single frame in pixels\r\n// // const samuraiFrameHeight = 64; // Height of a single frame in pixels\r\n// // const samuraiTotalFrames = 8; // Total number of frames in Samurai's animation\r\n// // const samuraiAnimationSpeed = 10; // Speed of Samurai's animation (frames per second)\r\n\r\n// // function CanvasDrawing() {\r\n// //   const canvasRef = useRef(null);\r\n// //   const [player, setPlayer] = useState(initialPlayerState);\r\n// //   const [currentFrame, setCurrentFrame] = useState(0);\r\n\r\n// //   useEffect(() => {\r\n// //     const canvas = canvasRef.current;\r\n// //     const ctx = canvas.getContext('2d');\r\n// //     const gravity = 0.7;\r\n\r\n// //     // Set canvas dimensions\r\n// //     canvas.width = 1024;\r\n// //     canvas.height = 576;\r\n\r\n// //     // Use the spriteImage as the background\r\n// //     const backgroundImage = new Image();\r\n// //     backgroundImage.src = spriteImage;\r\n// //     // const canvas = document.getElementById('myCanvas');\r\n// //     // const ctx = canvas.getContext('2d');\r\n// //     // const kenjiImage = new Image();\r\n// //     // kenjiImage.src = './Idle.png';\r\n    \r\n    \r\n    \r\n// //     // Create an animation frame object for each character\r\n// //     const kenjiAnimationFrame = new AnimationFrame({\r\n// //       image: kenjiImage,\r\n// //       frameWidth: kenjiFrameWidth,\r\n// //       frameHeight: kenjiFrameHeight,\r\n// //       totalFrames: kenjiTotalFrames,\r\n// //       animationSpeed: kenjiAnimationSpeed,\r\n      \r\n// //     });\r\n// //     kenjiImage.onload = function() {\r\n// //       ctx.drawImage(kenjiImage, 0,0); // Replace x and y with the coordinates where you want to draw the image.\r\n// //     };\r\n\r\n// //     const samuraiAnimationFrame = new AnimationFrame({\r\n// //       image: backgroundImage,\r\n// //       frameWidth: samuraiFrameWidth,\r\n// //       frameHeight: samuraiFrameHeight,\r\n// //       totalFrames: samuraiTotalFrames,\r\n// //       animationSpeed: samuraiAnimationSpeed,\r\n// //     });\r\n\r\n// //     // Define key state for controlling characters\r\n// //     const keys = {\r\n// //       ArrowLeft: false,\r\n// //       ArrowRight: false,\r\n// //       Space: false,\r\n// //     };\r\n\r\n// //     // Handle keydown event\r\n// //     const handleKeyDown = (event) => {\r\n// //       if (event.key === 'ArrowLeft') {\r\n// //         keys.ArrowLeft = true;\r\n// //       } else if (event.key === 'ArrowRight') {\r\n// //         keys.ArrowRight = true;\r\n// //       } else if (event.key === 'Space') {\r\n// //         keys.Space = true;\r\n// //       }\r\n// //     };\r\n\r\n// //     // Handle keyup event\r\n// //     const handleKeyUp = (event) => {\r\n// //       if (event.key === 'ArrowLeft') {\r\n// //         keys.ArrowLeft = false;\r\n// //       } else if (event.key === 'ArrowRight') {\r\n// //         keys.ArrowRight = false;\r\n// //       } else if (event.key === 'Space') {\r\n// //         keys.Space = false;\r\n// //       }\r\n// //     };\r\n\r\n// //     // Add event listeners for keydown and keyup\r\n// //     window.addEventListener('keydown', handleKeyDown);\r\n// //     window.addEventListener('keyup', handleKeyUp);\r\n\r\n// //     // Start the animation loop\r\n// //     const animate = () => {\r\n// //       ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n// //       // Draw the background image\r\n// //       ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n// //       // Update the player's position based on keyboard input\r\n// //       if (keys.ArrowLeft) {\r\n// //         player.position.x -= player.velocity.x;\r\n// //       } else if (keys.ArrowRight) {\r\n// //         player.position.x += player.velocity.x;\r\n// //       }\r\n\r\n// //       // Draw Kenji character\r\n// //       kenjiAnimationFrame.draw(ctx, player.position.x, player.position.y);\r\n\r\n// //       // Draw Samurai character\r\n// //       samuraiAnimationFrame.draw(ctx, player.position.x + 200, player.position.y);\r\n\r\n// //       // Update the current frame for each character's animation\r\n// //       setCurrentFrame((prevFrame) => prevFrame + 1);\r\n\r\n// //       requestAnimationFrame(animate);\r\n// //     };\r\n\r\n// //     animate();\r\n\r\n// //     // Cleanup (optional)\r\n// //     return () => {\r\n// //       // Remove event listeners or do other cleanup if needed\r\n// //       window.removeEventListener('keydown', handleKeyDown);\r\n// //       window.removeEventListener('keyup', handleKeyUp);\r\n// //     };\r\n// //   }, []); // Empty dependency array to run only once\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <canvas ref={canvasRef}></canvas>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default CanvasDrawing;\r\n\r\n\r\n\r\n\r\n// import React, { useRef, useEffect, useState } from 'react';\r\n// import './Components.css';\r\n\r\n// import spriteImage from './Images/background.png'; // Load the single sprite sheet\r\n// import { AnimationFrame } from './animationFrame.js'; // You might need a utility for handling animations\r\n// import kenjiImage from './Idle1.png'; // Load the single sprite sheet\r\n\r\n// // ...\r\n\r\n// function CanvasDrawing() {\r\n//   // ...\r\n\r\n//   useEffect(() => {\r\n//     // ...\r\n\r\n//     // Use the kenjiImage as the character sprite\r\n//     const image = new Image();\r\n//     image.src = kenjiImage;\r\n\r\n//     // image.onload = function() {\r\n//       // Now, 'image' is an Image object, and you can use it safely.\r\n//       // ...\r\n//       ctx.drawImage(image, 0,0);\r\n//     };\r\n\r\n//     // ...\r\n//   }, []); // Empty dependency array to run only once\r\n\r\n//   // ...\r\n// }\r\n\r\n// export default CanvasDrawing;\r\n\r\n\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './Components.css';\r\n\r\nimport spriteImage from './Images/background.png'; // Load the single sprite sheet\r\nimport { AnimationFrame } from './AnimationFrame.js'; // You might need a utility for handling animations\r\nimport kenjiImage from './Idle3 .png'; // Load the single sprite sheet\r\nimport samuraiImage from './fighter1.png'; // Load the single sprite sheet\r\n\r\nconst initialPlayerState = {\r\n  position: {\r\n    x: 200,\r\n    y: 400\r\n  },\r\n  velocity: {\r\n    x: 10,\r\n    y: 0\r\n  },\r\n  scale: 2.5,\r\n};\r\n// Define frame dimensions and animation parameters\r\nconst kenjiFrameWidth = 284; // Width of a single frame in pixels\r\nconst kenjiFrameHeight = 100; // Height of a single frame in pixels\r\nconst kenjiTotalFrames = 1; // Total number of frames in Kenji's animation\r\nconst kenjiAnimationSpeed = 10; // Speed of Kenji's animation (frames per second)\r\n\r\nconst samuraiFrameWidth = 184; // Width of a single frame in pixels\r\nconst samuraiFrameHeight = 100; // Height of a single frame in pixels\r\nconst samuraiTotalFrames = 1; // Total number of frames in Samurai's animation\r\nconst samuraiAnimationSpeed = 10; // Speed of Samurai's animation (frames per second)\r\n\r\nfunction CanvasDrawing() {\r\n  const canvasRef = useRef(null);\r\n  const [player, setPlayer] = useState(initialPlayerState);\r\n  const [currentFrame, setCurrentFrame] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const gravity = 0.7;\r\n\r\n    // Set canvas dimensions\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    // Use the spriteImage as the background\r\n    const backgroundImage = new Image();\r\n    backgroundImage.src = spriteImage;\r\n\r\n    // Use kenjiImage as the character sprite\r\n    const image = new Image();\r\n    image.src = kenjiImage;\r\n\r\n    image.onload = function() {\r\n      // The 'image' is now fully loaded and can be safely used in your drawing logic.\r\n      // For example, you can draw it here.\r\n      ctx.drawImage(image, 50, 50); // Replace x and y with the coordinates where you want to draw the image.\r\n    };\r\n// Use samuraiImage as the character sprite\r\n    const fighter = new Image();\r\n    fighter.src = samuraiImage;\r\n\r\n    fighter.onload = function() {\r\n      // The 'image' is now fully loaded and can be safely used in your drawing logic.\r\n      // For example, you can draw it here.\r\n      ctx.drawImage(fighter, 50, 50); // Replace x and y with the coordinates where you want to draw the image.\r\n    };\r\n\r\n\r\n    // Create an animation frame object for each character\r\n    const kenjiAnimationFrame = new AnimationFrame({\r\n      image: image,\r\n      frameWidth: kenjiFrameWidth,\r\n      frameHeight: kenjiFrameHeight,\r\n      totalFrames: kenjiTotalFrames,\r\n      animationSpeed: kenjiAnimationSpeed,\r\n    });\r\n\r\n    const samuraiAnimationFrame = new AnimationFrame({\r\n      image: fighter,\r\n      frameWidth: samuraiFrameWidth,\r\n      frameHeight: samuraiFrameHeight,\r\n      totalFrames: samuraiTotalFrames,\r\n      animationSpeed: samuraiAnimationSpeed,\r\n    });\r\n\r\n    // Define key state for controlling characters\r\n    const keys = {\r\n      ArrowLeft: false,\r\n      ArrowRight: false,\r\n      Space: false,\r\n    };\r\n\r\n    \r\n\r\n    // Handle keydown event\r\n    const handleKeyDown = (event) => {\r\n      if (event.key === 'ArrowLeft') {\r\n        keys.ArrowLeft = true;\r\n      } else if (event.key === 'ArrowRight') {\r\n        keys.ArrowRight = true;\r\n      } else if (event.key === 'Space') {\r\n        keys.Space = true;\r\n      }\r\n    };\r\n\r\n    \r\n\r\n    // Handle keyup event\r\n    const handleKeyUp = (event) => {\r\n      if (event.key === 'ArrowLeft') {\r\n        keys.ArrowLeft = false;\r\n      } else if (event.key === 'ArrowRight') {\r\n        keys.ArrowRight = false;\r\n      } else if (event.key === 'Space') {\r\n        keys.Space = false;\r\n      }\r\n    };\r\n\r\n    // Add event listeners for keydown and keyup\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n\r\n    // Start the animation loop\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw the background image\r\n      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Update the player's position based on keyboard input\r\n      if (keys.ArrowLeft) {\r\n        player.position.x -= player.velocity.x;\r\n      } else if (keys.ArrowRight) {\r\n        player.position.x += player.velocity.x;\r\n      }\r\n\r\n      // Draw Kenji character\r\n      kenjiAnimationFrame.draw(ctx, player.position.x, player.position.y);\r\n\r\n      // Draw Samurai character\r\n      samuraiAnimationFrame.draw(ctx, player.position.x + 400, player.position.y);\r\n\r\n      // Update the current frame for each character's animation\r\n      setCurrentFrame((prevFrame) => prevFrame + 1);\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    // Cleanup (optional)\r\n    return () => {\r\n      // Remove event listeners or do other cleanup if needed\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      window.removeEventListener('keyup', handleKeyUp);\r\n    };\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanvasDrawing;\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}