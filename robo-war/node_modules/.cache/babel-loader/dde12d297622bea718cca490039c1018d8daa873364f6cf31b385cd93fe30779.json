{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meenal Jain\\\\Desktop\\\\robo_war\\\\robo-war\\\\src\\\\Signup.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import {\n//   Button,\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   InputGroup,\n//   InputRightElement,\n//   VStack,\n//   useToast,\n//   Box,\n//   Container,\n//   Flex,\n//  Text,\n// } from \"@chakra-ui/react\";\n// import { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\n// import { useNavigate } from 'react-router-dom';\n\n// import clicksound from './Sounds/Click - Sound Effect.mp3'\n\n// const Signup = () => {\n//   const [name, setName] = useState();\n//   const [email, setEmail] = useState();\n//   const [confirmpassword, setConfirmpassword] = useState();\n//   const [password, setPassword] = useState();\n//   const [show, setShow] = useState(false);\n//   const [showconfirm, setShowconfirm] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const toast = useToast();\n//   const navigate = useNavigate();\n\n//   const ding = () => {\n//     const sound = new Audio(clicksound);\n//     sound.play();\n//   };\n//   const handleClick = () => setShow(!show);\n//   const handleConfirmClick = () => {\n//     setShowconfirm(!showconfirm);\n//   };\n\n//   // const submitHandler = async () => {\n//   //   setLoading(true);\n//   //   if (!name || !email || !password || !confirmpassword) {\n//   //     toast({\n//   //       title: \"Please fill all the required fields\",\n//   //       status: \"warning\",\n//   //       duration: 5000,\n//   //       isClosable: \"true\",\n//   //       position: \"bottom\",\n//   //     });\n\n//   //     setLoading(false);\n//   //     return;\n//   //   }\n//   //   if (password !== confirmpassword) {\n//   //     toast({\n//   //       title: \"Passwords Doesn't match\",\n//   //       status: \"warning\",\n//   //       duration: 5000,\n//   //       isClosable: true,\n//   //       position: \"top\",\n//   //     });\n//   //     return;\n//   //   }\n//   //   try {\n//   //     const config = {\n//   //       headers: {\n//   //         \"Content-type\": \"application/json\",\n//   //       },\n//   //     };\n\n//   //     const response = await axios.post(\n//   //       \"http://127.0.0.1:5000/roboWar/auth\",\n//   //       { name, email, password},\n//   //       config\n//   //     );\n//   //     console.log(response);\n//   //     console.log(response.data);\n\n//   //     toast({\n//   //       title: \"Registration successful\",\n//   //       duration: 5000,\n//   //       status: \"success\",\n//   //       isClosable: true,\n//   //       position: \"top\",\n//   //     });\n\n//   //     localStorage.setItem('userInfo', JSON.stringify(response.data));\n//   //     setLoading(false);\n//   //     navigate('/Main')\n\n//   //   } catch (error) {\n//   //     toast({\n//   //       title: \"Error Occured!\",\n//   //        description: error.response.data.message,\n//   //       status: \"error\",\n//   //       duration: 5000,\n//   //       isClosable: true,\n//   //       position: \"top\",\n//   //     });\n//   //   }    \n//   // };\n\n//   const submitHandler = async () => {\n//     setLoading(true);\n//     if (!name || !email || !password || !confirmpassword) {\n//       toast({\n//         title: \"Please fill all the required fields\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom\",\n//       });\n\n//       setLoading(false);\n//       return;\n//     }\n//     if (password !== confirmpassword) {\n//       toast({\n//         title: \"Passwords Doesn't match\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//       setLoading(false);\n//       return;\n//     }\n//     try {\n//       const config = {\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//         },\n//       };\n\n//       const response = await axios.post(\n//         \"http://127.0.0.1:5000/roboWar/auth\",\n//         { name, email, password },\n//         config\n//       );\n\n//       console.log(\"Response:\", response); // Add this line for debugging\n\n//       if (response && response.data) {\n//         // Check if 'data' property exists\n//         console.log(\"Data:\", response.data);\n\n//         toast({\n//           title: \"Registration successful\",\n//           duration: 5000,\n//           status: \"success\",\n//           isClosable: true,\n//           position: \"top\",\n//         });\n\n//         localStorage.setItem('userInfo', JSON.stringify(response.data));\n//         setLoading(false);\n//         navigate('/Main');\n//       } else {\n//         console.error(\"Invalid response or missing data.\");\n//         setLoading(false);\n//       }\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       toast({\n//         title: \"Error Occurred!\",\n//         description: error.response?.data.message || \"An error occurred\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//    <>\n//    <Container>\n//         <Flex color=\"white\" align=\"center\">\n//           <Box w=\"5750px\">\n//             <VStack spacing=\"5px\" color=\"white\">\n//               <FormControl id=\"first-name\" isRequired>\n//                 <FormLabel>Username</FormLabel>\n//                 <Input\n//                 onClick={ding}\n//                 placeholder=\"Enter your name\"\n//                 bg={name ? \"gray.50\" : \"white\"}\n//                 color=\"black\"\n//                 _hover={{ borderColor: \"black\" }}\n//                 borderColor=\"black\"\n//                 onChange={(event) => {\n//                   setName(event.target.value);\n//           }}\n//           value={name}\n//         />\n//       </FormControl>\n\n//       <FormControl id=\"email\" isRequired>\n//         <FormLabel>Email</FormLabel>\n//         <Input\n//         onClick={ding}\n//         placeholder=\"Enter your email\"\n//           bg={email ? \"gray.50\" : \"white\"}\n//           _hover={{ borderColor: \"black\" }}\n//           color=\"black\"\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setEmail(event.target.value);\n//           }}\n//           value={email}\n//         />\n//       </FormControl>\n//       <FormControl id=\"password\" isRequired>\n//         <FormLabel>Password</FormLabel>\n//         <InputGroup>\n//         <Input\n//            onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={password ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setPassword(event.target.value);\n//           }}\n//           value={password}\n//         />\n//        <InputRightElement w=\"4.5em\">\n//             <Button\n//               h=\"1.75em\"\n//               size=\"md\"\n//               onClick={handleClick}\n//               color=\"black\"\n//               variant=\"ghost\"\n//             >\n//               {show ? <ViewOffIcon /> : <ViewIcon />}\n//             </Button>\n//           </InputRightElement>\n//           </InputGroup>\n//          </FormControl>\n\n//          <FormControl id=\"confirm-password\" isRequired>\n//           <FormLabel>Confirm Password</FormLabel>\n//           <InputGroup>\n//           <Input\n//           onClick={ding}\n//           type={showconfirm ? \"text\" : \"password\"}\n//           placeholder=\"Re-enter your password\"\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setConfirmpassword(event.target.value);\n//           }}\n//           value={confirmpassword}\n//         />\n//         <InputRightElement w=\"4.5em\">\n//             <Button\n//               h=\"1.75em\"\n//               size=\"md\"\n//               onClick={handleConfirmClick}\n//               color=\"black\"\n//               variant=\"ghost\"\n//             >\n//               {showconfirm ? <ViewOffIcon /> : <ViewIcon />}\n//             </Button>\n//           </InputRightElement>\n//         </InputGroup>\n//       </FormControl>\n//               <Button\n//                 colorScheme=\"teal\"\n//                 size=\"lg\"\n//                 margin=\"5\"\n//                 color=\"white\"\n//                 fontWeight=\"bold\"\n//                 borderRadius=\"md\"\n//                 bgGradient=\"linear(to-r, teal.500, green.500)\"\n//                 _hover={{\n//                   bgGradient: \"linear(to-r, red.500, yellow.500)\",\n//                 }}\n//                 style={{ marginTop: 15 }}\n//                 onClick={() => {\n//                   ding(); // Play sound effect\n//                   submitHandler(); // Handle form submission\n//                 }}\n//                 isLoading={loading}\n//               >\n//                 Sign Up\n//               </Button>\n//             </VStack>\n//           </Box>\n//         </Flex>\n//       </Container>\n//       </>\n//   );\n// };\n\n// export default Signup;\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Button, FormControl, FormLabel, Input, InputGroup, InputRightElement, VStack, useToast, Box, Container, Flex } from \"@chakra-ui/react\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nimport lightgreenblue from \"./lightgreenblue.png\";\nimport { useNavigate } from 'react-router-dom';\nimport clicksound from './Sounds/Click - Sound Effect.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Signup = () => {\n  _s();\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [show, setShow] = useState(false);\n  const [showconfirm, setShowconfirm] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const navigate = useNavigate();\n  const ding = () => {\n    const sound = new Audio(clicksound);\n    sound.play();\n  };\n  const handleClick = () => setShow(!show);\n  const handleConfirmClick = () => {\n    setShow(!show);\n  };\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please fill all the required fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: \"true\",\n        position: \"bottom\"\n      });\n      setLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Doesn't match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\"\n      });\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      };\n      const {\n        data\n      } = await axios.post(\"http://127.0.0.1:5000/roboWar/auth\", {\n        name,\n        email,\n        password\n      }, config);\n      toast({\n        title: \"Registration successful\",\n        duration: 5000,\n        status: \"success\",\n        isClosable: true,\n        position: \"top\"\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      navigate('/Main');\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        color: \"black\",\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          w: \"5750px\",\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: \"5px\",\n            color: \"black\",\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"first-name\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                onClick: ding,\n                placeholder: \"Enter your name\",\n                bg: name ? \"gray.50\" : \"white\",\n                color: \"black\",\n                _hover: {\n                  borderColor: \"black\"\n                },\n                borderColor: \"black\",\n                onChange: event => {\n                  setName(event.target.value);\n                },\n                value: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"email\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                onClick: ding,\n                placeholder: \"Enter your email\",\n                bg: email ? \"gray.50\" : \"white\",\n                _hover: {\n                  borderColor: \"black\"\n                },\n                color: \"black\",\n                borderColor: \"black\",\n                onChange: event => {\n                  setEmail(event.target.value);\n                },\n                value: email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"password\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  onClick: ding,\n                  placeholder: \"Enter your password\",\n                  bg: password ? \"gray.50\" : \"white\",\n                  color: \"black\",\n                  _hover: {\n                    borderColor: \"black\"\n                  },\n                  borderColor: \"black\",\n                  onChange: event => {\n                    setPassword(event.target.value);\n                  },\n                  value: password\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 9\n                }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n                  w: \"4.5em\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    h: \"1.75em\",\n                    size: \"md\",\n                    onClick: handleClick,\n                    color: \"black\",\n                    variant: \"ghost\",\n                    children: show ? /*#__PURE__*/_jsxDEV(ViewOffIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 472,\n                      columnNumber: 23\n                    }, this) : /*#__PURE__*/_jsxDEV(ViewIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 472,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 13\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 8\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"confirm-password\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Confirm Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  onClick: ding,\n                  type: show ? \"text\" : \"password\",\n                  placeholder: \"Re-enter your password\",\n                  bg: confirmpassword ? \"gray.50\" : \"white\",\n                  color: \"black\",\n                  _hover: {\n                    borderColor: \"black\"\n                  },\n                  borderColor: \"black\",\n                  onChange: event => {\n                    setConfirmpassword(event.target.value);\n                  },\n                  value: confirmpassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n                  w: \"4.5em\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    h: \"1.75em\",\n                    size: \"md\",\n                    onClick: handleConfirmClick,\n                    color: \"black\",\n                    variant: \"ghost\",\n                    children: showconfirm ? /*#__PURE__*/_jsxDEV(ViewOffIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 502,\n                      columnNumber: 30\n                    }, this) : /*#__PURE__*/_jsxDEV(ViewIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 502,\n                      columnNumber: 48\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 495,\n                    columnNumber: 13\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 9\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              size: \"lg\",\n              margin: \"5\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              borderRadius: \"md\",\n              bgGradient: \"linear(to-r, teal.500, green.500)\",\n              _hover: {\n                bgGradient: \"linear(to-r, red.500, yellow.500)\"\n              },\n              style: {\n                marginTop: 15\n              },\n              onClick: () => {\n                ding(); // Play sound effect\n                submitHandler(); // Handle form submission\n              },\n\n              isLoading: loading,\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Signup, \"oOxlUQ1t+7vjU0jzTAtp8W2aHjw=\", false, function () {\n  return [useToast, useNavigate];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useState","axios","Button","FormControl","FormLabel","Input","InputGroup","InputRightElement","VStack","useToast","Box","Container","Flex","ViewIcon","ViewOffIcon","lightgreenblue","useNavigate","clicksound","jsxDEV","_jsxDEV","Fragment","_Fragment","Signup","_s","name","setName","email","setEmail","confirmpassword","setConfirmpassword","password","setPassword","show","setShow","showconfirm","setShowconfirm","loading","setLoading","toast","navigate","ding","sound","Audio","play","handleClick","handleConfirmClick","submitHandler","title","status","duration","isClosable","position","config","headers","data","post","localStorage","setItem","JSON","stringify","error","description","message","children","color","align","w","spacing","id","isRequired","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","bg","_hover","borderColor","onChange","event","target","value","h","size","variant","type","colorScheme","margin","fontWeight","borderRadius","bgGradient","style","marginTop","isLoading","_c","$RefreshReg$"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Signup.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import {\r\n//   Button,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Input,\r\n//   InputGroup,\r\n//   InputRightElement,\r\n//   VStack,\r\n//   useToast,\r\n//   Box,\r\n//   Container,\r\n//   Flex,\r\n//  Text,\r\n// } from \"@chakra-ui/react\";\r\n// import { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// import clicksound from './Sounds/Click - Sound Effect.mp3'\r\n\r\n\r\n// const Signup = () => {\r\n//   const [name, setName] = useState();\r\n//   const [email, setEmail] = useState();\r\n//   const [confirmpassword, setConfirmpassword] = useState();\r\n//   const [password, setPassword] = useState();\r\n//   const [show, setShow] = useState(false);\r\n//   const [showconfirm, setShowconfirm] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const toast = useToast();\r\n//   const navigate = useNavigate();\r\n\r\n\r\n\r\n//   const ding = () => {\r\n//     const sound = new Audio(clicksound);\r\n//     sound.play();\r\n//   };\r\n//   const handleClick = () => setShow(!show);\r\n//   const handleConfirmClick = () => {\r\n//     setShowconfirm(!showconfirm);\r\n//   };\r\n\r\n//   // const submitHandler = async () => {\r\n//   //   setLoading(true);\r\n//   //   if (!name || !email || !password || !confirmpassword) {\r\n//   //     toast({\r\n//   //       title: \"Please fill all the required fields\",\r\n//   //       status: \"warning\",\r\n//   //       duration: 5000,\r\n//   //       isClosable: \"true\",\r\n//   //       position: \"bottom\",\r\n//   //     });\r\n\r\n//   //     setLoading(false);\r\n//   //     return;\r\n//   //   }\r\n//   //   if (password !== confirmpassword) {\r\n//   //     toast({\r\n//   //       title: \"Passwords Doesn't match\",\r\n//   //       status: \"warning\",\r\n//   //       duration: 5000,\r\n//   //       isClosable: true,\r\n//   //       position: \"top\",\r\n//   //     });\r\n//   //     return;\r\n//   //   }\r\n//   //   try {\r\n//   //     const config = {\r\n//   //       headers: {\r\n//   //         \"Content-type\": \"application/json\",\r\n//   //       },\r\n//   //     };\r\n\r\n//   //     const response = await axios.post(\r\n//   //       \"http://127.0.0.1:5000/roboWar/auth\",\r\n//   //       { name, email, password},\r\n//   //       config\r\n//   //     );\r\n//   //     console.log(response);\r\n//   //     console.log(response.data);\r\n\r\n//   //     toast({\r\n//   //       title: \"Registration successful\",\r\n//   //       duration: 5000,\r\n//   //       status: \"success\",\r\n//   //       isClosable: true,\r\n//   //       position: \"top\",\r\n//   //     });\r\n\r\n    \r\n//   //     localStorage.setItem('userInfo', JSON.stringify(response.data));\r\n//   //     setLoading(false);\r\n//   //     navigate('/Main')\r\n\r\n//   //   } catch (error) {\r\n//   //     toast({\r\n//   //       title: \"Error Occured!\",\r\n//   //        description: error.response.data.message,\r\n//   //       status: \"error\",\r\n//   //       duration: 5000,\r\n//   //       isClosable: true,\r\n//   //       position: \"top\",\r\n//   //     });\r\n//   //   }    \r\n//   // };\r\n\r\n//   const submitHandler = async () => {\r\n//     setLoading(true);\r\n//     if (!name || !email || !password || !confirmpassword) {\r\n//       toast({\r\n//         title: \"Please fill all the required fields\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom\",\r\n//       });\r\n  \r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     if (password !== confirmpassword) {\r\n//       toast({\r\n//         title: \"Passwords Doesn't match\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           \"Content-type\": \"application/json\",\r\n//         },\r\n//       };\r\n  \r\n//       const response = await axios.post(\r\n//         \"http://127.0.0.1:5000/roboWar/auth\",\r\n//         { name, email, password },\r\n//         config\r\n//       );\r\n  \r\n//       console.log(\"Response:\", response); // Add this line for debugging\r\n  \r\n//       if (response && response.data) {\r\n//         // Check if 'data' property exists\r\n//         console.log(\"Data:\", response.data);\r\n  \r\n//         toast({\r\n//           title: \"Registration successful\",\r\n//           duration: 5000,\r\n//           status: \"success\",\r\n//           isClosable: true,\r\n//           position: \"top\",\r\n//         });\r\n  \r\n//         localStorage.setItem('userInfo', JSON.stringify(response.data));\r\n//         setLoading(false);\r\n//         navigate('/Main');\r\n//       } else {\r\n//         console.error(\"Invalid response or missing data.\");\r\n//         setLoading(false);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error);\r\n//       toast({\r\n//         title: \"Error Occurred!\",\r\n//         description: error.response?.data.message || \"An error occurred\",\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//    <>\r\n//    <Container>\r\n//         <Flex color=\"white\" align=\"center\">\r\n//           <Box w=\"5750px\">\r\n//             <VStack spacing=\"5px\" color=\"white\">\r\n//               <FormControl id=\"first-name\" isRequired>\r\n//                 <FormLabel>Username</FormLabel>\r\n//                 <Input\r\n//                 onClick={ding}\r\n//                 placeholder=\"Enter your name\"\r\n//                 bg={name ? \"gray.50\" : \"white\"}\r\n//                 color=\"black\"\r\n//                 _hover={{ borderColor: \"black\" }}\r\n//                 borderColor=\"black\"\r\n//                 onChange={(event) => {\r\n//                   setName(event.target.value);\r\n//           }}\r\n//           value={name}\r\n//         />\r\n//       </FormControl>\r\n\r\n//       <FormControl id=\"email\" isRequired>\r\n//         <FormLabel>Email</FormLabel>\r\n//         <Input\r\n//         onClick={ding}\r\n//         placeholder=\"Enter your email\"\r\n//           bg={email ? \"gray.50\" : \"white\"}\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           color=\"black\"\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setEmail(event.target.value);\r\n//           }}\r\n//           value={email}\r\n//         />\r\n//       </FormControl>\r\n//       <FormControl id=\"password\" isRequired>\r\n//         <FormLabel>Password</FormLabel>\r\n//         <InputGroup>\r\n//         <Input\r\n//            onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={password ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setPassword(event.target.value);\r\n//           }}\r\n//           value={password}\r\n//         />\r\n//        <InputRightElement w=\"4.5em\">\r\n//             <Button\r\n//               h=\"1.75em\"\r\n//               size=\"md\"\r\n//               onClick={handleClick}\r\n//               color=\"black\"\r\n//               variant=\"ghost\"\r\n//             >\r\n//               {show ? <ViewOffIcon /> : <ViewIcon />}\r\n//             </Button>\r\n//           </InputRightElement>\r\n//           </InputGroup>\r\n//          </FormControl>\r\n         \r\n//          <FormControl id=\"confirm-password\" isRequired>\r\n//           <FormLabel>Confirm Password</FormLabel>\r\n//           <InputGroup>\r\n//           <Input\r\n//           onClick={ding}\r\n//           type={showconfirm ? \"text\" : \"password\"}\r\n//           placeholder=\"Re-enter your password\"\r\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setConfirmpassword(event.target.value);\r\n//           }}\r\n//           value={confirmpassword}\r\n//         />\r\n//         <InputRightElement w=\"4.5em\">\r\n//             <Button\r\n//               h=\"1.75em\"\r\n//               size=\"md\"\r\n//               onClick={handleConfirmClick}\r\n//               color=\"black\"\r\n//               variant=\"ghost\"\r\n//             >\r\n//               {showconfirm ? <ViewOffIcon /> : <ViewIcon />}\r\n//             </Button>\r\n//           </InputRightElement>\r\n//         </InputGroup>\r\n//       </FormControl>\r\n//               <Button\r\n//                 colorScheme=\"teal\"\r\n//                 size=\"lg\"\r\n//                 margin=\"5\"\r\n//                 color=\"white\"\r\n//                 fontWeight=\"bold\"\r\n//                 borderRadius=\"md\"\r\n//                 bgGradient=\"linear(to-r, teal.500, green.500)\"\r\n//                 _hover={{\r\n//                   bgGradient: \"linear(to-r, red.500, yellow.500)\",\r\n//                 }}\r\n//                 style={{ marginTop: 15 }}\r\n//                 onClick={() => {\r\n//                   ding(); // Play sound effect\r\n//                   submitHandler(); // Handle form submission\r\n//                 }}\r\n//                 isLoading={loading}\r\n//               >\r\n//                 Sign Up\r\n//               </Button>\r\n//             </VStack>\r\n//           </Box>\r\n//         </Flex>\r\n//       </Container>\r\n//       </>\r\n//   );\r\n// };\r\n\r\n// export default Signup;\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  VStack,\r\n  useToast,\r\n  Box,\r\n  Container,\r\n  Flex,\r\n \r\n} from \"@chakra-ui/react\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\nimport lightgreenblue from \"./lightgreenblue.png\"\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport clicksound from './Sounds/Click - Sound Effect.mp3'\r\n\r\n\r\nconst Signup = () => {\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [show, setShow] = useState(false);\r\n  const [showconfirm, setShowconfirm] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n  const navigate = useNavigate();\r\n\r\n\r\n  const ding = () => {\r\n    const sound = new Audio(clicksound);\r\n    sound.play();\r\n  };\r\n  const handleClick = () => setShow(!show);\r\n  const handleConfirmClick = () => {\r\n    setShow(!show);\r\n  };\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please fill all the required fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: \"true\",\r\n        position: \"bottom\",\r\n      });\r\n\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Doesn't match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"http://127.0.0.1:5000/roboWar/auth\",\r\n        { name, email, password},\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Registration successful\",\r\n        duration: 5000,\r\n        status: \"success\",\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      navigate('/Main')\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    }    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Flex color=\"black\" align=\"center\">\r\n          <Box w=\"5750px\">\r\n            <VStack spacing=\"5px\" color=\"black\">\r\n              <FormControl id=\"first-name\" isRequired>\r\n                <FormLabel>Username</FormLabel>\r\n                <Input\r\n                onClick={ding}\r\n                placeholder=\"Enter your name\"\r\n                bg={name ? \"gray.50\" : \"white\"}\r\n                color=\"black\"\r\n                _hover={{ borderColor: \"black\" }}\r\n                borderColor=\"black\"\r\n                onChange={(event) => {\r\n                  setName(event.target.value);\r\n          }}\r\n          value={name}\r\n        />\r\n      </FormControl>\r\n\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email</FormLabel>\r\n        <Input\r\n        onClick={ding}\r\n        placeholder=\"Enter your email\"\r\n          bg={email ? \"gray.50\" : \"white\"}\r\n          _hover={{ borderColor: \"black\" }}\r\n          color=\"black\"\r\n          borderColor=\"black\"\r\n          onChange={(event) => {\r\n            setEmail(event.target.value);\r\n          }}\r\n          value={email}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup>\r\n        <Input\r\n           onClick={ding}\r\n          placeholder=\"Enter your password\"\r\n          bg={password ? \"gray.50\" : \"white\"}\r\n          color=\"black\"\r\n          _hover={{ borderColor: \"black\" }}\r\n          borderColor=\"black\"\r\n          onChange={(event) => {\r\n            setPassword(event.target.value);\r\n          }}\r\n          value={password}\r\n        />\r\n       <InputRightElement w=\"4.5em\">\r\n            <Button\r\n              h=\"1.75em\"\r\n              size=\"md\"\r\n              onClick={handleClick}\r\n              color=\"black\"\r\n              variant=\"ghost\"\r\n            >\r\n              {show ? <ViewOffIcon /> : <ViewIcon />}\r\n            </Button>\r\n          </InputRightElement>\r\n          </InputGroup>\r\n         </FormControl>\r\n         \r\n         <FormControl id=\"confirm-password\" isRequired>\r\n          <FormLabel>Confirm Password</FormLabel>\r\n          <InputGroup>\r\n          <Input\r\n          onClick={ding}\r\n          type={show ? \"text\" : \"password\"}\r\n          placeholder=\"Re-enter your password\"\r\n          bg={confirmpassword ? \"gray.50\" : \"white\"}\r\n          color=\"black\"\r\n          _hover={{ borderColor: \"black\" }}\r\n          borderColor=\"black\"\r\n          onChange={(event) => {\r\n            setConfirmpassword(event.target.value);\r\n          }}\r\n          value={confirmpassword}\r\n        />\r\n        <InputRightElement w=\"4.5em\">\r\n            <Button\r\n              h=\"1.75em\"\r\n              size=\"md\"\r\n              onClick={handleConfirmClick}\r\n              color=\"black\"\r\n              variant=\"ghost\"\r\n            >\r\n              {showconfirm ? <ViewOffIcon /> : <ViewIcon />}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n              <Button\r\n                colorScheme=\"teal\"\r\n                size=\"lg\"\r\n                margin=\"5\"\r\n                color=\"white\"\r\n                fontWeight=\"bold\"\r\n                borderRadius=\"md\"\r\n                bgGradient=\"linear(to-r, teal.500, green.500)\"\r\n                _hover={{\r\n                  bgGradient: \"linear(to-r, red.500, yellow.500)\",\r\n                }}\r\n                style={{ marginTop: 15 }}\r\n                onClick={() => {\r\n                  ding(); // Play sound effect\r\n                  submitHandler(); // Handle form submission\r\n                }}\r\n                isLoading={loading}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n            </VStack>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}