{"ast":null,"code":"// export class Sprite {\n//     constructor ({\n//       position,\n//       imageSrc,\n//       scale = 1,\n//       framesMax = 1,\n//       offset = { x: 0, y: 0 }\n//     }) {\n//       this.position = position\n//       this.width = 50\n//       this.height = 150\n//       this.image = new Image()\n//       this.image.src = imageSrc\n//       this.scale = scale\n//       this.framesMax = framesMax\n//       this.framesCurrent = 0\n//       this.framesElapsed = 0\n//       this.framesHold = 5\n//       this.offset = offset\n//       this.context = context\n//     }\n\n//     draw() {\n//       this.context.drawImage(\n//         this.image,\n//         this.framesCurrent * (this.image.width / this.framesMax),\n//         0,\n//         this.image.width / this.framesMax,\n//         this.image.height,\n//         this.position.x - this.offset.x,\n//         this.position.y - this.offset.y,\n//         (this.image.width / this.framesMax) * this.scale,\n//         this.image.height * this.scale\n//       )\n//     }\n\n//     animateFrames() {\n//       this.framesElapsed++\n\n//       if (this.framesElapsed % this.framesHold === 0) {\n//         if (this.framesCurrent < this.framesMax - 1) {\n//           this.framesCurrent++\n//         } else {\n//           this.framesCurrent = 0\n//         }\n//       }\n//     }\n\n//     update() {\n//       this.draw()\n//       this.animateFrames()\n//     }\n//   }\n\n//   export class Fighter extends Sprite {\n//     constructor({\n//       position,\n//       velocity,\n//       color = 'red',\n//       imageSrc,\n//       scale = 1,\n//       framesMax = 1,\n//       offset = { x: 0, y: 0 },\n//       sprites,\n//       attackBox = { offset: {}, width: undefined, height: undefined },\n//       context,\n//     }) {\n//       super({\n//         position,\n//         imageSrc,\n//         scale,\n//         framesMax,\n//         offset,\n//         context,\n//       });\n\n//       this.velocity = velocity\n//       this.width = 50\n//       this.height = 150\n//       this.lastKey\n//       this.attackBox = {\n//         position: {\n//           x: this.position.x,\n//           y: this.position.y\n//         },\n//         offset: attackBox.offset,\n//         width: attackBox.width,\n//         height: attackBox.height\n//       }\n//       this.color = color\n//       this.isAttacking\n//       this.health = 100\n//       this.framesCurrent = 0\n//       this.framesElapsed = 0\n//       this.framesHold = 5\n//       this.sprites = sprites\n//       this.dead = false\n\n//       for (const sprite in this.sprites) {\n//         sprites[sprite].image = new Image()\n//         sprites[sprite].image.src = sprites[sprite].imageSrc\n//       }\n//     }\n\n//     update() {\n//       this.draw()\n//       if (!this.dead) this.animateFrames()\n\n//       // attack boxes\n//       this.attackBox.position.x = this.position.x + this.attackBox.offset.x\n//       this.attackBox.position.y = this.position.y + this.attackBox.offset.y\n\n//       // draw the attack box\n//       // c.fillRect(\n//       //   this.attackBox.position.x,\n//       //   this.attackBox.position.y,\n//       //   this.attackBox.width,\n//       //   this.attackBox.height\n//       // )\n\n//       this.position.x += this.velocity.x\n//       this.position.y += this.velocity.y\n\n//       // gravity function\n//       if (this.position.y + this.height + this.velocity.y >= canvas.height - 96) {\n//         this.velocity.y = 0\n//         this.position.y = 330\n//       } else this.velocity.y += gravity\n//     }\n\n//     attack() {\n//       this.switchSprite('attack1')\n//       this.isAttacking = true\n//     }\n\n//     takeHit() {\n//       this.health -= 20\n\n//       if (this.health <= 0) {\n//         this.switchSprite('death')\n//       } else this.switchSprite('takeHit')\n//     }\n\n//     switchSprite(sprite) {\n//       if (this.image === this.sprites.death.image) {\n//         if (this.framesCurrent === this.sprites.death.framesMax - 1)\n//           this.dead = true;\n//         return;\n//       }\n\n//       // overriding all other animations with the attack animation\n//       if (\n//         this.image === this.sprites.attack1.image &&\n//         this.framesCurrent < this.sprites.attack1.framesMax - 1\n//       )\n//         return\n\n//       // override when fighter gets hit\n//       if (\n//         this.image === this.sprites.takeHit.image &&\n//         this.framesCurrent < this.sprites.takeHit.framesMax - 1\n//       )\n//         return\n\n//       switch (sprite) {\n//         case 'idle':\n//           if (this.image !== this.sprites.idle.image) {\n//             this.image = this.sprites.idle.image\n//             this.framesMax = this.sprites.idle.framesMax\n//             this.framesCurrent = 0\n//           }\n//           break\n//         case 'run':\n//           if (this.image !== this.sprites.run.image) {\n//             this.image = this.sprites.run.image\n//             this.framesMax = this.sprites.run.framesMax\n//             this.framesCurrent = 0\n//           }\n//           break\n//         case 'jump':\n//           if (this.image !== this.sprites.jump.image) {\n//             this.image = this.sprites.jump.image\n//             this.framesMax = this.sprites.jump.framesMax\n//             this.framesCurrent = 0\n//           }\n//           break\n\n//         case 'fall':\n//           if (this.image !== this.sprites.fall.image) {\n//             this.image = this.sprites.fall.image\n//             this.framesMax = this.sprites.fall.framesMax\n//             this.framesCurrent = 0\n//           }\n//           break\n\n//         case 'attack1':\n//           if (this.image !== this.sprites.attack1.image) {\n//             this.image = this.sprites.attack1.image\n//             this.framesMax = this.sprites.attack1.framesMax\n//             this.framesCurrent = 0\n//           }\n//           break\n\n//         case 'takeHit':\n//           if (this.image !== this.sprites.takeHit.image) {\n//             this.image = this.sprites.takeHit.image\n//             this.framesMax = this.sprites.takeHit.framesMax\n//             this.framesCurrent = 0\n//           }\n//           break\n\n//         case 'death':\n//           if (this.image !== this.sprites.death.image) {\n//             this.image = this.sprites.death.image\n//             this.framesMax = this.sprites.death.framesMax\n//             this.framesCurrent = 0\n//           }\n//           break\n//       }\n//     }\n//   }\n\n// export default Sprite;\n\nexport class Sprite {\n  constructor({\n    position,\n    imageSrc,\n    scale = 1,\n    framesMax = 1,\n    offset = {\n      x: 0,\n      y: 0\n    },\n    context // Pass the canvas context as an argument\n  }) {\n    this.position = position;\n    this.width = 50;\n    this.height = 150;\n    this.image = new Image();\n    this.image.src = imageSrc;\n    this.scale = scale;\n    this.framesMax = framesMax;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.offset = offset;\n    this.context = context; // Store the canvas context\n\n    this.image.onload = () => {\n      // You can safely use the image here\n    };\n  }\n}\n;\n\n// draw() {\n//   this.context.drawImage(\n//     this.image,\n//     this.framesCurrent * (this.image.width / this.framesMax),\n//     0,\n//     this.image.width / this.framesMax,\n//     this.image.height,\n//     this.position.x - this.offset.x,\n//     this.position.y - this.offset.y,\n//     (this.image.width / this.framesMax) * this.scale,\n//     this.image.height * this.scale\n//   );\n// }\ndraw();\nif (this.image.complete) {\n  this.context.drawImage(this.image, this.framesCurrent * (this.image.width / this.framesMax), 0, this.image.width / this.framesMax, this.image.height, this.position.x - this.offset.x, this.position.y - this.offset.y, this.image.width / this.framesMax * this.scale, this.image.height * this.scale);\n}\nanimateFrames();\nthis.framesElapsed++;\nif (this.framesElapsed % this.framesHold === 0) {\n  if (this.framesCurrent < this.framesMax - 1) {\n    this.framesCurrent++;\n  } else {\n    this.framesCurrent = 0;\n  }\n}\nupdate();\nthis.draw();\nthis.animateFrames();\nexport class Fighter extends Sprite {\n  constructor({\n    position,\n    velocity,\n    color = 'red',\n    imageSrc,\n    scale = 1,\n    framesMax = 1,\n    offset = {\n      x: 0,\n      y: 0\n    },\n    sprites,\n    attackBox = {\n      offset: {},\n      width: undefined,\n      height: undefined\n    },\n    context // Pass the canvas context as an argument\n  }) {\n    super({\n      position,\n      imageSrc,\n      scale,\n      framesMax,\n      offset,\n      context // Pass the canvas context to the superclass constructor\n    });\n\n    this.velocity = velocity;\n    this.width = 50;\n    this.height = 150;\n    this.lastKey;\n    this.attackBox = {\n      position: {\n        x: this.position.x,\n        y: this.position.y\n      },\n      offset: attackBox.offset,\n      width: attackBox.width,\n      height: attackBox.height\n    };\n    this.color = color;\n    this.isAttacking;\n    this.health = 100;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.sprites = sprites;\n    this.dead = false;\n    for (const sprite in this.sprites) {\n      sprites[sprite].image = new Image();\n      sprites[sprite].image.src = sprites[sprite].imageSrc;\n    }\n  }\n  update() {\n    this.draw();\n    if (!this.dead) this.animateFrames();\n\n    // Attack boxes\n    this.attackBox.position.x = this.position.x + this.attackBox.offset.x;\n    this.attackBox.position.y = this.position.y + this.attackBox.offset.y;\n\n    // Draw the attack box\n    // this.context.fillRect(\n    //   this.attackBox.position.x,\n    //   this.attackBox.position.y,\n    //   this.attackBox.width,\n    //   this.attackBox.height\n    // );\n\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // Gravity function (assuming gravity is defined elsewhere)\n    if (this.position.y + this.height + this.velocity.y >= this.context.canvas.height - 96) {\n      this.velocity.y = 0;\n      this.position.y = 330;\n    } else this.velocity.y += gravity; // Make sure 'gravity' is defined or passed in\n  }\n\n  attack() {\n    this.switchSprite('attack1');\n    this.isAttacking = true;\n  }\n  takeHit() {\n    this.health -= 20;\n    if (this.health <= 0) {\n      this.switchSprite('death');\n    } else this.switchSprite('takeHit');\n  }\n  switchSprite(sprite) {\n    if (this.image === this.sprites.death.image) {\n      if (this.framesCurrent === this.sprites.death.framesMax - 1) this.dead = true;\n      return;\n    }\n\n    // Overriding all other animations with the attack animation\n    if (this.image === this.sprites.attack1.image && this.framesCurrent < this.sprites.attack1.framesMax - 1) return;\n\n    // Override when fighter gets hit\n    if (this.image === this.sprites.takeHit.image && this.framesCurrent < this.sprites.takeHit.framesMax - 1) return;\n    switch (sprite) {\n      case 'idle':\n        if (this.image !== this.sprites.idle.image) {\n          this.image = this.sprites.idle.image;\n          this.framesMax = this.sprites.idle.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'run':\n        if (this.image !== this.sprites.run.image) {\n          this.image = this.sprites.run.image;\n          this.framesMax = this.sprites.run.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'jump':\n        if (this.image !== this.sprites.jump.image) {\n          this.image = this.sprites.jump.image;\n          this.framesMax = this.sprites.jump.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'fall':\n        if (this.image !== this.sprites.fall.image) {\n          this.image = this.sprites.fall.image;\n          this.framesMax = this.sprites.fall.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'attack1':\n        if (this.image !== this.sprites.attack1.image) {\n          this.image = this.sprites.attack1.image;\n          this.framesMax = this.sprites.attack1.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'takeHit':\n        if (this.image !== this.sprites.takeHit.image) {\n          this.image = this.sprites.takeHit.image;\n          this.framesMax = this.sprites.takeHit.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'death':\n        if (this.image !== this.sprites.death.image) {\n          this.image = this.sprites.death.image;\n          this.framesMax = this.sprites.death.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n    }\n  }\n}\nexport default Sprite;","map":{"version":3,"names":["Sprite","constructor","position","imageSrc","scale","framesMax","offset","x","y","context","width","height","image","Image","src","framesCurrent","framesElapsed","framesHold","onload","draw","complete","drawImage","animateFrames","update","Fighter","velocity","color","sprites","attackBox","undefined","lastKey","isAttacking","health","dead","sprite","canvas","gravity","attack","switchSprite","takeHit","death","attack1","idle","run","jump","fall"],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/classes.js"],"sourcesContent":["// export class Sprite {\r\n//     constructor ({\r\n//       position,\r\n//       imageSrc,\r\n//       scale = 1,\r\n//       framesMax = 1,\r\n//       offset = { x: 0, y: 0 }\r\n//     }) {\r\n//       this.position = position\r\n//       this.width = 50\r\n//       this.height = 150\r\n//       this.image = new Image()\r\n//       this.image.src = imageSrc\r\n//       this.scale = scale\r\n//       this.framesMax = framesMax\r\n//       this.framesCurrent = 0\r\n//       this.framesElapsed = 0\r\n//       this.framesHold = 5\r\n//       this.offset = offset\r\n//       this.context = context\r\n//     }\r\n  \r\n//     draw() {\r\n//       this.context.drawImage(\r\n//         this.image,\r\n//         this.framesCurrent * (this.image.width / this.framesMax),\r\n//         0,\r\n//         this.image.width / this.framesMax,\r\n//         this.image.height,\r\n//         this.position.x - this.offset.x,\r\n//         this.position.y - this.offset.y,\r\n//         (this.image.width / this.framesMax) * this.scale,\r\n//         this.image.height * this.scale\r\n//       )\r\n//     }\r\n  \r\n//     animateFrames() {\r\n//       this.framesElapsed++\r\n  \r\n//       if (this.framesElapsed % this.framesHold === 0) {\r\n//         if (this.framesCurrent < this.framesMax - 1) {\r\n//           this.framesCurrent++\r\n//         } else {\r\n//           this.framesCurrent = 0\r\n//         }\r\n//       }\r\n//     }\r\n  \r\n//     update() {\r\n//       this.draw()\r\n//       this.animateFrames()\r\n//     }\r\n//   }\r\n  \r\n//   export class Fighter extends Sprite {\r\n//     constructor({\r\n//       position,\r\n//       velocity,\r\n//       color = 'red',\r\n//       imageSrc,\r\n//       scale = 1,\r\n//       framesMax = 1,\r\n//       offset = { x: 0, y: 0 },\r\n//       sprites,\r\n//       attackBox = { offset: {}, width: undefined, height: undefined },\r\n//       context,\r\n//     }) {\r\n//       super({\r\n//         position,\r\n//         imageSrc,\r\n//         scale,\r\n//         framesMax,\r\n//         offset,\r\n//         context,\r\n//       });\r\n  \r\n//       this.velocity = velocity\r\n//       this.width = 50\r\n//       this.height = 150\r\n//       this.lastKey\r\n//       this.attackBox = {\r\n//         position: {\r\n//           x: this.position.x,\r\n//           y: this.position.y\r\n//         },\r\n//         offset: attackBox.offset,\r\n//         width: attackBox.width,\r\n//         height: attackBox.height\r\n//       }\r\n//       this.color = color\r\n//       this.isAttacking\r\n//       this.health = 100\r\n//       this.framesCurrent = 0\r\n//       this.framesElapsed = 0\r\n//       this.framesHold = 5\r\n//       this.sprites = sprites\r\n//       this.dead = false\r\n  \r\n//       for (const sprite in this.sprites) {\r\n//         sprites[sprite].image = new Image()\r\n//         sprites[sprite].image.src = sprites[sprite].imageSrc\r\n//       }\r\n//     }\r\n  \r\n//     update() {\r\n//       this.draw()\r\n//       if (!this.dead) this.animateFrames()\r\n  \r\n//       // attack boxes\r\n//       this.attackBox.position.x = this.position.x + this.attackBox.offset.x\r\n//       this.attackBox.position.y = this.position.y + this.attackBox.offset.y\r\n  \r\n//       // draw the attack box\r\n//       // c.fillRect(\r\n//       //   this.attackBox.position.x,\r\n//       //   this.attackBox.position.y,\r\n//       //   this.attackBox.width,\r\n//       //   this.attackBox.height\r\n//       // )\r\n  \r\n//       this.position.x += this.velocity.x\r\n//       this.position.y += this.velocity.y\r\n  \r\n//       // gravity function\r\n//       if (this.position.y + this.height + this.velocity.y >= canvas.height - 96) {\r\n//         this.velocity.y = 0\r\n//         this.position.y = 330\r\n//       } else this.velocity.y += gravity\r\n//     }\r\n  \r\n//     attack() {\r\n//       this.switchSprite('attack1')\r\n//       this.isAttacking = true\r\n//     }\r\n  \r\n//     takeHit() {\r\n//       this.health -= 20\r\n  \r\n//       if (this.health <= 0) {\r\n//         this.switchSprite('death')\r\n//       } else this.switchSprite('takeHit')\r\n//     }\r\n  \r\n//     switchSprite(sprite) {\r\n//       if (this.image === this.sprites.death.image) {\r\n//         if (this.framesCurrent === this.sprites.death.framesMax - 1)\r\n//           this.dead = true;\r\n//         return;\r\n//       }\r\n  \r\n//       // overriding all other animations with the attack animation\r\n//       if (\r\n//         this.image === this.sprites.attack1.image &&\r\n//         this.framesCurrent < this.sprites.attack1.framesMax - 1\r\n//       )\r\n//         return\r\n  \r\n//       // override when fighter gets hit\r\n//       if (\r\n//         this.image === this.sprites.takeHit.image &&\r\n//         this.framesCurrent < this.sprites.takeHit.framesMax - 1\r\n//       )\r\n//         return\r\n  \r\n//       switch (sprite) {\r\n//         case 'idle':\r\n//           if (this.image !== this.sprites.idle.image) {\r\n//             this.image = this.sprites.idle.image\r\n//             this.framesMax = this.sprites.idle.framesMax\r\n//             this.framesCurrent = 0\r\n//           }\r\n//           break\r\n//         case 'run':\r\n//           if (this.image !== this.sprites.run.image) {\r\n//             this.image = this.sprites.run.image\r\n//             this.framesMax = this.sprites.run.framesMax\r\n//             this.framesCurrent = 0\r\n//           }\r\n//           break\r\n//         case 'jump':\r\n//           if (this.image !== this.sprites.jump.image) {\r\n//             this.image = this.sprites.jump.image\r\n//             this.framesMax = this.sprites.jump.framesMax\r\n//             this.framesCurrent = 0\r\n//           }\r\n//           break\r\n  \r\n//         case 'fall':\r\n//           if (this.image !== this.sprites.fall.image) {\r\n//             this.image = this.sprites.fall.image\r\n//             this.framesMax = this.sprites.fall.framesMax\r\n//             this.framesCurrent = 0\r\n//           }\r\n//           break\r\n  \r\n//         case 'attack1':\r\n//           if (this.image !== this.sprites.attack1.image) {\r\n//             this.image = this.sprites.attack1.image\r\n//             this.framesMax = this.sprites.attack1.framesMax\r\n//             this.framesCurrent = 0\r\n//           }\r\n//           break\r\n  \r\n//         case 'takeHit':\r\n//           if (this.image !== this.sprites.takeHit.image) {\r\n//             this.image = this.sprites.takeHit.image\r\n//             this.framesMax = this.sprites.takeHit.framesMax\r\n//             this.framesCurrent = 0\r\n//           }\r\n//           break\r\n  \r\n//         case 'death':\r\n//           if (this.image !== this.sprites.death.image) {\r\n//             this.image = this.sprites.death.image\r\n//             this.framesMax = this.sprites.death.framesMax\r\n//             this.framesCurrent = 0\r\n//           }\r\n//           break\r\n//       }\r\n//     }\r\n//   }\r\n\r\n// export default Sprite;\r\n\r\n\r\n\r\nexport class Sprite {\r\n  constructor({\r\n    position,\r\n    imageSrc,\r\n    scale = 1,\r\n    framesMax = 1,\r\n    offset = { x: 0, y: 0 },\r\n    context, // Pass the canvas context as an argument\r\n  }) {\r\n    this.position = position;\r\n    this.width = 50;\r\n    this.height = 150;\r\n    this.image = new Image();\r\n    this.image.src = imageSrc;\r\n    this.scale = scale;\r\n    this.framesMax = framesMax;\r\n    this.framesCurrent = 0;\r\n    this.framesElapsed = 0;\r\n    this.framesHold = 5;\r\n    this.offset = offset;\r\n    this.context = context; // Store the canvas context\r\n\r\n    this.image.onload = () => {\r\n      // You can safely use the image here\r\n    };\r\n  }\r\n  };\r\n\r\n  // draw() {\r\n  //   this.context.drawImage(\r\n  //     this.image,\r\n  //     this.framesCurrent * (this.image.width / this.framesMax),\r\n  //     0,\r\n  //     this.image.width / this.framesMax,\r\n  //     this.image.height,\r\n  //     this.position.x - this.offset.x,\r\n  //     this.position.y - this.offset.y,\r\n  //     (this.image.width / this.framesMax) * this.scale,\r\n  //     this.image.height * this.scale\r\n  //   );\r\n  // }\r\n  draw() \r\n    if (this.image.complete) {\r\n      this.context.drawImage(\r\n        this.image,\r\n        this.framesCurrent * (this.image.width / this.framesMax),\r\n        0,\r\n        this.image.width / this.framesMax,\r\n        this.image.height,\r\n        this.position.x - this.offset.x,\r\n        this.position.y - this.offset.y,\r\n        (this.image.width / this.framesMax) * this.scale,\r\n        this.image.height * this.scale\r\n      );\r\n    }\r\n  \r\n\r\n  animateFrames() \r\n    this.framesElapsed++;\r\n\r\n    if (this.framesElapsed % this.framesHold === 0) {\r\n      if (this.framesCurrent < this.framesMax - 1) {\r\n        this.framesCurrent++;\r\n      } else {\r\n        this.framesCurrent = 0;\r\n      }\r\n    }\r\n  \r\n\r\n  update() \r\n    this.draw();\r\n    this.animateFrames();\r\n\r\n\r\n\r\nexport class Fighter extends Sprite {\r\n  constructor({\r\n    position,\r\n    velocity,\r\n    color = 'red',\r\n    imageSrc,\r\n    scale = 1,\r\n    framesMax = 1,\r\n    offset = { x: 0, y: 0 },\r\n    sprites,\r\n    attackBox = { offset: {}, width: undefined, height: undefined },\r\n    context, // Pass the canvas context as an argument\r\n  }) {\r\n    super({\r\n      position,\r\n      imageSrc,\r\n      scale,\r\n      framesMax,\r\n      offset,\r\n      context, // Pass the canvas context to the superclass constructor\r\n    });\r\n\r\n    this.velocity = velocity;\r\n    this.width = 50;\r\n    this.height = 150;\r\n    this.lastKey;\r\n    this.attackBox = {\r\n      position: {\r\n        x: this.position.x,\r\n        y: this.position.y,\r\n      },\r\n      offset: attackBox.offset,\r\n      width: attackBox.width,\r\n      height: attackBox.height,\r\n    };\r\n    this.color = color;\r\n    this.isAttacking;\r\n    this.health = 100;\r\n    this.framesCurrent = 0;\r\n    this.framesElapsed = 0;\r\n    this.framesHold = 5;\r\n    this.sprites = sprites;\r\n    this.dead = false;\r\n\r\n    for (const sprite in this.sprites) {\r\n      sprites[sprite].image = new Image();\r\n      sprites[sprite].image.src = sprites[sprite].imageSrc;\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.draw();\r\n    if (!this.dead) this.animateFrames();\r\n\r\n    // Attack boxes\r\n    this.attackBox.position.x = this.position.x + this.attackBox.offset.x;\r\n    this.attackBox.position.y = this.position.y + this.attackBox.offset.y;\r\n\r\n    // Draw the attack box\r\n    // this.context.fillRect(\r\n    //   this.attackBox.position.x,\r\n    //   this.attackBox.position.y,\r\n    //   this.attackBox.width,\r\n    //   this.attackBox.height\r\n    // );\r\n\r\n    this.position.x += this.velocity.x;\r\n    this.position.y += this.velocity.y;\r\n\r\n    // Gravity function (assuming gravity is defined elsewhere)\r\n    if (this.position.y + this.height + this.velocity.y >= this.context.canvas.height - 96) {\r\n      this.velocity.y = 0;\r\n      this.position.y = 330;\r\n    } else this.velocity.y += gravity; // Make sure 'gravity' is defined or passed in\r\n  }\r\n\r\n  attack() {\r\n    this.switchSprite('attack1');\r\n    this.isAttacking = true;\r\n  }\r\n\r\n  takeHit() {\r\n    this.health -= 20;\r\n\r\n    if (this.health <= 0) {\r\n      this.switchSprite('death');\r\n    } else this.switchSprite('takeHit');\r\n  }\r\n\r\n  switchSprite(sprite) {\r\n    if (this.image === this.sprites.death.image) {\r\n      if (this.framesCurrent === this.sprites.death.framesMax - 1) this.dead = true;\r\n      return;\r\n    }\r\n\r\n    // Overriding all other animations with the attack animation\r\n    if (\r\n      this.image === this.sprites.attack1.image &&\r\n      this.framesCurrent < this.sprites.attack1.framesMax - 1\r\n    )\r\n      return;\r\n\r\n    // Override when fighter gets hit\r\n    if (\r\n      this.image === this.sprites.takeHit.image &&\r\n      this.framesCurrent < this.sprites.takeHit.framesMax - 1\r\n    )\r\n      return;\r\n\r\n    switch (sprite) {\r\n      case 'idle':\r\n        if (this.image !== this.sprites.idle.image) {\r\n          this.image = this.sprites.idle.image;\r\n          this.framesMax = this.sprites.idle.framesMax;\r\n          this.framesCurrent = 0;\r\n        }\r\n        break;\r\n      case 'run':\r\n        if (this.image !== this.sprites.run.image) {\r\n          this.image = this.sprites.run.image;\r\n          this.framesMax = this.sprites.run.framesMax;\r\n          this.framesCurrent = 0;\r\n        }\r\n        break;\r\n      case 'jump':\r\n        if (this.image !== this.sprites.jump.image) {\r\n          this.image = this.sprites.jump.image;\r\n          this.framesMax = this.sprites.jump.framesMax;\r\n          this.framesCurrent = 0;\r\n        }\r\n        break;\r\n\r\n      case 'fall':\r\n        if (this.image !== this.sprites.fall.image) {\r\n          this.image = this.sprites.fall.image;\r\n          this.framesMax = this.sprites.fall.framesMax;\r\n          this.framesCurrent = 0;\r\n        }\r\n        break;\r\n\r\n      case 'attack1':\r\n        if (this.image !== this.sprites.attack1.image) {\r\n          this.image = this.sprites.attack1.image;\r\n          this.framesMax = this.sprites.attack1.framesMax;\r\n          this.framesCurrent = 0;\r\n        }\r\n        break;\r\n\r\n      case 'takeHit':\r\n        if (this.image !== this.sprites.takeHit.image) {\r\n          this.image = this.sprites.takeHit.image;\r\n          this.framesMax = this.sprites.takeHit.framesMax;\r\n          this.framesCurrent = 0;\r\n        }\r\n        break;\r\n\r\n      case 'death':\r\n        if (this.image !== this.sprites.death.image) {\r\n          this.image = this.sprites.death.image;\r\n          this.framesMax = this.sprites.death.framesMax;\r\n          this.framesCurrent = 0;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Sprite;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}