{"ast":null,"code":"// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import {\n//   Button,\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   InputGroup,\n//   InputRightElement,\n//   VStack,\n//   useToast,\n//   Box,\n//   Container,\n//   Flex,\n//  Text,\n// } from \"@chakra-ui/react\";\n// import { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\n// import { useNavigate } from 'react-router-dom';\n\n// import clicksound from './Sounds/Click - Sound Effect.mp3'\n\n// const Signup = () => {\n//   const [name, setName] = useState();\n//   const [email, setEmail] = useState();\n//   const [confirmpassword, setConfirmpassword] = useState();\n//   const [password, setPassword] = useState();\n//   const [show, setShow] = useState(false);\n//   const [showconfirm, setShowconfirm] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const toast = useToast();\n//   const navigate = useNavigate();\n\n//   const ding = () => {\n//     const sound = new Audio(clicksound);\n//     sound.play();\n//   };\n//   const handleClick = () => setShow(!show);\n//   const handleConfirmClick = () => {\n//     setShowconfirm(!showconfirm);\n//   };\n\n//   // const submitHandler = async () => {\n//   //   setLoading(true);\n//   //   if (!name || !email || !password || !confirmpassword) {\n//   //     toast({\n//   //       title: \"Please fill all the required fields\",\n//   //       status: \"warning\",\n//   //       duration: 5000,\n//   //       isClosable: \"true\",\n//   //       position: \"bottom\",\n//   //     });\n\n//   //     setLoading(false);\n//   //     return;\n//   //   }\n//   //   if (password !== confirmpassword) {\n//   //     toast({\n//   //       title: \"Passwords Doesn't match\",\n//   //       status: \"warning\",\n//   //       duration: 5000,\n//   //       isClosable: true,\n//   //       position: \"top\",\n//   //     });\n//   //     return;\n//   //   }\n//   //   try {\n//   //     const config = {\n//   //       headers: {\n//   //         \"Content-type\": \"application/json\",\n//   //       },\n//   //     };\n\n//   //     const response = await axios.post(\n//   //       \"http://127.0.0.1:5000/roboWar/auth\",\n//   //       { name, email, password},\n//   //       config\n//   //     );\n//   //     console.log(response);\n//   //     console.log(response.data);\n\n//   //     toast({\n//   //       title: \"Registration successful\",\n//   //       duration: 5000,\n//   //       status: \"success\",\n//   //       isClosable: true,\n//   //       position: \"top\",\n//   //     });\n\n//   //     localStorage.setItem('userInfo', JSON.stringify(response.data));\n//   //     setLoading(false);\n//   //     navigate('/Main')\n\n//   //   } catch (error) {\n//   //     toast({\n//   //       title: \"Error Occured!\",\n//   //        description: error.response.data.message,\n//   //       status: \"error\",\n//   //       duration: 5000,\n//   //       isClosable: true,\n//   //       position: \"top\",\n//   //     });\n//   //   }    \n//   // };\n\n//   const submitHandler = async () => {\n//     setLoading(true);\n//     if (!name || !email || !password || !confirmpassword) {\n//       toast({\n//         title: \"Please fill all the required fields\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom\",\n//       });\n\n//       setLoading(false);\n//       return;\n//     }\n//     if (password !== confirmpassword) {\n//       toast({\n//         title: \"Passwords Doesn't match\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//       setLoading(false);\n//       return;\n//     }\n//     try {\n//       const config = {\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//         },\n//       };\n\n//       const response = await axios.post(\n//         \"http://127.0.0.1:5000/roboWar/auth\",\n//         { name, email, password },\n//         config\n//       );\n\n//       console.log(\"Response:\", response); // Add this line for debugging\n\n//       if (response && response.data) {\n//         // Check if 'data' property exists\n//         console.log(\"Data:\", response.data);\n\n//         toast({\n//           title: \"Registration successful\",\n//           duration: 5000,\n//           status: \"success\",\n//           isClosable: true,\n//           position: \"top\",\n//         });\n\n//         localStorage.setItem('userInfo', JSON.stringify(response.data));\n//         setLoading(false);\n//         navigate('/Main');\n//       } else {\n//         console.error(\"Invalid response or missing data.\");\n//         setLoading(false);\n//       }\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       toast({\n//         title: \"Error Occurred!\",\n//         description: error.response?.data.message || \"An error occurred\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top\",\n//       });\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//    <>\n//    <Container>\n//         <Flex color=\"white\" align=\"center\">\n//           <Box w=\"5750px\">\n//             <VStack spacing=\"5px\" color=\"white\">\n//               <FormControl id=\"first-name\" isRequired>\n//                 <FormLabel>Username</FormLabel>\n//                 <Input\n//                 onClick={ding}\n//                 placeholder=\"Enter your name\"\n//                 bg={name ? \"gray.50\" : \"white\"}\n//                 color=\"black\"\n//                 _hover={{ borderColor: \"black\" }}\n//                 borderColor=\"black\"\n//                 onChange={(event) => {\n//                   setName(event.target.value);\n//           }}\n//           value={name}\n//         />\n//       </FormControl>\n\n//       <FormControl id=\"email\" isRequired>\n//         <FormLabel>Email</FormLabel>\n//         <Input\n//         onClick={ding}\n//         placeholder=\"Enter your email\"\n//           bg={email ? \"gray.50\" : \"white\"}\n//           _hover={{ borderColor: \"black\" }}\n//           color=\"black\"\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setEmail(event.target.value);\n//           }}\n//           value={email}\n//         />\n//       </FormControl>\n//       <FormControl id=\"password\" isRequired>\n//         <FormLabel>Password</FormLabel>\n//         <InputGroup>\n//         <Input\n//            onClick={ding}\n//           placeholder=\"Enter your password\"\n//           bg={password ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setPassword(event.target.value);\n//           }}\n//           value={password}\n//         />\n//        <InputRightElement w=\"4.5em\">\n//             <Button\n//               h=\"1.75em\"\n//               size=\"md\"\n//               onClick={handleClick}\n//               color=\"black\"\n//               variant=\"ghost\"\n//             >\n//               {show ? <ViewOffIcon /> : <ViewIcon />}\n//             </Button>\n//           </InputRightElement>\n//           </InputGroup>\n//          </FormControl>\n\n//          <FormControl id=\"confirm-password\" isRequired>\n//           <FormLabel>Confirm Password</FormLabel>\n//           <InputGroup>\n//           <Input\n//           onClick={ding}\n//           type={showconfirm ? \"text\" : \"password\"}\n//           placeholder=\"Re-enter your password\"\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\n//           color=\"black\"\n//           _hover={{ borderColor: \"black\" }}\n//           borderColor=\"black\"\n//           onChange={(event) => {\n//             setConfirmpassword(event.target.value);\n//           }}\n//           value={confirmpassword}\n//         />\n//         <InputRightElement w=\"4.5em\">\n//             <Button\n//               h=\"1.75em\"\n//               size=\"md\"\n//               onClick={handleConfirmClick}\n//               color=\"black\"\n//               variant=\"ghost\"\n//             >\n//               {showconfirm ? <ViewOffIcon /> : <ViewIcon />}\n//             </Button>\n//           </InputRightElement>\n//         </InputGroup>\n//       </FormControl>\n//               <Button\n//                 colorScheme=\"teal\"\n//                 size=\"lg\"\n//                 margin=\"5\"\n//                 color=\"white\"\n//                 fontWeight=\"bold\"\n//                 borderRadius=\"md\"\n//                 bgGradient=\"linear(to-r, teal.500, green.500)\"\n//                 _hover={{\n//                   bgGradient: \"linear(to-r, red.500, yellow.500)\",\n//                 }}\n//                 style={{ marginTop: 15 }}\n//                 onClick={() => {\n//                   ding(); // Play sound effect\n//                   submitHandler(); // Handle form submission\n//                 }}\n//                 isLoading={loading}\n//               >\n//                 Sign Up\n//               </Button>\n//             </VStack>\n//           </Box>\n//         </Flex>\n//       </Container>\n//       </>\n//   );\n// };\n\n// export default Signup;","map":{"version":3,"names":[],"sources":["C:/Users/Meenal Jain/Desktop/robo_war/robo-war/src/Signup.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import {\r\n//   Button,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Input,\r\n//   InputGroup,\r\n//   InputRightElement,\r\n//   VStack,\r\n//   useToast,\r\n//   Box,\r\n//   Container,\r\n//   Flex,\r\n//  Text,\r\n// } from \"@chakra-ui/react\";\r\n// import { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// import clicksound from './Sounds/Click - Sound Effect.mp3'\r\n\r\n\r\n// const Signup = () => {\r\n//   const [name, setName] = useState();\r\n//   const [email, setEmail] = useState();\r\n//   const [confirmpassword, setConfirmpassword] = useState();\r\n//   const [password, setPassword] = useState();\r\n//   const [show, setShow] = useState(false);\r\n//   const [showconfirm, setShowconfirm] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const toast = useToast();\r\n//   const navigate = useNavigate();\r\n\r\n\r\n\r\n//   const ding = () => {\r\n//     const sound = new Audio(clicksound);\r\n//     sound.play();\r\n//   };\r\n//   const handleClick = () => setShow(!show);\r\n//   const handleConfirmClick = () => {\r\n//     setShowconfirm(!showconfirm);\r\n//   };\r\n\r\n//   // const submitHandler = async () => {\r\n//   //   setLoading(true);\r\n//   //   if (!name || !email || !password || !confirmpassword) {\r\n//   //     toast({\r\n//   //       title: \"Please fill all the required fields\",\r\n//   //       status: \"warning\",\r\n//   //       duration: 5000,\r\n//   //       isClosable: \"true\",\r\n//   //       position: \"bottom\",\r\n//   //     });\r\n\r\n//   //     setLoading(false);\r\n//   //     return;\r\n//   //   }\r\n//   //   if (password !== confirmpassword) {\r\n//   //     toast({\r\n//   //       title: \"Passwords Doesn't match\",\r\n//   //       status: \"warning\",\r\n//   //       duration: 5000,\r\n//   //       isClosable: true,\r\n//   //       position: \"top\",\r\n//   //     });\r\n//   //     return;\r\n//   //   }\r\n//   //   try {\r\n//   //     const config = {\r\n//   //       headers: {\r\n//   //         \"Content-type\": \"application/json\",\r\n//   //       },\r\n//   //     };\r\n\r\n//   //     const response = await axios.post(\r\n//   //       \"http://127.0.0.1:5000/roboWar/auth\",\r\n//   //       { name, email, password},\r\n//   //       config\r\n//   //     );\r\n//   //     console.log(response);\r\n//   //     console.log(response.data);\r\n\r\n//   //     toast({\r\n//   //       title: \"Registration successful\",\r\n//   //       duration: 5000,\r\n//   //       status: \"success\",\r\n//   //       isClosable: true,\r\n//   //       position: \"top\",\r\n//   //     });\r\n\r\n    \r\n//   //     localStorage.setItem('userInfo', JSON.stringify(response.data));\r\n//   //     setLoading(false);\r\n//   //     navigate('/Main')\r\n\r\n//   //   } catch (error) {\r\n//   //     toast({\r\n//   //       title: \"Error Occured!\",\r\n//   //        description: error.response.data.message,\r\n//   //       status: \"error\",\r\n//   //       duration: 5000,\r\n//   //       isClosable: true,\r\n//   //       position: \"top\",\r\n//   //     });\r\n//   //   }    \r\n//   // };\r\n\r\n//   const submitHandler = async () => {\r\n//     setLoading(true);\r\n//     if (!name || !email || !password || !confirmpassword) {\r\n//       toast({\r\n//         title: \"Please fill all the required fields\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom\",\r\n//       });\r\n  \r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     if (password !== confirmpassword) {\r\n//       toast({\r\n//         title: \"Passwords Doesn't match\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           \"Content-type\": \"application/json\",\r\n//         },\r\n//       };\r\n  \r\n//       const response = await axios.post(\r\n//         \"http://127.0.0.1:5000/roboWar/auth\",\r\n//         { name, email, password },\r\n//         config\r\n//       );\r\n  \r\n//       console.log(\"Response:\", response); // Add this line for debugging\r\n  \r\n//       if (response && response.data) {\r\n//         // Check if 'data' property exists\r\n//         console.log(\"Data:\", response.data);\r\n  \r\n//         toast({\r\n//           title: \"Registration successful\",\r\n//           duration: 5000,\r\n//           status: \"success\",\r\n//           isClosable: true,\r\n//           position: \"top\",\r\n//         });\r\n  \r\n//         localStorage.setItem('userInfo', JSON.stringify(response.data));\r\n//         setLoading(false);\r\n//         navigate('/Main');\r\n//       } else {\r\n//         console.error(\"Invalid response or missing data.\");\r\n//         setLoading(false);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error);\r\n//       toast({\r\n//         title: \"Error Occurred!\",\r\n//         description: error.response?.data.message || \"An error occurred\",\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top\",\r\n//       });\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//    <>\r\n//    <Container>\r\n//         <Flex color=\"white\" align=\"center\">\r\n//           <Box w=\"5750px\">\r\n//             <VStack spacing=\"5px\" color=\"white\">\r\n//               <FormControl id=\"first-name\" isRequired>\r\n//                 <FormLabel>Username</FormLabel>\r\n//                 <Input\r\n//                 onClick={ding}\r\n//                 placeholder=\"Enter your name\"\r\n//                 bg={name ? \"gray.50\" : \"white\"}\r\n//                 color=\"black\"\r\n//                 _hover={{ borderColor: \"black\" }}\r\n//                 borderColor=\"black\"\r\n//                 onChange={(event) => {\r\n//                   setName(event.target.value);\r\n//           }}\r\n//           value={name}\r\n//         />\r\n//       </FormControl>\r\n\r\n//       <FormControl id=\"email\" isRequired>\r\n//         <FormLabel>Email</FormLabel>\r\n//         <Input\r\n//         onClick={ding}\r\n//         placeholder=\"Enter your email\"\r\n//           bg={email ? \"gray.50\" : \"white\"}\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           color=\"black\"\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setEmail(event.target.value);\r\n//           }}\r\n//           value={email}\r\n//         />\r\n//       </FormControl>\r\n//       <FormControl id=\"password\" isRequired>\r\n//         <FormLabel>Password</FormLabel>\r\n//         <InputGroup>\r\n//         <Input\r\n//            onClick={ding}\r\n//           placeholder=\"Enter your password\"\r\n//           bg={password ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setPassword(event.target.value);\r\n//           }}\r\n//           value={password}\r\n//         />\r\n//        <InputRightElement w=\"4.5em\">\r\n//             <Button\r\n//               h=\"1.75em\"\r\n//               size=\"md\"\r\n//               onClick={handleClick}\r\n//               color=\"black\"\r\n//               variant=\"ghost\"\r\n//             >\r\n//               {show ? <ViewOffIcon /> : <ViewIcon />}\r\n//             </Button>\r\n//           </InputRightElement>\r\n//           </InputGroup>\r\n//          </FormControl>\r\n         \r\n//          <FormControl id=\"confirm-password\" isRequired>\r\n//           <FormLabel>Confirm Password</FormLabel>\r\n//           <InputGroup>\r\n//           <Input\r\n//           onClick={ding}\r\n//           type={showconfirm ? \"text\" : \"password\"}\r\n//           placeholder=\"Re-enter your password\"\r\n//           bg={confirmpassword ? \"gray.50\" : \"white\"}\r\n//           color=\"black\"\r\n//           _hover={{ borderColor: \"black\" }}\r\n//           borderColor=\"black\"\r\n//           onChange={(event) => {\r\n//             setConfirmpassword(event.target.value);\r\n//           }}\r\n//           value={confirmpassword}\r\n//         />\r\n//         <InputRightElement w=\"4.5em\">\r\n//             <Button\r\n//               h=\"1.75em\"\r\n//               size=\"md\"\r\n//               onClick={handleConfirmClick}\r\n//               color=\"black\"\r\n//               variant=\"ghost\"\r\n//             >\r\n//               {showconfirm ? <ViewOffIcon /> : <ViewIcon />}\r\n//             </Button>\r\n//           </InputRightElement>\r\n//         </InputGroup>\r\n//       </FormControl>\r\n//               <Button\r\n//                 colorScheme=\"teal\"\r\n//                 size=\"lg\"\r\n//                 margin=\"5\"\r\n//                 color=\"white\"\r\n//                 fontWeight=\"bold\"\r\n//                 borderRadius=\"md\"\r\n//                 bgGradient=\"linear(to-r, teal.500, green.500)\"\r\n//                 _hover={{\r\n//                   bgGradient: \"linear(to-r, red.500, yellow.500)\",\r\n//                 }}\r\n//                 style={{ marginTop: 15 }}\r\n//                 onClick={() => {\r\n//                   ding(); // Play sound effect\r\n//                   submitHandler(); // Handle form submission\r\n//                 }}\r\n//                 isLoading={loading}\r\n//               >\r\n//                 Sign Up\r\n//               </Button>\r\n//             </VStack>\r\n//           </Box>\r\n//         </Flex>\r\n//       </Container>\r\n//       </>\r\n//   );\r\n// };\r\n\r\n// export default Signup;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}